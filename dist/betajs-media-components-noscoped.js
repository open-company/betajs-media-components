/*!
betajs-media-components - v0.0.133 - 2018-10-10
Copyright (c) Ziggeo,Oliver Friedmann
Apache-2.0 Software License.
*/

(function () {
var Scoped = this.subScope();
Scoped.binding('module', 'global:BetaJS.MediaComponents');
Scoped.binding('base', 'global:BetaJS');
Scoped.binding('browser', 'global:BetaJS.Browser');
Scoped.binding('flash', 'global:BetaJS.Flash');
Scoped.binding('media', 'global:BetaJS.Media');
Scoped.binding('dynamics', 'global:BetaJS.Dynamics');
Scoped.define("module:", function () {
	return {
    "guid": "7a20804e-be62-4982-91c6-98eb096d2e70",
    "version": "0.0.133"
};
});
Scoped.assumeVersion('base:version', '~1.0.96');
Scoped.assumeVersion('browser:version', '~1.0.65');
Scoped.assumeVersion('flash:version', '~0.0.18');
Scoped.assumeVersion('dynamics:version', '~0.0.83');
Scoped.assumeVersion('media:version', '~0.0.45');
Scoped.extend("module:Assets", ["module:Assets"], function (Assets) {
    var languages = {"language:ar":{"ba-videoplayer-playbutton.tooltip":"&#x627;&#x646;&#x642;&#x631; &#x644;&#x62A;&#x634;&#x63A;&#x64A;&#x644; &#x627;&#x644;&#x641;&#x64A;&#x62F;&#x64A;&#x648;.","ba-videoplayer-playbutton.rerecord":"&#x627;&#x639;&#x62F; &#x627;&#x644;&#x645;&#x62D;&#x627;&#x648;&#x644;&#x629;","ba-videoplayer-playbutton.submit-video":"&#x62A;&#x623;&#x643;&#x64A;&#x62F; &#x627;&#x644;&#x641;&#x64A;&#x62F;&#x64A;&#x648;","ba-videoplayer-loader.tooltip":"&#x62C;&#x627;&#x631; &#x62A;&#x62D;&#x645;&#x64A;&#x644; &#x627;&#x644;&#x641;&#x64A;&#x62F;&#x64A;&#x648; ...","ba-videoplayer-controlbar.change-resolution":"&#x62A;&#x63A;&#x64A;&#x64A;&#x631; &#x627;&#x644;&#x62F;&#x642;&#x629;","ba-videoplayer-controlbar.video-progress":"&#x62A;&#x642;&#x62F;&#x645; &#x627;&#x644;&#x641;&#x64A;&#x62F;&#x64A;&#x648;","ba-videoplayer-controlbar.rerecord-video":"&#x625;&#x639;&#x627;&#x62F;&#x629; &#x627;&#x644;&#x641;&#x64A;&#x62F;&#x64A;&#x648;&#x61F;","ba-videoplayer-controlbar.submit-video":"&#x62A;&#x623;&#x643;&#x64A;&#x62F; &#x627;&#x644;&#x641;&#x64A;&#x62F;&#x64A;&#x648;","ba-videoplayer-controlbar.play-video":"&#x634;&#x63A;&#x644; &#x627;&#x644;&#x641;&#x64A;&#x62F;&#x64A;&#x648;","ba-videoplayer-controlbar.pause-video":"&#x625;&#x64A;&#x642;&#x627;&#x641; &#x627;&#x644;&#x641;&#x64A;&#x62F;&#x64A;&#x648; &#x645;&#x624;&#x642;&#x62A;&#x627;","ba-videoplayer-controlbar.elapsed-time":"&#x627;&#x644;&#x648;&#x642;&#x62A; &#x627;&#x644;&#x645;&#x646;&#x642;&#x636;&#x64A;","ba-videoplayer-controlbar.total-time":"&#x637;&#x648;&#x644; &#x627;&#x644;&#x641;&#x64A;&#x62F;&#x64A;&#x648; &#x627;&#x644;&#x643;&#x644;&#x64A;","ba-videoplayer-controlbar.fullscreen-video":"&#x639;&#x631;&#x636; &#x645;&#x644;&#x621; &#x627;&#x644;&#x634;&#x627;&#x634;&#x629;","ba-videoplayer-controlbar.volume-button":"&#x62A;&#x639;&#x64A;&#x64A;&#x646; &#x645;&#x633;&#x62A;&#x648;&#x649; &#x627;&#x644;&#x635;&#x648;&#x62A;","ba-videoplayer-controlbar.volume-mute":"&#x643;&#x62A;&#x645; &#x627;&#x644;&#x635;&#x648;&#x62A;","ba-videoplayer-controlbar.volume-unmute":"&#x625;&#x644;&#x63A;&#x627;&#x621; &#x643;&#x62A;&#x645; &#x627;&#x644;&#x635;&#x648;&#x62A;","ba-videoplayer.video-error":"&#x644;&#x642;&#x62F; &#x62D;&#x62F;&#x62B; &#x62E;&#x637;&#x623;&#x60C; &#x631;&#x62C;&#x627;&#x621; &#x623;&#x639;&#x62F; &#x627;&#x644;&#x645;&#x62D;&#x627;&#x648;&#x644;&#x629; &#x644;&#x627;&#x62D;&#x642;&#x627;. &#x627;&#x646;&#x642;&#x631; &#x644;&#x625;&#x639;&#x627;&#x62F;&#x629; &#x627;&#x644;&#x645;&#x62D;&#x627;&#x648;&#x644;&#x629;.","ba-videorecorder-chooser.record-video":"&#x62A;&#x633;&#x62C;&#x64A;&#x644; &#x627;&#x644;&#x641;&#x64A;&#x62F;&#x64A;&#x648;","ba-videorecorder-chooser.upload-video":"&#x631;&#x641;&#x639; &#x641;&#x64A;&#x62F;&#x64A;&#x648;","ba-videorecorder-controlbar.settings":"&#x625;&#x639;&#x62F;&#x627;&#x62F;&#x627;&#x62A;","ba-videorecorder-controlbar.camerahealthy":"&#x627;&#x644;&#x625;&#x636;&#x627;&#x621;&#x629; &#x62C;&#x64A;&#x62F;&#x629;","ba-videorecorder-controlbar.cameraunhealthy":"&#x627;&#x644;&#x625;&#x636;&#x627;&#x621;&#x629; &#x644;&#x64A;&#x633;&#x62A; &#x627;&#x644;&#x623;&#x645;&#x62B;&#x644;","ba-videorecorder-controlbar.microphonehealthy":"&#x627;&#x644;&#x635;&#x648;&#x62A; &#x62C;&#x64A;&#x62F;","ba-videorecorder-controlbar.microphoneunhealthy":"&#x644;&#x627; &#x64A;&#x645;&#x643;&#x646; &#x627;&#x644;&#x62A;&#x642;&#x627;&#x637; &#x623;&#x64A; &#x635;&#x648;&#x62A;","ba-videorecorder-controlbar.record":"&#x633;&#x62C;&#x644;","ba-videorecorder-controlbar.record-tooltip":"&#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x644;&#x62A;&#x633;&#x62C;&#x64A;&#x644;.","ba-videorecorder-controlbar.rerecord":"&#x627;&#x639;&#x62F; &#x627;&#x644;&#x645;&#x62D;&#x627;&#x648;&#x644;&#x629;","ba-videorecorder-controlbar.rerecord-tooltip":"&#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x644;&#x625;&#x639;&#x627;&#x62F;&#x629;.","ba-videorecorder-controlbar.upload-covershot":"&#x631;&#x641;&#x639; &#x635;&#x648;&#x631;&#x629; &#x627;&#x644;&#x648;&#x627;&#x62C;&#x647;&#x629;.","ba-videorecorder-controlbar.upload-covershot-tooltip":"&#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x62A;&#x62D;&#x645;&#x64A;&#x644; &#x644;&#x642;&#x637;&#x629; &#x645;&#x62E;&#x635;&#x635;&#x629; &#x627;&#x644;&#x645;&#x62D;&#x627;&#x648;&#x644;&#x629;.","ba-videorecorder-controlbar.stop":"&#x62A;&#x648;&#x642;&#x641;","ba-videorecorder-controlbar.stop-tooltip":"&#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x644;&#x62A;&#x648;&#x642;&#x641;.","ba-videorecorder-controlbar.skip":"&#x62A;&#x62E;&#x637;&#x649;","ba-videorecorder-controlbar.skip-tooltip":"&#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x644;&#x62A;&#x62E;&#x637;&#x64A;.","ba-videorecorder.recorder-error":"&#x644;&#x642;&#x62F; &#x62D;&#x62F;&#x62B; &#x62E;&#x637;&#x623;&#x60C; &#x631;&#x62C;&#x627;&#x621; &#x623;&#x639;&#x62F; &#x627;&#x644;&#x645;&#x62D;&#x627;&#x648;&#x644;&#x629; &#x644;&#x627;&#x62D;&#x642;&#x627;. &#x627;&#x646;&#x642;&#x631; &#x644;&#x625;&#x639;&#x627;&#x62F;&#x629; &#x627;&#x644;&#x645;&#x62D;&#x627;&#x648;&#x644;&#x629;.","ba-videorecorder.attach-error":"&#x644;&#x645; &#x646;&#x62A;&#x645;&#x643;&#x646; &#x645;&#x646; &#x627;&#x644;&#x648;&#x635;&#x648;&#x644; &#x625;&#x644;&#x649; &#x648;&#x627;&#x62C;&#x647;&#x629; &#x627;&#x644;&#x643;&#x627;&#x645;&#x64A;&#x631;&#x627;. &#x627;&#x639;&#x62A;&#x645;&#x627;&#x62F;&#x627; &#x639;&#x644;&#x649; &#x627;&#x644;&#x62C;&#x647;&#x627;&#x632; &#x648;&#x627;&#x644;&#x645;&#x62A;&#x635;&#x641;&#x62D;&#x60C; &#x642;&#x62F; &#x62A;&#x62D;&#x62A;&#x627;&#x62C; &#x625;&#x644;&#x649; &#x62A;&#x62B;&#x628;&#x64A;&#x62A; &#x641;&#x644;&#x627;&#x634; &#x623;&#x648; &#x627;&#x644;&#x648;&#x635;&#x648;&#x644; &#x625;&#x644;&#x649; &#x627;&#x644;&#x635;&#x641;&#x62D;&#x629; &#x639;&#x628;&#x631; &#x645;&#x62A;&#x635;&#x641;&#x62D; &#x627;&#x62E;&#x631;.","ba-videorecorder.access-forbidden":"&#x62A;&#x645; &#x62D;&#x638;&#x631; &#x627;&#x644;&#x62F;&#x62E;&#x648;&#x644; &#x625;&#x644;&#x649; &#x627;&#x644;&#x643;&#x627;&#x645;&#x64A;&#x631;&#x627;. &#x627;&#x646;&#x642;&#x631; &#x644;&#x625;&#x639;&#x627;&#x62F;&#x629; &#x627;&#x644;&#x645;&#x62D;&#x627;&#x648;&#x644;&#x629;","ba-videorecorder.pick-covershot":"&#x627;&#x62E;&#x62A;&#x64A;&#x627;&#x631; &#x635;&#x648;&#x631;&#x629; &#x627;&#x644;&#x648;&#x627;&#x62C;&#x647;&#x629;.","ba-videorecorder.uploading":"&#x62C;&#x627;&#x631;&#x64A; &#x627;&#x644;&#x631;&#x641;&#x639;","ba-videorecorder.uploading-failed":"&#x641;&#x634;&#x644; &#x641;&#x64A; &#x627;&#x644;&#x631;&#x641;&#x639; - &#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x625;&#x639;&#x627;&#x62F;&#x629; &#x627;&#x644;&#x645;&#x62D;&#x627;&#x648;&#x644;&#x629;.","ba-videorecorder.verifying":"&#x62C;&#x627;&#x631;&#x64A; &#x627;&#x644;&#x62A;&#x62D;&#x642;&#x642;","ba-videorecorder.verifying-failed":"&#x641;&#x634;&#x644; &#x639;&#x645;&#x644;&#x64A;&#x629; &#x627;&#x644;&#x62A;&#x62D;&#x642;&#x642; - &#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x625;&#x639;&#x627;&#x62F;&#x629; &#x627;&#x644;&#x645;&#x62D;&#x627;&#x648;&#x644;&#x629;.","ba-videorecorder.rerecord-confirm":"&#x62A;&#x622;&#x643;&#x64A;&#x62F; &#x627;&#x639;&#x627;&#x62F;&#x629; &#x627;&#x644;&#x641;&#x64A;&#x62F;&#x64A;&#x648;&#x61F;","ba-videorecorder.video_file_too_large":"&#x645;&#x644;&#x641; &#x627;&#x644;&#x641;&#x64A;&#x62F;&#x64A;&#x648; &#x643;&#x628;&#x64A;&#x631; &#x62C;&#x62F;&#x627; (&#x66A; s) - &#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x625;&#x639;&#x627;&#x62F;&#x629; &#x627;&#x644;&#x645;&#x62D;&#x627;&#x648;&#x644;&#x629; &#x628;&#x627;&#x633;&#x62A;&#x62E;&#x62F;&#x627;&#x645; &#x645;&#x644;&#x641; &#x641;&#x64A;&#x62F;&#x64A;&#x648; &#x623;&#x635;&#x63A;&#x631;.","ba-videorecorder.unsupported_video_type":"&#x635;&#x64A;&#x63A;&#x629; &#x627;&#x644;&#x641;&#x64A;&#x62F;&#x64A;&#x648; &#x63A;&#x64A;&#x631; &#x645;&#x62F;&#x639;&#x648;&#x645;&#x629; :&#x66A; s - &#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x625;&#x639;&#x627;&#x62F;&#x629; &#x627;&#x644;&#x645;&#x62D;&#x627;&#x648;&#x644;&#x629;.","ba-videoplayer-controlbar.exit-fullscreen-video":"&#x627;&#x644;&#x62E;&#x631;&#x648;&#x62C; &#x645;&#x646; &#x627;&#x644;&#x634;&#x627;&#x634;&#x629; &#x627;&#x644;&#x643;&#x627;&#x645;&#x644;&#x629;","ba-videoplayer-share.share":"&#x634;&#x627;&#x631;&#x643; &#x627;&#x644;&#x641;&#x64A;&#x62F;&#x64A;&#x648;","ba-videorecorder-chooser.record-screen":"&#x633;&#x62C;&#x644; &#x627;&#x644;&#x634;&#x627;&#x634;&#x629;","ba-videoplayer-controlbar.pause-video-disabled":"&#x625;&#x64A;&#x642;&#x627;&#x641; &#x645;&#x624;&#x642;&#x62A; &#x63A;&#x64A;&#x631; &#x645;&#x62A;&#x648;&#x627;&#x641;&#x642;","ba-videorecorder-chooser.record-audio":"&#x62A;&#x633;&#x62C;&#x64A;&#x644; &#x635;&#x648;&#x62A;&#x64A;","ba-videorecorder-controlbar.stop-available-after":"&#x627;&#x644;&#x62D;&#x62F; &#x627;&#x644;&#x623;&#x62F;&#x646;&#x649; &#x644;&#x648;&#x642;&#x62A; &#x627;&#x644;&#x62A;&#x633;&#x62C;&#x64A;&#x644; &#x647;&#x648;&#x66A; d &#x62B;&#x627;&#x646;&#x64A;&#x629;","ba-videorecorder-controlbar.cancel":"&#x625;&#x644;&#x63A;&#x627;&#x621;","ba-videorecorder-controlbar.cancel-tooltip":"&#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x644;&#x625;&#x644;&#x63A;&#x627;&#x621;.","ba-videorecorder.cancel-confirm":"&#x647;&#x644; &#x62A;&#x631;&#x64A;&#x62F; &#x62D;&#x642;&#x627; &#x625;&#x644;&#x63A;&#x627;&#x621; &#x62A;&#x62D;&#x645;&#x64A;&#x644; &#x627;&#x644;&#x641;&#x64A;&#x62F;&#x64A;&#x648;&#x61F;","ba-videoplayer-adslot.elapsed-time":"&#x648;&#x642;&#x62A; &#x625;&#x644;&#x627;&#x633;&#x628;&#x62F;","ba-videoplayer-adslot.volume-button":"&#x62A;&#x639;&#x64A;&#x64A;&#x646; &#x645;&#x633;&#x62A;&#x648;&#x649; &#x627;&#x644;&#x635;&#x648;&#x62A;","ba-videoplayer-adslot.volume-mute":"&#x635;&#x648;&#x62A; &#x645;&#x646;&#x62E;&#x641;&#x636;","ba-videoplayer-adslot.volume-unmute":"&#x625;&#x644;&#x63A;&#x627;&#x621; &#x635;&#x648;&#x62A; &#x627;&#x644;&#x635;&#x648;&#x62A;","ba-videoplayer-adslot.ad-will-end-after":"&#x633;&#x64A;&#x646;&#x62A;&#x647;&#x64A; &#x627;&#x644;&#x625;&#x639;&#x644;&#x627;&#x646; &#x628;&#x639;&#x62F;&#x66A; s","ba-videoplayer-adslot.can-skip-after":"&#x62A;&#x62E;&#x637;&#x64A; &#x628;&#x639;&#x62F;&#x66A; d","ba-videoplayer-adslot.skip-ad":"&#x62A;&#x62C;&#x627;&#x647;&#x644; &#x627;&#x644;&#x627;&#x639;&#x644;&#x627;&#x646;&#x627;&#x62A;","ba-videorecorder.software-required":"&#x64A;&#x631;&#x62C;&#x649; &#x627;&#x644;&#x646;&#x642;&#x631; &#x623;&#x62F;&#x646;&#x627;&#x647; &#x644;&#x62A;&#x62B;&#x628;&#x64A;&#x62A; / &#x62A;&#x641;&#x639;&#x64A;&#x644; &#x627;&#x644;&#x645;&#x62A;&#x637;&#x644;&#x628;&#x627;&#x62A; &#x627;&#x644;&#x62A;&#x627;&#x644;&#x64A;&#x629; &#x645;&#x646; &#x623;&#x62C;&#x644; &#x627;&#x644;&#x645;&#x636;&#x64A; &#x642;&#x62F;&#x645;&#x627;.","ba-videorecorder.software-waiting":"&#x641;&#x64A; &#x627;&#x646;&#x62A;&#x638;&#x627;&#x631; &#x627;&#x644;&#x645;&#x62A;&#x637;&#x644;&#x628;&#x627;&#x62A; &#x644;&#x64A;&#x62A;&#x645; &#x62A;&#x62B;&#x628;&#x64A;&#x62A;&#x647;&#x627; / &#x62A;&#x641;&#x639;&#x64A;&#x644;&#x647;&#x627;. &#x642;&#x62F; &#x62A;&#x62D;&#x62A;&#x627;&#x62C; &#x625;&#x644;&#x649; &#x62A;&#x62D;&#x62F;&#x64A;&#x62B; &#x627;&#x644;&#x635;&#x641;&#x62D;&#x629; &#x628;&#x639;&#x62F; &#x627;&#x644;&#x627;&#x646;&#x62A;&#x647;&#x627;&#x621;.","ba-videoplayer-controlbar.close-tracks":"&#x625;&#x63A;&#x644;&#x627;&#x642; CC","ba-videoplayer-controlbar.show-tracks":"&#x639;&#x631;&#x636; CC","ba-videoplayer-tracks.upload-text-tracks":"&#x62A;&#x62D;&#x645;&#x64A;&#x644; &#x645;&#x644;&#x641;&#x627;&#x62A; &#x627;&#x644;&#x646;&#x635; &#x627;&#x644;&#x645;&#x633;&#x627;&#x631;","ba-videoplayer-tracks.select-text-track-language":"&#x644;&#x63A;&#x629; &#x627;&#x644;&#x62A;&#x631;&#x62C;&#x645;&#x629;","ba-videoplayer-tracks.info-select-locale-first":"&#x62D;&#x62F;&#x62F; &#x623;&#x648;&#x644;&#x627;&#x64B; &#x627;&#x644;&#x644;&#x63A;&#x629;","ba-videoplayer-tracks.select-text-track-file":"&#x627;&#x646;&#x642;&#x631; &#x644;&#x62A;&#x62D;&#x62F;&#x64A;&#x62F; &#x627;&#x644;&#x645;&#x644;&#x641;","ba-videoplayer-tracks.back":"&#x627;&#x644;&#x649; &#x627;&#x644;&#x62E;&#x644;&#x641;","ba-videorecorder.framerate-warning":"&#x645;&#x639;&#x62F;&#x644; &#x639;&#x631;&#x636; &#x627;&#x644;&#x641;&#x64A;&#x62F;&#x64A;&#x648; &#x645;&#x646;&#x62E;&#x641;&#x636; &#x62C;&#x62F;&#x64B;&#x627;. &#x646;&#x648;&#x635;&#x64A; &#x628;&#x625;&#x63A;&#x644;&#x627;&#x642; &#x62C;&#x645;&#x64A;&#x639; &#x627;&#x644;&#x628;&#x631;&#x627;&#x645;&#x62C; &#x627;&#x644;&#x623;&#x62E;&#x631;&#x649; &#x648;&#x639;&#x644;&#x627;&#x645;&#x627;&#x62A; &#x62A;&#x628;&#x648;&#x64A;&#x628; &#x627;&#x644;&#x645;&#x62A;&#x635;&#x641;&#x62D; &#x623;&#x648; &#x627;&#x633;&#x62A;&#x62E;&#x62F;&#x627;&#x645; &#x62C;&#x647;&#x627;&#x632; &#x643;&#x645;&#x628;&#x64A;&#x648;&#x62A;&#x631; &#x623;&#x633;&#x631;&#x639;.","ba-videorecorder.upload-error-duration":"&#x644;&#x627; &#x64A;&#x62A;&#x648;&#x627;&#x641;&#x642; &#x637;&#x648;&#x644; &#x627;&#x644;&#x641;&#x64A;&#x62F;&#x64A;&#x648; &#x627;&#x644;&#x630;&#x64A; &#x62A;&#x645; &#x62A;&#x62D;&#x645;&#x64A;&#x644;&#x647; &#x645;&#x639; &#x627;&#x644;&#x645;&#x62A;&#x637;&#x644;&#x628;&#x627;&#x62A; - &#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x625;&#x639;&#x627;&#x62F;&#x629; &#x627;&#x644;&#x645;&#x62D;&#x627;&#x648;&#x644;&#x629;.","ba-videorecorder.resolution-constraint-error":"&#x627;&#x644;&#x645;&#x644;&#x641; &#x627;&#x644;&#x630;&#x64A; &#x62D;&#x62F;&#x62F;&#x62A;&#x647; &#x644;&#x627; &#x64A;&#x62A;&#x637;&#x627;&#x628;&#x642; &#x645;&#x639; &#x627;&#x644;&#x62F;&#x642;&#x629; &#x627;&#x644;&#x645;&#x637;&#x644;&#x648;&#x628;&#x629; - &#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x625;&#x639;&#x627;&#x62F;&#x629; &#x627;&#x644;&#x645;&#x62D;&#x627;&#x648;&#x644;&#x629;.","ba-videorecorder.orientation-portrait-required":"&#x64A;&#x631;&#x62C;&#x649; &#x62A;&#x62F;&#x648;&#x64A;&#x631; &#x62C;&#x647;&#x627;&#x632;&#x643; &#x644;&#x644;&#x62A;&#x633;&#x62C;&#x64A;&#x644; &#x641;&#x64A; &#x627;&#x644;&#x648;&#x636;&#x639; &#x627;&#x644;&#x631;&#x623;&#x633;&#x64A;.","ba-videorecorder.orientation-landscape-required":"&#x64A;&#x631;&#x62C;&#x649; &#x62A;&#x62F;&#x648;&#x64A;&#x631; &#x62C;&#x647;&#x627;&#x632;&#x643; &#x644;&#x644;&#x62A;&#x633;&#x62C;&#x64A;&#x644; &#x641;&#x64A; &#x627;&#x644;&#x648;&#x636;&#x639; &#x627;&#x644;&#x623;&#x641;&#x642;&#x64A;.","ba-imageviewer-controlbar.rerecord-image":"&#x625;&#x639;&#x627;&#x62F;&#x629;&#x61F;","ba-imageviewer-controlbar.submit-image":"&#x62A;&#x624;&#x643;&#x62F;","ba-imageviewer-controlbar.fullscreen-image":"&#x623;&#x62F;&#x62E;&#x644; &#x645;&#x644;&#x621; &#x627;&#x644;&#x634;&#x627;&#x634;&#x629;","ba-imageviewer-controlbar.exit-fullscreen-image":"&#x627;&#x644;&#x62E;&#x631;&#x648;&#x62C; &#x645;&#x646; &#x627;&#x644;&#x634;&#x627;&#x634;&#x629; &#x627;&#x644;&#x643;&#x627;&#x645;&#x644;&#x629;","ba-imageviewer.image-error":"&#x644;&#x642;&#x62F; &#x62D;&#x62F;&#x62B; &#x62E;&#x637;&#x623;&#x60C; &#x631;&#x62C;&#x627;&#x621; &#x623;&#x639;&#x62F; &#x627;&#x644;&#x645;&#x62D;&#x627;&#x648;&#x644;&#x629; &#x644;&#x627;&#x62D;&#x642;&#x627;. &#x627;&#x646;&#x642;&#x631; &#x644;&#x625;&#x639;&#x627;&#x62F;&#x629; &#x627;&#x644;&#x645;&#x62D;&#x627;&#x648;&#x644;&#x629;.","ba-imagecapture-chooser.image-capture":"&#x627;&#x644;&#x62A;&#x642;&#x627;&#x637; &#x627;&#x644;&#x635;&#x648;&#x631;&#x629;","ba-imagecapture-chooser.upload-image":"&#x62A;&#x62D;&#x645;&#x64A;&#x644; &#x627;&#x644;&#x635;&#x648;&#x631;","ba-imagecapture-controlbar.settings":"&#x625;&#x639;&#x62F;&#x627;&#x62F;&#x627;&#x62A;","ba-imagecapture-controlbar.camerahealthy":"&#x627;&#x644;&#x625;&#x636;&#x627;&#x621;&#x629; &#x62C;&#x64A;&#x62F;&#x629;","ba-imagecapture-controlbar.cameraunhealthy":"&#x627;&#x644;&#x625;&#x636;&#x627;&#x621;&#x629; &#x644;&#x64A;&#x633;&#x62A; &#x627;&#x644;&#x623;&#x645;&#x62B;&#x644;","ba-imagecapture-controlbar.record":"&#x623;&#x633;&#x631;","ba-imagecapture-controlbar.record-tooltip":"&#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x627;&#x644;&#x62A;&#x642;&#x627;&#x637;.","ba-imagecapture-controlbar.rerecord":"&#x641;&#x639;&#x644; &#x62B;&#x627;&#x646;&#x64A;&#x629;","ba-imagecapture-controlbar.rerecord-tooltip":"&#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x644;&#x625;&#x639;&#x627;&#x62F;&#x629;.","ba-imagecapture-controlbar.cancel":"&#x625;&#x644;&#x63A;&#x627;&#x621;","ba-imagecapture-controlbar.cancel-tooltip":"&#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x644;&#x625;&#x644;&#x63A;&#x627;&#x621;.","ba-audioplayer-controlbar.audio-progress":"&#x62A;&#x642;&#x62F;&#x645;","ba-audioplayer-controlbar.rerecord-audio":"&#x625;&#x639;&#x627;&#x62F;&#x629;&#x61F;","ba-audioplayer-controlbar.submit-audio":"&#x62A;&#x624;&#x643;&#x62F;","ba-audioplayer-controlbar.play-audio":"&#x644;&#x639;&#x628;","ba-audioplayer-controlbar.pause-audio":"&#x648;&#x642;&#x641;&#x629;","ba-audioplayer-controlbar.pause-audio-disabled":"&#x648;&#x642;&#x641;&#x629; &#x63A;&#x64A;&#x631; &#x645;&#x639;&#x62A;&#x645;&#x62F;","ba-audioplayer-controlbar.elapsed-time":"&#x627;&#x644;&#x648;&#x642;&#x62A; Elasped","ba-audioplayer-controlbar.total-time":"&#x627;&#x644;&#x637;&#x648;&#x644; &#x627;&#x644;&#x643;&#x644;&#x64A;","ba-audioplayer-controlbar.volume-button":"&#x636;&#x628;&#x637; &#x627;&#x644;&#x62D;&#x62C;&#x645;","ba-audioplayer-controlbar.volume-mute":"&#x635;&#x648;&#x62A; &#x645;&#x646;&#x62E;&#x641;&#x636;","ba-audioplayer-controlbar.volume-unmute":"&#x635;&#x648;&#x62A; &#x63A;&#x64A;&#x631; &#x635;&#x648;&#x62A;&#x64A;","ba-audioplayer-loader.tooltip":"&#x62C;&#x627;&#x631; &#x627;&#x644;&#x62A;&#x62D;&#x645;&#x64A;&#x644;...","ba-audioplayer.audio-error":"&#x644;&#x642;&#x62F; &#x62D;&#x62F;&#x62B; &#x62E;&#x637;&#x623;&#x60C; &#x631;&#x62C;&#x627;&#x621; &#x623;&#x639;&#x62F; &#x627;&#x644;&#x645;&#x62D;&#x627;&#x648;&#x644;&#x629; &#x644;&#x627;&#x62D;&#x642;&#x627;. &#x627;&#x646;&#x642;&#x631; &#x644;&#x625;&#x639;&#x627;&#x62F;&#x629; &#x627;&#x644;&#x645;&#x62D;&#x627;&#x648;&#x644;&#x629;.","ba-audiorecorder-chooser.record-audio":"&#x62A;&#x633;&#x62C;&#x64A;&#x644; &#x635;&#x648;&#x62A;&#x64A;","ba-audiorecorder-chooser.upload-audio":"&#x62A;&#x62D;&#x645;&#x64A;&#x644; &#x627;&#x644;&#x635;&#x648;&#x62A;","ba-audiorecorder-controlbar.settings":"&#x625;&#x639;&#x62F;&#x627;&#x62F;&#x627;&#x62A;","ba-audiorecorder-controlbar.microphonehealthy":"&#x627;&#x644;&#x635;&#x648;&#x62A; &#x62C;&#x64A;&#x62F;","ba-audiorecorder-controlbar.microphoneunhealthy":"&#x644;&#x627; &#x64A;&#x645;&#x643;&#x646; &#x627;&#x644;&#x62A;&#x642;&#x627;&#x637; &#x623;&#x64A; &#x635;&#x648;&#x62A;","ba-audiorecorder-controlbar.record":"&#x633;&#x62C;&#x644;","ba-audiorecorder-controlbar.record-tooltip":"&#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x644;&#x62A;&#x633;&#x62C;&#x64A;&#x644;.","ba-audiorecorder-controlbar.rerecord":"&#x641;&#x639;&#x644; &#x62B;&#x627;&#x646;&#x64A;&#x629;","ba-audiorecorder-controlbar.rerecord-tooltip":"&#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x644;&#x625;&#x639;&#x627;&#x62F;&#x629;.","ba-audiorecorder-controlbar.stop":"&#x62A;&#x648;&#x642;&#x641;","ba-audiorecorder-controlbar.stop-tooltip":"&#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x644;&#x62A;&#x648;&#x642;&#x641;.","ba-audiorecorder-controlbar.stop-available-after":"&#x627;&#x644;&#x62D;&#x62F; &#x627;&#x644;&#x623;&#x62F;&#x646;&#x649; &#x644;&#x645;&#x62F;&#x629; &#x627;&#x644;&#x62A;&#x633;&#x62C;&#x64A;&#x644; &#x647;&#x648;&#x66A; d &#x62B;&#x627;&#x646;&#x64A;&#x629;","ba-audiorecorder-controlbar.cancel":"&#x625;&#x644;&#x63A;&#x627;&#x621;","ba-audiorecorder-controlbar.cancel-tooltip":"&#x627;&#x646;&#x642;&#x631; &#x647;&#x646;&#x627; &#x644;&#x644;&#x625;&#x644;&#x63A;&#x627;&#x621;."},"language:az":{"ba-videoplayer-playbutton.tooltip":"Videoya baxmaq &#xFC;&#xE7;&#xFC;n bas&#x131;n.","ba-videoplayer-playbutton.rerecord":"Yenid&#x259;n yazmaq","ba-videoplayer-playbutton.submit-video":"Videonu t&#x259;sdiq et","ba-videoplayer-loader.tooltip":"Video y&#xFC;kl&#x259;nir ...","ba-videoplayer-controlbar.change-resolution":"G&#xF6;r&#xFC;nt&#xFC;n&#xFC;n keyfiyy&#x259;tini d&#x259;yi&#x15F;","ba-videoplayer-controlbar.video-progress":"Videonun davamiyy&#x259;ti","ba-videoplayer-controlbar.rerecord-video":"Video yenid&#x259;n yaz&#x131;ls&#x131;n?","ba-videoplayer-controlbar.submit-video":"Videonu t&#x259;sdiq et","ba-videoplayer-controlbar.play-video":"Videonu g&#xF6;st&#x259;r","ba-videoplayer-controlbar.pause-video":"Videonu dayand&#x131;r","ba-videoplayer-controlbar.elapsed-time":"G&#xF6;st&#x259;rilmi&#x15F; vaxt","ba-videoplayer-controlbar.total-time":"Videonu tam uzunlu&#x11F;u","ba-videoplayer-controlbar.fullscreen-video":"Tam ekran edin","ba-videoplayer-controlbar.volume-button":"S&#x259;s d&#xFC;ym&#x259;si","ba-videoplayer-controlbar.volume-mute":"S&#x259;ssiz et","ba-videoplayer-controlbar.volume-unmute":"S&#x259;sli et","ba-videoplayer.video-error":"X&#x259;ta ba&#x15F; vermi&#x15F;dir. Xahi&#x15F; edirik bir az sonra yenid&#x259;n c&#x259;hd edin. Yenid&#x259;n yoxlamaq &#xFC;&#xE7;&#xFC;n bas&#x131;n.","ba-videorecorder-chooser.record-video":"Videonu yaz","ba-videorecorder-chooser.upload-video":"Videonu y&#xFC;kl&#x259;","ba-videorecorder-controlbar.settings":"Ayarlar","ba-videorecorder-controlbar.camerahealthy":"&#x130;&#x15F;&#x131;qland&#x131;rma yax&#x15F;&#x131;d&#x131;r","ba-videorecorder-controlbar.cameraunhealthy":"&#x130;&#x15F;&#x131;qland&#x131;rma optimal deyil","ba-videorecorder-controlbar.microphonehealthy":"S&#x259;s yax&#x15F;&#x131; e&#x15F;idilir","ba-videorecorder-controlbar.microphoneunhealthy":"Mikrofonun s&#x259;si e&#x15F;idilmir","ba-videorecorder-controlbar.record":"Yazmaq","ba-videorecorder-controlbar.record-tooltip":"Videonu yazmaq &#xFC;&#xE7;&#xFC;n bas&#x131;n","ba-videorecorder-controlbar.rerecord":"Videonu yenid&#x259;n yaz","ba-videorecorder-controlbar.rerecord-tooltip":"Yenid&#x259;n yazmaq &#xFC;&#xE7;&#xFC;n bas&#x131;n.","ba-videorecorder-controlbar.upload-covershot":"Y&#xFC;kl&#x259;","ba-videorecorder-controlbar.upload-covershot-tooltip":"&#xDC;zl&#xFC;k &#x15F;&#x259;kli y&#xFC;kl&#x259;m&#x259;k &#xFC;&#xE7;&#xFC;n bas&#x131;n","ba-videorecorder-controlbar.stop":"Dayand&#x131;rmaq","ba-videorecorder-controlbar.stop-tooltip":"Dayand&#x131;rmaq &#xFC;&#xE7;&#xFC;n bas&#x131;n.","ba-videorecorder-controlbar.skip":"N&#x259;z&#x259;r&#x259; alma","ba-videorecorder-controlbar.skip-tooltip":"N&#x259;z&#x259;r&#x259; almadan ke&#xE7;m&#x259;k &#xFC;&#xE7;&#xFC;n bas&#x131;n.","ba-videorecorder.recorder-error":"X&#x259;ta ba&#x15F; verdi. Xahi&#x15F; edirik bir az sonra yenid&#x259;n c&#x259;hd edin. Yenid&#x259;n yoxlamaq &#xFC;&#xE7;&#xFC;n bas&#x131;n.","ba-videorecorder.attach-error":"Kamera g&#xF6;r&#xFC;nt&#xFC;s&#xFC;n&#xFC; &#x259;ld&#x259; etm&#x259;k m&#xFC;mk&#xFC;n olmad&#x131;. Sizin istifad&#x259; etdiyiniz cihazdan v&#x259; brauzerd&#x259;n as&#x131;l&#x131; olaraq siz ya Flash proqram&#x131; y&#xFC;kl&#x259;nm&#x259;li v&#x259; ya veb s&#x259;hif&#x259;y&#x259; SSL il&#x259; daxil olmal&#x131;s&#x131;z.","ba-videorecorder.access-forbidden":"Kamera g&#xF6;r&#xFC;nt&#xFC;s&#xFC;n&#x259; icaz&#x259; verilm&#x259;di. Yenid&#x259;n yoxlamaq &#xFC;&#xE7;&#xFC;n bas&#x131;n.","ba-videorecorder.pick-covershot":"&#xDC;zl&#xFC;k &#x15F;&#x259;klini se&#xE7;in.","ba-videorecorder.uploading":"Y&#xFC;kl&#x259;nir","ba-videorecorder.uploading-failed":"Y&#xFC;kl&#x259;nm&#x259; zaman&#x131; x&#x259;ta ba&#x15F; verdi, t&#x259;krar etm&#x259;k &#xFC;&#xE7;&#xFC;n buraya bas&#x131;n.","ba-videorecorder.verifying":"Yoxlama","ba-videorecorder.verifying-failed":"Yoxlama u&#x11F;ursuzluqla bitdi - t&#x259;krar &#xFC;&#xE7;&#xFC;n buraya bas&#x131;n.","ba-videorecorder.rerecord-confirm":"Siz, h&#x259;qiq&#x259;t&#x259;n, videonu yenid&#x259;n yazmaq ist&#x259;yirsiniz?","ba-videorecorder.video_file_too_large":"Sizin video fayl&#x131;n h&#x259;cmi (%s) &#xE7;ox b&#xF6;y&#xFC;kd&#xFC;r - ki&#xE7;ik h&#x259;cmli video fayl il&#x259; yenid&#x259;n c&#x259;hd &#xFC;&#xE7;&#xFC;n buraya bas&#x131;n.","ba-videorecorder.unsupported_video_type":"Y&#xFC;kl&#x259;yin: %s - yenid&#x259;n yoxlamaq &#xFC;&#xE7;&#xFC;n buraya bas&#x131;n.","ba-videoplayer-controlbar.exit-fullscreen-video":"Tam ekran rejimind&#x259;n &#xE7;&#x131;x&#x131;&#x15F;","ba-videoplayer-share.share":"Videonu payla&#x15F;","ba-videorecorder-chooser.record-screen":"S&#x259;s ekran&#x131;","ba-videoplayer-controlbar.pause-video-disabled":"Pauza d&#x259;st&#x259;kl&#x259;nmir","ba-videorecorder-chooser.record-audio":"Record Audio","ba-videorecorder-controlbar.stop-available-after":"Minimum qeydiyyatdan ke&#xE7;m&#x259; m&#xFC;dd&#x259;ti %d saniy&#x259;dir","ba-videorecorder-controlbar.cancel":"L&#x259;&#x11F;v et","ba-videorecorder-controlbar.cancel-tooltip":"L&#x259;&#x11F;v etm&#x259;k &#xFC;&#xE7;&#xFC;n buraya bas&#x131;n.","ba-videorecorder.cancel-confirm":"Video y&#xFC;kl&#x259;m&#x259;yini h&#x259;qiq&#x259;t&#x259;n l&#x259;&#x11F;v etm&#x259;k ist&#x259;yirsiniz?","ba-videoplayer-adslot.elapsed-time":"Elasped vaxt","ba-videoplayer-adslot.volume-button":"H&#x259;cmi se&#xE7;in","ba-videoplayer-adslot.volume-mute":"S&#x259;s s&#x259;si","ba-videoplayer-adslot.volume-unmute":"S&#x259;sin s&#x259;sl&#x259;ndirilm&#x259;si","ba-videoplayer-adslot.ad-will-end-after":"Reklam %s sonra sona &#xE7;atacaq","ba-videoplayer-adslot.can-skip-after":" %D sonra atlay&#x131;n","ba-videoplayer-adslot.skip-ad":"Reklam&#x131; atlay&#x131;n","ba-videorecorder.software-required":"Davam etm&#x259;k &#xFC;&#xE7;&#xFC;n a&#x15F;a&#x11F;&#x131;dak&#x131; t&#x259;l&#x259;bl&#x259;ri qurmaq / aktivl&#x259;&#x15F;dirm&#x259;k &#xFC;&#xE7;&#xFC;n a&#x15F;a&#x11F;&#x131;ya bas&#x131;n.","ba-videorecorder.software-waiting":"Qurulacaq / aktivl&#x259;&#x15F;diril&#x259;c&#x259;k t&#x259;l&#x259;bl&#x259;ri g&#xF6;zl&#x259;yir&#x259;m. Tamamland&#x131;qdan sonra s&#x259;hif&#x259;ni yenil&#x259;m&#x259;k laz&#x131;md&#x131;r.","ba-videoplayer-controlbar.close-tracks":"CC&#x27;yi ba&#x11F;lay&#x131;n","ba-videoplayer-controlbar.show-tracks":"CC g&#xF6;st&#x259;r","ba-videoplayer-tracks.upload-text-tracks":"Track m&#x259;tn fayllar&#x131;n&#x131; y&#xFC;kl&#x259;yin","ba-videoplayer-tracks.select-text-track-language":"Altyaz&#x131; dili","ba-videoplayer-tracks.info-select-locale-first":"&#x18F;vv&#x259;lc&#x259;d&#x259;n yerli se&#xE7;in","ba-videoplayer-tracks.select-text-track-file":"Fayl se&#xE7;m&#x259;k &#xFC;&#xE7;&#xFC;n bas&#x131;n","ba-videoplayer-tracks.back":"geri","ba-videorecorder.framerate-warning":"Video &#xE7;&#x259;r&#xE7;iv&#x259;si d&#x259;r&#x259;c&#x259;si &#xE7;ox a&#x15F;a&#x11F;&#x131;d&#x131;r. B&#xFC;t&#xFC;n dig&#x259;r proqramlar&#x131; v&#x259; brauzer ni&#x15F;anlar&#x131;n&#x131; ba&#x11F;lamaq v&#x259; ya daha s&#xFC;r&#x259;tli bir komp&#xFC;ter istifad&#x259; etm&#x259;k &#xFC;&#xE7;&#xFC;n g&#x259;lir.","ba-videorecorder.upload-error-duration":"Y&#xFC;kl&#x259;nmi&#x15F; videonun uzunlu&#x11F;u t&#x259;l&#x259;bl&#x259;r&#x259; cavab vermir - yenid&#x259;n c&#x259;hd etm&#x259;k &#xFC;&#xE7;&#xFC;n buraya vurun.","ba-videorecorder.resolution-constraint-error":"Se&#xE7;diyiniz fayl laz&#x131;mi q&#x259;tnam&#x259;y&#x259; uy&#x11F;un deyil - yenid&#x259;n c&#x259;hd etm&#x259;k &#xFC;&#xE7;&#xFC;n buraya vurun.","ba-videorecorder.orientation-portrait-required":"Portret rejimind&#x259; qeyd etm&#x259;k &#xFC;&#xE7;&#xFC;n cihaz&#x131;n&#x131;z&#x131; d&#xF6;nd&#x259;rin.","ba-videorecorder.orientation-landscape-required":"Land&#x15F;aft rejimind&#x259; qeyd etm&#x259;k &#xFC;&#xE7;&#xFC;n cihaz&#x131;n&#x131;z&#x131; d&#xF6;nd&#x259;rin.","ba-imageviewer-controlbar.rerecord-image":"Redo?","ba-imageviewer-controlbar.submit-image":"T&#x259;sdiq edin","ba-imageviewer-controlbar.fullscreen-image":"Tam ekrana daxil olun","ba-imageviewer-controlbar.exit-fullscreen-image":"Tam ekrandan &#xE7;&#x131;x&#x131;n","ba-imageviewer.image-error":"X&#x259;ta ba&#x15F; verdi. Xahi&#x15F; edirik bir az sonra yenid&#x259;n c&#x259;hd edin. Yenid&#x259;n c&#x259;hd etm&#x259;k &#xFC;&#xE7;&#xFC;n bas&#x131;n.","ba-imagecapture-chooser.image-capture":"&#x15E;&#x259;kil &#xE7;&#x259;kin","ba-imagecapture-chooser.upload-image":"&#x15E;&#x259;kil y&#xFC;kl&#x259;yin","ba-imagecapture-controlbar.settings":"Ayarlar","ba-imagecapture-controlbar.camerahealthy":"&#x130;&#x15F;&#x131;qland&#x131;rma yax&#x15F;&#x131;d&#x131;r","ba-imagecapture-controlbar.cameraunhealthy":"&#x130;&#x15F;&#x131;qland&#x131;rma optimal deyil","ba-imagecapture-controlbar.record":"Capture","ba-imagecapture-controlbar.record-tooltip":"Tutmaq &#xFC;&#xE7;&#xFC;n bura vurun.","ba-imagecapture-controlbar.rerecord":"Redo","ba-imagecapture-controlbar.rerecord-tooltip":"Yenid&#x259;n yerin&#x259; yetirm&#x259;k &#xFC;&#xE7;&#xFC;n buraya bas&#x131;n.","ba-imagecapture-controlbar.cancel":"L&#x259;&#x11F;v et","ba-imagecapture-controlbar.cancel-tooltip":"L&#x259;&#x11F;v etm&#x259;k &#xFC;&#xE7;&#xFC;n buraya bas&#x131;n.","ba-audioplayer-controlbar.audio-progress":"T&#x259;r&#x259;qqi","ba-audioplayer-controlbar.rerecord-audio":"Redo?","ba-audioplayer-controlbar.submit-audio":"T&#x259;sdiq edin","ba-audioplayer-controlbar.play-audio":"Oynamaq","ba-audioplayer-controlbar.pause-audio":"Pauza","ba-audioplayer-controlbar.pause-audio-disabled":"Pauza d&#x259;st&#x259;kl&#x259;nmir","ba-audioplayer-controlbar.elapsed-time":"Elasped vaxt","ba-audioplayer-controlbar.total-time":"&#xDC;mumi uzunlu&#x11F;u","ba-audioplayer-controlbar.volume-button":"H&#x259;cmi se&#xE7;in","ba-audioplayer-controlbar.volume-mute":"S&#x259;s s&#x259;si","ba-audioplayer-controlbar.volume-unmute":"S&#x259;sin s&#x259;sl&#x259;ndirilm&#x259;si","ba-audioplayer-loader.tooltip":"Y&#xFC;kl&#x259;nir ...","ba-audioplayer.audio-error":"X&#x259;ta ba&#x15F; verdi. Xahi&#x15F; edirik bir az sonra yenid&#x259;n c&#x259;hd edin. Yenid&#x259;n c&#x259;hd etm&#x259;k &#xFC;&#xE7;&#xFC;n bas&#x131;n.","ba-audiorecorder-chooser.record-audio":"Record Audio","ba-audiorecorder-chooser.upload-audio":"Audio y&#xFC;kl&#x259;","ba-audiorecorder-controlbar.settings":"Ayarlar","ba-audiorecorder-controlbar.microphonehealthy":"S&#x259;s yax&#x15F;&#x131;d&#x131;r","ba-audiorecorder-controlbar.microphoneunhealthy":"He&#xE7; bir s&#x259;s ala bilmir","ba-audiorecorder-controlbar.record":"Record","ba-audiorecorder-controlbar.record-tooltip":"Qeyd etm&#x259;k &#xFC;&#xE7;&#xFC;n buraya vurun.","ba-audiorecorder-controlbar.rerecord":"Redo","ba-audiorecorder-controlbar.rerecord-tooltip":"Yenid&#x259;n yerin&#x259; yetirm&#x259;k &#xFC;&#xE7;&#xFC;n buraya bas&#x131;n.","ba-audiorecorder-controlbar.stop":"Dur","ba-audiorecorder-controlbar.stop-tooltip":"Durmaq &#xFC;&#xE7;&#xFC;n bura vurun.","ba-audiorecorder-controlbar.stop-available-after":"Minimum qeydiyyatdan ke&#xE7;m&#x259; m&#xFC;dd&#x259;ti %d saniy&#x259;dir","ba-audiorecorder-controlbar.cancel":"L&#x259;&#x11F;v et","ba-audiorecorder-controlbar.cancel-tooltip":"L&#x259;&#x11F;v etm&#x259;k &#xFC;&#xE7;&#xFC;n buraya bas&#x131;n."},"language:bg":{"ba-videoplayer-playbutton.tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435;, &#x437;&#x430; &#x434;&#x430; &#x438;&#x433;&#x440;&#x430;&#x44F;&#x442; &#x43D;&#x430; &#x432;&#x438;&#x434;&#x435;&#x43E;.","ba-videoplayer-playbutton.rerecord":"&#x440;&#x435;&#x43C;&#x43E;&#x43D;&#x442;&#x438;&#x440;&#x430;&#x43C;","ba-videoplayer-playbutton.submit-video":"&#x41F;&#x43E;&#x442;&#x432;&#x44A;&#x440;&#x436;&#x434;&#x430;&#x432;&#x430;&#x43D;&#x435; &#x43D;&#x430; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videoplayer-loader.tooltip":"&#x417;&#x430;&#x440;&#x435;&#x436;&#x434;&#x430;&#x43D;&#x435; &#x43D;&#x430; &#x432;&#x438;&#x434;&#x435;&#x43E; ...","ba-videoplayer-controlbar.change-resolution":"&#x41F;&#x440;&#x43E;&#x43C;&#x44F;&#x43D;&#x430; &#x43D;&#x430; &#x440;&#x430;&#x437;&#x434;&#x435;&#x43B;&#x438;&#x442;&#x435;&#x43B;&#x43D;&#x430;&#x442;&#x430; &#x441;&#x43F;&#x43E;&#x441;&#x43E;&#x431;&#x43D;&#x43E;&#x441;&#x442;","ba-videoplayer-controlbar.video-progress":"&#x43F;&#x440;&#x43E;&#x433;&#x440;&#x435;&#x441; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videoplayer-controlbar.rerecord-video":"&#x412;&#x44A;&#x437;&#x441;&#x442;&#x430;&#x43D;&#x43E;&#x432;&#x44F;&#x432;&#x430;&#x43D;&#x435; &#x43D;&#x430; &#x432;&#x438;&#x434;&#x435;&#x43E;?","ba-videoplayer-controlbar.submit-video":"&#x41F;&#x43E;&#x442;&#x432;&#x44A;&#x440;&#x436;&#x434;&#x430;&#x432;&#x430;&#x43D;&#x435; &#x43D;&#x430; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videoplayer-controlbar.play-video":"&#x432;&#x44A;&#x437;&#x43F;&#x440;&#x43E;&#x438;&#x437;&#x432;&#x435;&#x436;&#x434;&#x430;&#x43D;&#x435; &#x43D;&#x430; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videoplayer-controlbar.pause-video":"Pause &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videoplayer-controlbar.elapsed-time":"Elasped &#x432;&#x440;&#x435;&#x43C;&#x435;","ba-videoplayer-controlbar.total-time":"&#x41E;&#x431;&#x449;&#x430; &#x434;&#x44A;&#x43B;&#x436;&#x438;&#x43D;&#x430; &#x43D;&#x430; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videoplayer-controlbar.fullscreen-video":"&#x412;&#x44A;&#x432;&#x435;&#x434;&#x435;&#x442;&#x435; &#x446;&#x44F;&#x43B; &#x435;&#x43A;&#x440;&#x430;&#x43D;","ba-videoplayer-controlbar.volume-button":"Set &#x43E;&#x431;&#x435;&#x43C;","ba-videoplayer-controlbar.volume-mute":"Mute &#x437;&#x432;&#x443;&#x43A;","ba-videoplayer-controlbar.volume-unmute":"&#x438;&#x437;&#x43A;&#x43B;&#x44E;&#x447;&#x432;&#x430;&#x43D;&#x435; &#x43D;&#x430; &#x437;&#x432;&#x443;&#x43A;&#x430;","ba-videoplayer.video-error":"&#x412;&#x44A;&#x437;&#x43D;&#x438;&#x43A;&#x43D;&#x430; &#x433;&#x440;&#x435;&#x448;&#x43A;&#x430;. &#x41C;&#x43E;&#x43B;&#x44F;, &#x43E;&#x43F;&#x438;&#x442;&#x430;&#x439;&#x442;&#x435; &#x43E;&#x442;&#x43D;&#x43E;&#x432;&#x43E; &#x43F;&#x43E;-&#x43A;&#x44A;&#x441;&#x43D;&#x43E;. &#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435;, &#x437;&#x430; &#x434;&#x430; &#x43E;&#x43F;&#x438;&#x442;&#x430;&#x442;&#x435; &#x43E;&#x442;&#x43D;&#x43E;&#x432;&#x43E;.","ba-videorecorder-chooser.record-video":"&#x417;&#x430;&#x43F;&#x438;&#x448;&#x435;&#x442;&#x435; &#x432;&#x430;&#x448;&#x438;&#x442;&#x435; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videorecorder-chooser.upload-video":"&#x41A;&#x430;&#x447;&#x438; &#x412;&#x438;&#x434;&#x435;&#x43E;","ba-videorecorder-controlbar.settings":"&#x41D;&#x430;&#x441;&#x442;&#x440;&#x43E;&#x439;&#x43A;&#x438;","ba-videorecorder-controlbar.camerahealthy":"&#x41E;&#x441;&#x432;&#x435;&#x442;&#x43B;&#x435;&#x43D;&#x438;&#x435;&#x442;&#x43E; &#x435; &#x434;&#x43E;&#x431;&#x440;&#x43E;","ba-videorecorder-controlbar.cameraunhealthy":"&#x41E;&#x441;&#x432;&#x435;&#x442;&#x43B;&#x435;&#x43D;&#x438;&#x435; &#x43D;&#x435; &#x435; &#x43E;&#x43F;&#x442;&#x438;&#x43C;&#x430;&#x43B;&#x43D;&#x43E;","ba-videorecorder-controlbar.microphonehealthy":"&#x417;&#x432;&#x443;&#x43A;&#x44A;&#x442; &#x435; &#x434;&#x43E;&#x431;&#x44A;&#x440;","ba-videorecorder-controlbar.microphoneunhealthy":"&#x41D;&#x435; &#x43C;&#x43E;&#x436;&#x435; &#x434;&#x430; &#x432;&#x437;&#x435;&#x43C;&#x435;&#x442;&#x435; &#x432;&#x441;&#x435;&#x43A;&#x438; &#x437;&#x432;&#x443;&#x43A;","ba-videorecorder-controlbar.record":"&#x440;&#x435;&#x43A;&#x43E;&#x440;&#x434;","ba-videorecorder-controlbar.record-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x437;&#x430;&#x43F;&#x438;&#x448;&#x435;&#x442;&#x435;.","ba-videorecorder-controlbar.rerecord":"&#x440;&#x435;&#x43C;&#x43E;&#x43D;&#x442;&#x438;&#x440;&#x430;&#x43C;","ba-videorecorder-controlbar.rerecord-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x440;&#x435;&#x43C;&#x43E;&#x43D;&#x442;&#x438;&#x440;&#x430;&#x43C;.","ba-videorecorder-controlbar.upload-covershot":"&#x41A;&#x430;&#x447;&#x438;","ba-videorecorder-controlbar.upload-covershot-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x43A;&#x430;&#x447;&#x438;&#x442;&#x435; &#x43F;&#x43E;&#x442;&#x440;&#x435;&#x431;&#x438;&#x442;&#x435;&#x43B;&#x441;&#x43A;&#x438; &#x43F;&#x43E;&#x43A;&#x440;&#x438;&#x442;&#x438;&#x435; &#x443;&#x434;&#x430;&#x440;","ba-videorecorder-controlbar.stop":"&#x421;&#x43F;&#x440;&#x438; &#x441;&#x435;","ba-videorecorder-controlbar.stop-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x441;&#x43F;&#x440;&#x435;.","ba-videorecorder-controlbar.skip":"&#x43F;&#x43E;&#x434;&#x441;&#x43A;&#x430;&#x447;&#x430;&#x43C;","ba-videorecorder-controlbar.skip-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x43F;&#x440;&#x43E;&#x43F;&#x443;&#x441;&#x43D;&#x435;&#x442;&#x435;.","ba-videorecorder.recorder-error":"&#x412;&#x44A;&#x437;&#x43D;&#x438;&#x43A;&#x43D;&#x430; &#x433;&#x440;&#x435;&#x448;&#x43A;&#x430;. &#x41C;&#x43E;&#x43B;&#x44F;, &#x43E;&#x43F;&#x438;&#x442;&#x430;&#x439;&#x442;&#x435; &#x43E;&#x442;&#x43D;&#x43E;&#x432;&#x43E; &#x43F;&#x43E;-&#x43A;&#x44A;&#x441;&#x43D;&#x43E;. &#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435;, &#x437;&#x430; &#x434;&#x430; &#x43E;&#x43F;&#x438;&#x442;&#x430;&#x442;&#x435; &#x43E;&#x442;&#x43D;&#x43E;&#x432;&#x43E;.","ba-videorecorder.attach-error":"&#x41D;&#x438;&#x435; &#x43D;&#x435; &#x43C;&#x43E;&#x436;&#x435; &#x434;&#x430; &#x43F;&#x43E;&#x43B;&#x443;&#x447;&#x438;&#x442;&#x435; &#x434;&#x43E;&#x441;&#x442;&#x44A;&#x43F; &#x434;&#x43E; &#x438;&#x43D;&#x442;&#x435;&#x440;&#x444;&#x435;&#x439;&#x441;&#x430; &#x43D;&#x430; &#x43A;&#x430;&#x43C;&#x435;&#x440;&#x430;&#x442;&#x430;. &#x412; &#x437;&#x430;&#x432;&#x438;&#x441;&#x438;&#x43C;&#x43E;&#x441;&#x442; &#x43E;&#x442; &#x443;&#x441;&#x442;&#x440;&#x43E;&#x439;&#x441;&#x442;&#x432;&#x43E;&#x442;&#x43E; &#x438; &#x431;&#x440;&#x430;&#x443;&#x437;&#x44A;&#x440;&#x430;, &#x43C;&#x43E;&#x436;&#x435; &#x434;&#x430; &#x441;&#x435; &#x43D;&#x430;&#x43B;&#x43E;&#x436;&#x438; &#x434;&#x430; &#x438;&#x43D;&#x441;&#x442;&#x430;&#x43B;&#x438;&#x440;&#x430;&#x442;&#x435; Flash &#x438;&#x43B;&#x438; &#x434;&#x43E;&#x441;&#x442;&#x44A;&#x43F; &#x434;&#x43E; &#x441;&#x442;&#x440;&#x430;&#x43D;&#x438;&#x446;&#x430;&#x442;&#x430; &#x447;&#x440;&#x435;&#x437; SSL.","ba-videorecorder.access-forbidden":"&#x414;&#x43E;&#x441;&#x442;&#x44A;&#x43F; &#x434;&#x43E; &#x43A;&#x430;&#x43C;&#x435;&#x440;&#x430;&#x442;&#x430; &#x435; &#x437;&#x430;&#x431;&#x440;&#x430;&#x43D;&#x435;&#x43D;&#x43E;. &#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435;, &#x437;&#x430; &#x434;&#x430; &#x43E;&#x43F;&#x438;&#x442;&#x430;&#x442;&#x435; &#x43E;&#x442;&#x43D;&#x43E;&#x432;&#x43E;.","ba-videorecorder.pick-covershot":"&#x418;&#x437;&#x431;&#x435;&#x440;&#x435;&#x442;&#x435; covershot.","ba-videorecorder.uploading":"&#x41A;&#x430;&#x447;&#x432;&#x430;&#x43D;&#x435;","ba-videorecorder.uploading-failed":"&#x41A;&#x430;&#x447;&#x432;&#x430; &#x441;&#x435; &#x43F;&#x440;&#x43E;&#x432;&#x430;&#x43B;&#x438; - &#x43A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x43E;&#x43F;&#x438;&#x442;&#x430;&#x442;&#x435; &#x43E;&#x442;&#x43D;&#x43E;&#x432;&#x43E;.","ba-videorecorder.verifying":"&#x41F;&#x440;&#x43E;&#x432;&#x435;&#x440;&#x43A;&#x430;","ba-videorecorder.verifying-failed":"&#x423;&#x434;&#x43E;&#x441;&#x442;&#x43E;&#x432;&#x435;&#x440;&#x44F;&#x432;&#x430;&#x43D;&#x435;&#x442;&#x43E; &#x441;&#x435; &#x43F;&#x440;&#x43E;&#x432;&#x430;&#x43B;&#x438; - &#x43A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x43E;&#x43F;&#x438;&#x442;&#x430;&#x442;&#x435; &#x43E;&#x442;&#x43D;&#x43E;&#x432;&#x43E;.","ba-videorecorder.rerecord-confirm":"&#x41D;&#x430;&#x438;&#x441;&#x442;&#x438;&#x43D;&#x430; &#x43B;&#x438; &#x438;&#x441;&#x43A;&#x430;&#x442;&#x435; &#x434;&#x430; &#x440;&#x435;&#x43C;&#x43E;&#x43D;&#x442;&#x438;&#x440;&#x430;&#x43C; &#x432;&#x438;&#x434;&#x435;&#x43E; &#x441;&#x438;?","ba-videorecorder.video_file_too_large":"&#x412;&#x430;&#x448;&#x438;&#x44F;&#x442; &#x432;&#x438;&#x434;&#x435;&#x43E; &#x444;&#x430;&#x439;&#x43B; &#x435; &#x442;&#x432;&#x44A;&#x440;&#x434;&#x435; &#x433;&#x43E;&#x43B;&#x44F;&#x43C; (%s) - &#x43A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x43E;&#x43F;&#x438;&#x442;&#x430;&#x442;&#x435; &#x43E;&#x442;&#x43D;&#x43E;&#x432;&#x43E; &#x441; &#x43F;&#x43E;-&#x43C;&#x430;&#x43B;&#x44A;&#x43A; &#x432;&#x438;&#x434;&#x435;&#x43E; &#x444;&#x430;&#x439;&#x43B;.","ba-videorecorder.unsupported_video_type":"&#x41C;&#x43E;&#x43B;&#x44F;, &#x43A;&#x430;&#x447;&#x435;&#x442;&#x435;: %s - &#x43A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x43E;&#x43F;&#x438;&#x442;&#x430;&#x442;&#x435; &#x43E;&#x442;&#x43D;&#x43E;&#x432;&#x43E;.","ba-videoplayer-controlbar.exit-fullscreen-video":"&#x418;&#x437;&#x43B;&#x438;&#x437;&#x430;&#x43D;&#x435; &#x43E;&#x442; &#x446;&#x44F;&#x43B; &#x200B;&#x200B;&#x435;&#x43A;&#x440;&#x430;&#x43D;","ba-videoplayer-share.share":"&#x421;&#x43F;&#x43E;&#x434;&#x435;&#x43B;&#x44F;&#x43D;&#x435; &#x43D;&#x430; &#x432;&#x438;&#x434;&#x435;&#x43E;&#x43A;&#x43B;&#x438;&#x43F;","ba-videorecorder-chooser.record-screen":"&#x415;&#x43A;&#x440;&#x430;&#x43D; &#x437;&#x430; &#x437;&#x430;&#x43F;&#x438;&#x441;","ba-videoplayer-controlbar.pause-video-disabled":"&#x41F;&#x430;&#x443;&#x437;&#x430;&#x442;&#x430; &#x43D;&#x435; &#x441;&#x435; &#x43F;&#x43E;&#x434;&#x434;&#x44A;&#x440;&#x436;&#x430;","ba-videorecorder-chooser.record-audio":"&#x417;&#x430;&#x43F;&#x438;&#x441;&#x432;&#x430;&#x43D;&#x435; &#x43D;&#x430; &#x430;&#x443;&#x434;&#x438;&#x43E;","ba-videorecorder-controlbar.stop-available-after":"&#x41C;&#x438;&#x43D;&#x438;&#x43C;&#x430;&#x43B;&#x43D;&#x43E;&#x442;&#x43E; &#x432;&#x440;&#x435;&#x43C;&#x435; &#x437;&#x430; &#x437;&#x430;&#x43F;&#x438;&#x441; &#x435; %d &#x441;&#x435;&#x43A;&#x443;&#x43D;&#x434;&#x438;","ba-videorecorder-controlbar.cancel":"&#x41E;&#x442;&#x43A;&#x430;&#x437;","ba-videorecorder-controlbar.cancel-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x43E;&#x442;&#x43C;&#x435;&#x43D;&#x438;&#x442;&#x435;.","ba-videorecorder.cancel-confirm":"&#x41D;&#x430;&#x438;&#x441;&#x442;&#x438;&#x43D;&#x430; &#x43B;&#x438; &#x438;&#x441;&#x43A;&#x430;&#x442;&#x435; &#x434;&#x430; &#x430;&#x43D;&#x443;&#x43B;&#x438;&#x440;&#x430;&#x442;&#x435; &#x43A;&#x430;&#x447;&#x432;&#x430;&#x43D;&#x435;&#x442;&#x43E; &#x43D;&#x430; &#x432;&#x438;&#x434;&#x435;&#x43E;&#x43A;&#x43B;&#x438;&#x43F;&#x430; &#x441;&#x438;?","ba-videoplayer-adslot.elapsed-time":"&#x418;&#x437;&#x433;&#x43B;&#x430;&#x434;&#x438; &#x432;&#x440;&#x435;&#x43C;&#x435;&#x442;&#x43E;","ba-videoplayer-adslot.volume-button":"&#x417;&#x430;&#x434;&#x430;&#x439;&#x442;&#x435; &#x441;&#x438;&#x43B;&#x430; &#x43D;&#x430; &#x437;&#x432;&#x443;&#x43A;&#x430;","ba-videoplayer-adslot.volume-mute":"&#x421;&#x43F;&#x438;&#x440;&#x430;&#x43D;&#x435; &#x43D;&#x430; &#x437;&#x432;&#x443;&#x43A;&#x430;","ba-videoplayer-adslot.volume-unmute":"&#x417;&#x430;&#x433;&#x43B;&#x443;&#x448;&#x430;&#x432;&#x430;&#x43D;&#x435; &#x43D;&#x430; &#x437;&#x432;&#x443;&#x43A;&#x430;","ba-videoplayer-adslot.ad-will-end-after":"&#x420;&#x435;&#x43A;&#x43B;&#x430;&#x43C;&#x430;&#x442;&#x430; &#x449;&#x435; &#x43F;&#x440;&#x438;&#x43A;&#x43B;&#x44E;&#x447;&#x438; &#x441;&#x43B;&#x435;&#x434; %s","ba-videoplayer-adslot.can-skip-after":"&#x41F;&#x440;&#x43E;&#x43F;&#x443;&#x441;&#x43D;&#x435;&#x442;&#x435; &#x441;&#x43B;&#x435;&#x434; %d","ba-videoplayer-adslot.skip-ad":"&#x41F;&#x440;&#x43E;&#x43F;&#x443;&#x441;&#x43D;&#x435;&#x442;&#x435; &#x43E;&#x431;&#x44F;&#x432;&#x430;","ba-videorecorder.software-required":"&#x41C;&#x43E;&#x43B;&#x44F;, &#x43A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x43F;&#x43E;-&#x434;&#x43E;&#x43B;&#x443;, &#x437;&#x430; &#x434;&#x430; &#x438;&#x43D;&#x441;&#x442;&#x430;&#x43B;&#x438;&#x440;&#x430;&#x442;&#x435; / &#x430;&#x43A;&#x442;&#x438;&#x432;&#x438;&#x440;&#x430;&#x442;&#x435; &#x441;&#x43B;&#x435;&#x434;&#x43D;&#x438;&#x442;&#x435; &#x438;&#x437;&#x438;&#x441;&#x43A;&#x432;&#x430;&#x43D;&#x438;&#x44F;, &#x437;&#x430; &#x434;&#x430; &#x43F;&#x440;&#x43E;&#x434;&#x44A;&#x43B;&#x436;&#x438;&#x442;&#x435;.","ba-videorecorder.software-waiting":"&#x418;&#x437;&#x447;&#x430;&#x43A;&#x432;&#x430;&#x43D;&#x435; &#x437;&#x430; &#x438;&#x43D;&#x441;&#x442;&#x430;&#x43B;&#x438;&#x440;&#x430;&#x43D;&#x435; / &#x430;&#x43A;&#x442;&#x438;&#x432;&#x438;&#x440;&#x430;&#x43D;&#x435; &#x43D;&#x430; &#x438;&#x437;&#x438;&#x441;&#x43A;&#x432;&#x430;&#x43D;&#x438;&#x44F;&#x442;&#x430;. &#x41C;&#x43E;&#x436;&#x435; &#x434;&#x430; &#x441;&#x435; &#x43D;&#x430;&#x43B;&#x43E;&#x436;&#x438; &#x434;&#x430; &#x43E;&#x43F;&#x440;&#x435;&#x441;&#x43D;&#x438;&#x442;&#x435; &#x441;&#x442;&#x440;&#x430;&#x43D;&#x438;&#x446;&#x430;&#x442;&#x430; &#x441;&#x43B;&#x435;&#x434; &#x437;&#x430;&#x432;&#x44A;&#x440;&#x448;&#x432;&#x430;&#x43D;&#x435;.","ba-videoplayer-controlbar.close-tracks":"&#x417;&#x430;&#x442;&#x432;&#x43E;&#x440;&#x435;&#x442;&#x435; CC","ba-videoplayer-controlbar.show-tracks":"&#x41F;&#x43E;&#x43A;&#x430;&#x436;&#x435;&#x442;&#x435; CC","ba-videoplayer-tracks.upload-text-tracks":"&#x41A;&#x430;&#x447;&#x432;&#x430;&#x43D;&#x435; &#x43D;&#x430; &#x442;&#x435;&#x43A;&#x441;&#x442;&#x43E;&#x432;&#x438; &#x444;&#x430;&#x439;&#x43B;&#x43E;&#x432;&#x435; &#x43D;&#x430; &#x442;&#x435;&#x43A;&#x441;&#x442;&#x43E;&#x432;&#x435;","ba-videoplayer-tracks.select-text-track-language":"&#x415;&#x437;&#x438;&#x43A; &#x43D;&#x430; &#x441;&#x443;&#x431;&#x442;&#x438;&#x442;&#x440;&#x438;&#x442;&#x435;","ba-videoplayer-tracks.info-select-locale-first":"&#x41F;&#x44A;&#x440;&#x432;&#x43E; &#x438;&#x437;&#x431;&#x435;&#x440;&#x435;&#x442;&#x435; &#x43B;&#x43E;&#x43A;&#x430;&#x43B;","ba-videoplayer-tracks.select-text-track-file":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435;, &#x437;&#x430; &#x434;&#x430; &#x438;&#x437;&#x431;&#x435;&#x440;&#x435;&#x442;&#x435; &#x444;&#x430;&#x439;&#x43B;","ba-videoplayer-tracks.back":"&#x43E;&#x431;&#x440;&#x430;&#x442;&#x43D;&#x43E;","ba-videorecorder.framerate-warning":"&#x421;&#x43A;&#x43E;&#x440;&#x43E;&#x441;&#x442;&#x442;&#x430; &#x43D;&#x430; &#x432;&#x438;&#x434;&#x435;&#x43E;&#x43A;&#x430;&#x43C;&#x435;&#x440;&#x430;&#x442;&#x430; &#x435; &#x43C;&#x43D;&#x43E;&#x433;&#x43E; &#x43D;&#x438;&#x441;&#x43A;&#x430;. &#x41F;&#x440;&#x435;&#x43F;&#x43E;&#x440;&#x44A;&#x447;&#x432;&#x430;&#x43C;&#x435; &#x434;&#x430; &#x437;&#x430;&#x442;&#x432;&#x43E;&#x440;&#x438;&#x442;&#x435; &#x432;&#x441;&#x438;&#x447;&#x43A;&#x438; &#x434;&#x440;&#x443;&#x433;&#x438; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x438; &#x438; &#x440;&#x430;&#x437;&#x434;&#x435;&#x43B;&#x438; &#x432; &#x431;&#x440;&#x430;&#x443;&#x437;&#x44A;&#x440;&#x430; &#x438;&#x43B;&#x438; &#x434;&#x430; &#x438;&#x437;&#x43F;&#x43E;&#x43B;&#x437;&#x432;&#x430;&#x442;&#x435; &#x43F;&#x43E;-&#x431;&#x44A;&#x440;&#x437; &#x43A;&#x43E;&#x43C;&#x43F;&#x44E;&#x442;&#x44A;&#x440;.","ba-videorecorder.upload-error-duration":"&#x41F;&#x440;&#x43E;&#x434;&#x44A;&#x43B;&#x436;&#x438;&#x442;&#x435;&#x43B;&#x43D;&#x43E;&#x441;&#x442;&#x442;&#x430; &#x43D;&#x430; &#x43A;&#x430;&#x447;&#x435;&#x43D;&#x438;&#x44F; &#x432;&#x438;&#x434;&#x435;&#x43E;&#x43A;&#x43B;&#x438;&#x43F; &#x43D;&#x435; &#x43E;&#x442;&#x433;&#x43E;&#x432;&#x430;&#x440;&#x44F; &#x43D;&#x430; &#x438;&#x437;&#x438;&#x441;&#x43A;&#x432;&#x430;&#x43D;&#x438;&#x44F;&#x442;&#x430; - &#x43A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x43E;&#x43F;&#x438;&#x442;&#x430;&#x442;&#x435; &#x43E;&#x442;&#x43D;&#x43E;&#x432;&#x43E;.","ba-videorecorder.resolution-constraint-error":"&#x418;&#x437;&#x431;&#x440;&#x430;&#x43D;&#x438;&#x44F;&#x442; &#x43E;&#x442; &#x432;&#x430;&#x441; &#x444;&#x430;&#x439;&#x43B; &#x43D;&#x435; &#x441;&#x44A;&#x43E;&#x442;&#x432;&#x435;&#x442;&#x441;&#x442;&#x432;&#x430; &#x43D;&#x430; &#x438;&#x437;&#x438;&#x441;&#x43A;&#x432;&#x430;&#x43D;&#x430;&#x442;&#x430; &#x440;&#x435;&#x437;&#x43E;&#x43B;&#x44E;&#x446;&#x438;&#x44F; - &#x43A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x43E;&#x43F;&#x438;&#x442;&#x430;&#x442;&#x435; &#x43E;&#x442;&#x43D;&#x43E;&#x432;&#x43E;.","ba-videorecorder.orientation-portrait-required":"&#x41C;&#x43E;&#x43B;&#x44F;, &#x437;&#x430;&#x432;&#x44A;&#x440;&#x442;&#x435;&#x442;&#x435; &#x443;&#x441;&#x442;&#x440;&#x43E;&#x439;&#x441;&#x442;&#x432;&#x43E;&#x442;&#x43E; &#x441;&#x438;, &#x437;&#x430; &#x434;&#x430; &#x433;&#x43E; &#x437;&#x430;&#x43F;&#x438;&#x448;&#x435;&#x442;&#x435; &#x432; &#x43F;&#x43E;&#x440;&#x442;&#x440;&#x435;&#x442;&#x435;&#x43D; &#x440;&#x435;&#x436;&#x438;&#x43C;.","ba-videorecorder.orientation-landscape-required":"&#x41C;&#x43E;&#x43B;&#x44F;, &#x437;&#x430;&#x432;&#x44A;&#x440;&#x442;&#x435;&#x442;&#x435; &#x443;&#x441;&#x442;&#x440;&#x43E;&#x439;&#x441;&#x442;&#x432;&#x43E;&#x442;&#x43E; &#x441;&#x438;, &#x437;&#x430; &#x434;&#x430; &#x433;&#x43E; &#x437;&#x430;&#x43F;&#x438;&#x448;&#x435;&#x442;&#x435; &#x432; &#x440;&#x435;&#x436;&#x438;&#x43C; &#x43D;&#x430; &#x43F;&#x435;&#x439;&#x437;&#x430;&#x436;.","ba-imageviewer-controlbar.rerecord-image":"&#x412;&#x44A;&#x437;&#x441;&#x442;&#x430;&#x43D;&#x43E;&#x432;&#x44F;&#x432;&#x430;&#x43D;&#x435;?","ba-imageviewer-controlbar.submit-image":"&#x43F;&#x43E;&#x442;&#x432;&#x44A;&#x440;&#x436;&#x434;&#x430;&#x432;&#x430;&#x43C;","ba-imageviewer-controlbar.fullscreen-image":"&#x412;&#x44A;&#x432;&#x435;&#x434;&#x435;&#x442;&#x435; &#x446;&#x435;&#x43B;&#x438;&#x44F; &#x435;&#x43A;&#x440;&#x430;&#x43D;","ba-imageviewer-controlbar.exit-fullscreen-image":"&#x418;&#x437;&#x43B;&#x438;&#x437;&#x430;&#x43D;&#x435; &#x43E;&#x442; &#x446;&#x44F;&#x43B; &#x200B;&#x200B;&#x435;&#x43A;&#x440;&#x430;&#x43D;","ba-imageviewer.image-error":"&#x412;&#x44A;&#x437;&#x43D;&#x438;&#x43A;&#x43D;&#x430; &#x433;&#x440;&#x435;&#x448;&#x43A;&#x430;. &#x41C;&#x43E;&#x43B;&#x44F;, &#x43E;&#x43F;&#x438;&#x442;&#x430;&#x439;&#x442;&#x435; &#x43E;&#x442;&#x43D;&#x43E;&#x432;&#x43E; &#x43F;&#x43E;-&#x43A;&#x44A;&#x441;&#x43D;&#x43E;. &#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435;, &#x437;&#x430; &#x434;&#x430; &#x43E;&#x43F;&#x438;&#x442;&#x430;&#x442;&#x435; &#x43E;&#x442;&#x43D;&#x43E;&#x432;&#x43E;.","ba-imagecapture-chooser.image-capture":"&#x417;&#x430;&#x441;&#x43D;&#x435;&#x43C;&#x430;&#x43D;&#x435; &#x43D;&#x430; &#x438;&#x437;&#x43E;&#x431;&#x440;&#x430;&#x436;&#x435;&#x43D;&#x438;&#x435;","ba-imagecapture-chooser.upload-image":"&#x41A;&#x430;&#x447;&#x438; &#x438;&#x437;&#x43E;&#x431;&#x440;&#x430;&#x436;&#x435;&#x43D;&#x438;&#x435;","ba-imagecapture-controlbar.settings":"&#x41D;&#x430;&#x441;&#x442;&#x440;&#x43E;&#x439;&#x43A;&#x438;","ba-imagecapture-controlbar.camerahealthy":"&#x41E;&#x441;&#x432;&#x435;&#x442;&#x43B;&#x435;&#x43D;&#x438;&#x435;&#x442;&#x43E; &#x435; &#x434;&#x43E;&#x431;&#x440;&#x43E;","ba-imagecapture-controlbar.cameraunhealthy":"&#x41E;&#x441;&#x432;&#x435;&#x442;&#x43B;&#x435;&#x43D;&#x438;&#x435;&#x442;&#x43E; &#x43D;&#x435; &#x435; &#x43E;&#x43F;&#x442;&#x438;&#x43C;&#x430;&#x43B;&#x43D;&#x43E;","ba-imagecapture-controlbar.record":"&#x423;&#x43B;&#x430;&#x432;&#x44F;&#x43D;&#x435;","ba-imagecapture-controlbar.record-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x437;&#x430;&#x441;&#x43D;&#x435;&#x43C;&#x435;&#x442;&#x435;.","ba-imagecapture-controlbar.rerecord":"&#x440;&#x435;&#x43C;&#x43E;&#x43D;&#x442;&#x438;&#x440;&#x430;&#x43C;","ba-imagecapture-controlbar.rerecord-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x435;.","ba-imagecapture-controlbar.cancel":"&#x41E;&#x442;&#x43A;&#x430;&#x437;","ba-imagecapture-controlbar.cancel-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x43E;&#x442;&#x43C;&#x435;&#x43D;&#x438;&#x442;&#x435;.","ba-audioplayer-controlbar.audio-progress":"&#x43F;&#x440;&#x43E;&#x433;&#x440;&#x435;&#x441;","ba-audioplayer-controlbar.rerecord-audio":"&#x412;&#x44A;&#x437;&#x441;&#x442;&#x430;&#x43D;&#x43E;&#x432;&#x44F;&#x432;&#x430;&#x43D;&#x435;?","ba-audioplayer-controlbar.submit-audio":"&#x43F;&#x43E;&#x442;&#x432;&#x44A;&#x440;&#x436;&#x434;&#x430;&#x432;&#x430;&#x43C;","ba-audioplayer-controlbar.play-audio":"&#x438;&#x433;&#x440;&#x430;&#x44F;","ba-audioplayer-controlbar.pause-audio":"&#x43F;&#x430;&#x443;&#x437;&#x430;","ba-audioplayer-controlbar.pause-audio-disabled":"&#x41F;&#x430;&#x443;&#x437;&#x430;&#x442;&#x430; &#x43D;&#x435; &#x441;&#x435; &#x43F;&#x43E;&#x434;&#x434;&#x44A;&#x440;&#x436;&#x430;","ba-audioplayer-controlbar.elapsed-time":"&#x418;&#x437;&#x433;&#x43B;&#x430;&#x434;&#x438; &#x432;&#x440;&#x435;&#x43C;&#x435;&#x442;&#x43E;","ba-audioplayer-controlbar.total-time":"&#x41E;&#x431;&#x449;&#x430; &#x434;&#x44A;&#x43B;&#x436;&#x438;&#x43D;&#x430;","ba-audioplayer-controlbar.volume-button":"&#x417;&#x430;&#x434;&#x430;&#x439;&#x442;&#x435; &#x441;&#x438;&#x43B;&#x430; &#x43D;&#x430; &#x437;&#x432;&#x443;&#x43A;&#x430;","ba-audioplayer-controlbar.volume-mute":"&#x421;&#x43F;&#x438;&#x440;&#x430;&#x43D;&#x435; &#x43D;&#x430; &#x437;&#x432;&#x443;&#x43A;&#x430;","ba-audioplayer-controlbar.volume-unmute":"&#x417;&#x430;&#x433;&#x43B;&#x443;&#x448;&#x430;&#x432;&#x430;&#x43D;&#x435; &#x43D;&#x430; &#x437;&#x432;&#x443;&#x43A;&#x430;","ba-audioplayer-loader.tooltip":"&#x417;&#x430;&#x440;&#x435;&#x436;&#x434;&#x430;&#x43D;&#x435;...","ba-audioplayer.audio-error":"&#x412;&#x44A;&#x437;&#x43D;&#x438;&#x43A;&#x43D;&#x430; &#x433;&#x440;&#x435;&#x448;&#x43A;&#x430;. &#x41C;&#x43E;&#x43B;&#x44F;, &#x43E;&#x43F;&#x438;&#x442;&#x430;&#x439;&#x442;&#x435; &#x43E;&#x442;&#x43D;&#x43E;&#x432;&#x43E; &#x43F;&#x43E;-&#x43A;&#x44A;&#x441;&#x43D;&#x43E;. &#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435;, &#x437;&#x430; &#x434;&#x430; &#x43E;&#x43F;&#x438;&#x442;&#x430;&#x442;&#x435; &#x43E;&#x442;&#x43D;&#x43E;&#x432;&#x43E;.","ba-audiorecorder-chooser.record-audio":"&#x417;&#x430;&#x43F;&#x438;&#x441;&#x432;&#x430;&#x43D;&#x435; &#x43D;&#x430; &#x430;&#x443;&#x434;&#x438;&#x43E;","ba-audiorecorder-chooser.upload-audio":"&#x41A;&#x430;&#x447;&#x435;&#x442;&#x435; &#x430;&#x443;&#x434;&#x438;&#x43E;","ba-audiorecorder-controlbar.settings":"&#x41D;&#x430;&#x441;&#x442;&#x440;&#x43E;&#x439;&#x43A;&#x438;","ba-audiorecorder-controlbar.microphonehealthy":"&#x417;&#x432;&#x443;&#x43A;&#x44A;&#x442; &#x435; &#x434;&#x43E;&#x431;&#x44A;&#x440;","ba-audiorecorder-controlbar.microphoneunhealthy":"&#x41D;&#x435; &#x43C;&#x43E;&#x436;&#x435; &#x434;&#x430; &#x441;&#x435; &#x447;&#x443;&#x435; &#x437;&#x432;&#x443;&#x43A;","ba-audiorecorder-controlbar.record":"&#x440;&#x435;&#x43A;&#x43E;&#x440;&#x434;","ba-audiorecorder-controlbar.record-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x437;&#x430;&#x43F;&#x438;&#x448;&#x435;&#x442;&#x435;.","ba-audiorecorder-controlbar.rerecord":"&#x440;&#x435;&#x43C;&#x43E;&#x43D;&#x442;&#x438;&#x440;&#x430;&#x43C;","ba-audiorecorder-controlbar.rerecord-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x435;.","ba-audiorecorder-controlbar.stop":"&#x421;&#x43F;&#x440;&#x438; &#x441;&#x435;","ba-audiorecorder-controlbar.stop-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x441;&#x43F;&#x440;&#x435;&#x442;&#x435;.","ba-audiorecorder-controlbar.stop-available-after":"&#x41C;&#x438;&#x43D;&#x438;&#x43C;&#x430;&#x43B;&#x43D;&#x43E;&#x442;&#x43E; &#x432;&#x440;&#x435;&#x43C;&#x435; &#x437;&#x430; &#x437;&#x430;&#x43F;&#x438;&#x441; &#x435; %d &#x441;&#x435;&#x43A;&#x443;&#x43D;&#x434;&#x438;","ba-audiorecorder-controlbar.cancel":"&#x41E;&#x442;&#x43A;&#x430;&#x437;","ba-audiorecorder-controlbar.cancel-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x442;&#x443;&#x43A;, &#x437;&#x430; &#x434;&#x430; &#x43E;&#x442;&#x43C;&#x435;&#x43D;&#x438;&#x442;&#x435;."},"language:cat":{"ba-videoplayer-playbutton.tooltip":"Feu clic per veure el v&#xED;deo.","ba-videoplayer-playbutton.rerecord":"refer","ba-videoplayer-playbutton.submit-video":"confirmar v&#xED;deo","ba-videoplayer-loader.tooltip":"Carregant v&#xED;deo ...","ba-videoplayer-controlbar.change-resolution":"Canviar la resoluci&#xF3;","ba-videoplayer-controlbar.video-progress":"el progr&#xE9;s de v&#xED;deo","ba-videoplayer-controlbar.rerecord-video":"Torneu a fer el v&#xED;deo?","ba-videoplayer-controlbar.submit-video":"confirmar v&#xED;deo","ba-videoplayer-controlbar.play-video":"reproducci&#xF3; de v&#xED;deo","ba-videoplayer-controlbar.pause-video":"pausa de v&#xED;deo","ba-videoplayer-controlbar.elapsed-time":"temps Elasped","ba-videoplayer-controlbar.total-time":"Durada total de v&#xED;deo","ba-videoplayer-controlbar.fullscreen-video":"Introdu&#xEF;u a pantalla completa","ba-videoplayer-controlbar.volume-button":"volum de s&#xE8;ries","ba-videoplayer-controlbar.volume-mute":"silenciar so","ba-videoplayer-controlbar.volume-unmute":"activar so","ba-videoplayer.video-error":"Hi ha hagut un error. Siusplau, torni a intentar-ho m&#xE9;s tard. Feu clic per tornar a intentar-ho.","ba-videorecorder-chooser.record-video":"Gravar el v&#xED;deo","ba-videorecorder-chooser.upload-video":"Pujar v&#xED;deo","ba-videorecorder-controlbar.settings":"ajustos","ba-videorecorder-controlbar.camerahealthy":"La il&#xB7;luminaci&#xF3; &#xE9;s bona","ba-videorecorder-controlbar.cameraunhealthy":"La il&#xB7;luminaci&#xF3; no &#xE9;s &#xF2;ptima","ba-videorecorder-controlbar.microphonehealthy":"El so &#xE9;s bo","ba-videorecorder-controlbar.microphoneunhealthy":"No es pot recollir qualsevol so","ba-videorecorder-controlbar.record":"registre","ba-videorecorder-controlbar.record-tooltip":"Feu clic aqu&#xED; per gravar.","ba-videorecorder-controlbar.rerecord":"refer","ba-videorecorder-controlbar.rerecord-tooltip":"Cliqueu aqu&#xED; per fer de nou.","ba-videorecorder-controlbar.upload-covershot":"Pujar","ba-videorecorder-controlbar.upload-covershot-tooltip":"Feu clic aqu&#xED; per pujar foto de portada personalitzada","ba-videorecorder-controlbar.stop":"aturar","ba-videorecorder-controlbar.stop-tooltip":"Feu clic aqu&#xED; per aturar.","ba-videorecorder-controlbar.skip":"Omet","ba-videorecorder-controlbar.skip-tooltip":"Feu clic aqu&#xED; per saltar.","ba-videorecorder.recorder-error":"Hi ha hagut un error. Siusplau, torni a intentar-ho m&#xE9;s tard. Feu clic per tornar a intentar-ho.","ba-videorecorder.attach-error":"No hem pogut accedir a la interf&#xED;cie de la c&#xE0;mera. En funci&#xF3; del dispositiu i del navegador, &#xE9;s possible que hagi de instal &#xB7; lar Flash o accedir a la p&#xE0;gina a trav&#xE9;s de SSL.","ba-videorecorder.access-forbidden":"Estava prohibit l&#x27;acc&#xE9;s a la c&#xE0;mera. Feu clic per tornar a intentar-ho.","ba-videorecorder.pick-covershot":"Tria una covershot.","ba-videorecorder.uploading":"pujant","ba-videorecorder.uploading-failed":"C&#xE0;rrega fallat - fer clic aqu&#xED; per tornar a intentar-ho.","ba-videorecorder.verifying":"verificant","ba-videorecorder.verifying-failed":"fallat la verificaci&#xF3; de - fer clic aqu&#xED; per tornar a intentar-ho.","ba-videorecorder.rerecord-confirm":"De veritat vol tornar a fer el v&#xED;deo?","ba-videorecorder.video_file_too_large":"L&#x27;arxiu de v&#xED;deo &#xE9;s massa gran (%s) - fer clic aqu&#xED; per tornar a intentar-ho amb un arxiu de v&#xED;deo m&#xE9;s petita.","ba-videorecorder.unsupported_video_type":"Si us plau, puja: %s - fer clic aqu&#xED; per tornar a intentar-ho.","ba-videoplayer-controlbar.exit-fullscreen-video":"Surt de la pantalla completa","ba-videoplayer-share.share":"compartir v&#xED;deo","ba-videorecorder-chooser.record-screen":"Pantalla de registre","ba-videoplayer-controlbar.pause-video-disabled":"Pausa no &#xE9;s compatible","ba-videorecorder-chooser.record-audio":"Enregistrament d&#x27;&#xE0;udio","ba-videorecorder-controlbar.stop-available-after":"El temps d&#x27;enregistrament m&#xED;nim &#xE9;s %d segons","ba-videorecorder-controlbar.cancel":"Cancel &#xB7; lar","ba-videorecorder-controlbar.cancel-tooltip":"Feu clic aqu&#xED; per cancel&#xB7;lar.","ba-videorecorder.cancel-confirm":"Realment vols cancel&#xB7;lar la c&#xE0;rrega del teu v&#xED;deo?","ba-videoplayer-adslot.elapsed-time":"Elasped temps","ba-videoplayer-adslot.volume-button":"Estableix el volum","ba-videoplayer-adslot.volume-mute":"Silenciar el so","ba-videoplayer-adslot.volume-unmute":"Silenciar el so","ba-videoplayer-adslot.ad-will-end-after":"L&#x27;anunci finalitzar&#xE0; despr&#xE9;s de %s","ba-videoplayer-adslot.can-skip-after":"Passa despr&#xE9;s de %d","ba-videoplayer-adslot.skip-ad":"Saltar anunci","ba-videorecorder.software-required":"Feu clic a sota per instal&#xB7;lar / activar els requisits seg&#xFC;ents per continuar.","ba-videorecorder.software-waiting":"Esperant que s&#x27;instal&#xB7;lin / activin els requisits. &#xC9;s possible que h&#xE0;giu d&#x27;actualitzar la p&#xE0;gina una vegada finalitzada.","ba-videoplayer-controlbar.close-tracks":"Tanca CC","ba-videoplayer-controlbar.show-tracks":"Mostra CC","ba-videoplayer-tracks.upload-text-tracks":"Penja fitxers de text de la pista","ba-videoplayer-tracks.select-text-track-language":"Llenguatge de subt&#xED;tols","ba-videoplayer-tracks.info-select-locale-first":"Primer seleccioneu la configuraci&#xF3; regional","ba-videoplayer-tracks.select-text-track-file":"Feu clic per seleccionar el fitxer","ba-videoplayer-tracks.back":"esquena","ba-videorecorder.framerate-warning":"La velocitat de marc de v&#xED;deo &#xE9;s molt baixa. Recomanem tancar tots els altres programes i pestanyes del navegador o utilitzar una computadora m&#xE9;s r&#xE0;pida.","ba-videorecorder.upload-error-duration":"La durada del v&#xED;deo carregat no compleix els requisits: feu clic aqu&#xED; per tornar-ho a provar.","ba-videorecorder.resolution-constraint-error":"El fitxer que heu seleccionat no coincideix amb la resoluci&#xF3; necess&#xE0;ria: feu clic aqu&#xED; per tornar-ho a provar.","ba-videorecorder.orientation-portrait-required":"Gireu el dispositiu per gravar en mode vertical.","ba-videorecorder.orientation-landscape-required":"Gireu el dispositiu per gravar en mode horitzontal.","ba-imageviewer-controlbar.rerecord-image":"Redo?","ba-imageviewer-controlbar.submit-image":"Confirma","ba-imageviewer-controlbar.fullscreen-image":"Introdu&#xEF;u la pantalla completa","ba-imageviewer-controlbar.exit-fullscreen-image":"Sortir de pantalla completa","ba-imageviewer.image-error":"Hi ha hagut un error. Siusplau, torni a intentar-ho m&#xE9;s tard. Feu clic per tornar-ho a intentar.","ba-imagecapture-chooser.image-capture":"Imatge de captura","ba-imagecapture-chooser.upload-image":"Penja la imatge","ba-imagecapture-controlbar.settings":"Configuraci&#xF3;","ba-imagecapture-controlbar.camerahealthy":"La il&#xB7;luminaci&#xF3; &#xE9;s bona","ba-imagecapture-controlbar.cameraunhealthy":"La il&#xB7;luminaci&#xF3; no &#xE9;s &#xF2;ptima","ba-imagecapture-controlbar.record":"Captura","ba-imagecapture-controlbar.record-tooltip":"Feu clic aqu&#xED; per capturar.","ba-imagecapture-controlbar.rerecord":"Redo","ba-imagecapture-controlbar.rerecord-tooltip":"Feu clic aqu&#xED; per tornar a fer-ho.","ba-imagecapture-controlbar.cancel":"Cancel &#xB7; lar","ba-imagecapture-controlbar.cancel-tooltip":"Feu clic aqu&#xED; per cancel&#xB7;lar.","ba-audioplayer-controlbar.audio-progress":"Progr&#xE9;s, progressar","ba-audioplayer-controlbar.rerecord-audio":"Redo?","ba-audioplayer-controlbar.submit-audio":"Confirma","ba-audioplayer-controlbar.play-audio":"Jugar","ba-audioplayer-controlbar.pause-audio":"Pausa","ba-audioplayer-controlbar.pause-audio-disabled":"Pausa no &#xE9;s compatible","ba-audioplayer-controlbar.elapsed-time":"Elasped temps","ba-audioplayer-controlbar.total-time":"Durada total de","ba-audioplayer-controlbar.volume-button":"Estableix el volum","ba-audioplayer-controlbar.volume-mute":"Silenciar el so","ba-audioplayer-controlbar.volume-unmute":"Silenciar el so","ba-audioplayer-loader.tooltip":"S&#x27;est&#xE0; carregant ...","ba-audioplayer.audio-error":"Hi ha hagut un error. Siusplau, torni a intentar-ho m&#xE9;s tard. Feu clic per tornar-ho a intentar.","ba-audiorecorder-chooser.record-audio":"Enregistrament d&#x27;&#xE0;udio","ba-audiorecorder-chooser.upload-audio":"Penja l&#x27;&#xE0;udio","ba-audiorecorder-controlbar.settings":"Configuraci&#xF3;","ba-audiorecorder-controlbar.microphonehealthy":"El so &#xE9;s bo","ba-audiorecorder-controlbar.microphoneunhealthy":"No es pot recuperar cap so","ba-audiorecorder-controlbar.record":"Registre","ba-audiorecorder-controlbar.record-tooltip":"Feu clic aqu&#xED; per registrar.","ba-audiorecorder-controlbar.rerecord":"Redo","ba-audiorecorder-controlbar.rerecord-tooltip":"Feu clic aqu&#xED; per tornar a fer-ho.","ba-audiorecorder-controlbar.stop":"Aturar","ba-audiorecorder-controlbar.stop-tooltip":"Feu clic aqu&#xED; per aturar.","ba-audiorecorder-controlbar.stop-available-after":"El temps d&#x27;enregistrament m&#xED;nim &#xE9;s %d segons","ba-audiorecorder-controlbar.cancel":"Cancel &#xB7; lar","ba-audiorecorder-controlbar.cancel-tooltip":"Feu clic aqu&#xED; per cancel&#xB7;lar."},"language:da":{"ba-videoplayer-playbutton.tooltip":"Klik for at afspille video.","ba-videoplayer-playbutton.rerecord":"redo","ba-videoplayer-playbutton.submit-video":"Bekr&#xE6;ft video","ba-videoplayer-loader.tooltip":"Indl&#xE6;ser video ...","ba-videoplayer-controlbar.change-resolution":"Skift opl&#xF8;sning","ba-videoplayer-controlbar.video-progress":"fremskridt Video","ba-videoplayer-controlbar.rerecord-video":"Redo video?","ba-videoplayer-controlbar.submit-video":"Bekr&#xE6;ft video","ba-videoplayer-controlbar.play-video":"Afspil video","ba-videoplayer-controlbar.pause-video":"Pause video","ba-videoplayer-controlbar.elapsed-time":"Elasped tid","ba-videoplayer-controlbar.total-time":"Samlet l&#xE6;ngde af video","ba-videoplayer-controlbar.fullscreen-video":"Indtast fullscreen","ba-videoplayer-controlbar.volume-button":"Indstil lydstyrke","ba-videoplayer-controlbar.volume-mute":"Sl&#xE5; lyden","ba-videoplayer-controlbar.volume-unmute":"Sl&#xE5; lyden til","ba-videoplayer.video-error":"Der opstod en fejl. Pr&#xF8;v venligst igen senere. Klik for at pr&#xF8;ve igen.","ba-videorecorder-chooser.record-video":"Optag din video","ba-videorecorder-chooser.upload-video":"Upload video","ba-videorecorder-controlbar.settings":"Indstillinger","ba-videorecorder-controlbar.camerahealthy":"Belysning er god","ba-videorecorder-controlbar.cameraunhealthy":"Belysning er ikke optimal","ba-videorecorder-controlbar.microphonehealthy":"Lyden er god","ba-videorecorder-controlbar.microphoneunhealthy":"Kan ikke afhente nogen lyd","ba-videorecorder-controlbar.record":"Optag","ba-videorecorder-controlbar.record-tooltip":"Klik her for at optage.","ba-videorecorder-controlbar.rerecord":"redo","ba-videorecorder-controlbar.rerecord-tooltip":"Klik her for at gentage.","ba-videorecorder-controlbar.upload-covershot":"Upload","ba-videorecorder-controlbar.upload-covershot-tooltip":"Klik her for at uploade brugerdefinerede d&#xE6;kning shot","ba-videorecorder-controlbar.stop":"Stop","ba-videorecorder-controlbar.stop-tooltip":"Klik her for at stoppe.","ba-videorecorder-controlbar.skip":"Spring over","ba-videorecorder-controlbar.skip-tooltip":"Klik her for at springe.","ba-videorecorder.recorder-error":"Der opstod en fejl. Pr&#xF8;v venligst igen senere. Klik for at pr&#xF8;ve igen.","ba-videorecorder.attach-error":"Vi kunne ikke f&#xE5; adgang til kameraet interface. Afh&#xE6;ngigt af enheden og browseren, skal du muligvis installere Flash eller adgang til siden via SSL.","ba-videorecorder.access-forbidden":"Adgang til kameraet var forbudt. Klik for at pr&#xF8;ve igen.","ba-videorecorder.pick-covershot":"V&#xE6;lg en covershot.","ba-videorecorder.uploading":"Upload","ba-videorecorder.uploading-failed":"Upload mislykkedes - klik her for at pr&#xF8;ve igen.","ba-videorecorder.verifying":"Bekr&#xE6;ftelse","ba-videorecorder.verifying-failed":"mislykkedes verificering - klik her for at pr&#xF8;ve igen.","ba-videorecorder.rerecord-confirm":"&#xD8;nsker du virkelig at optage en ny video?","ba-videorecorder.video_file_too_large":"Din video filen er for stor (%s) - klik her for at pr&#xF8;ve igen med et mindre videofil.","ba-videorecorder.unsupported_video_type":"upload venligst: %s - klik her for at pr&#xF8;ve igen.","ba-videoplayer-controlbar.exit-fullscreen-video":"Afslut fuldsk&#xE6;rm","ba-videoplayer-share.share":"Del video","ba-videorecorder-chooser.record-screen":"Optagelsessk&#xE6;rm","ba-videoplayer-controlbar.pause-video-disabled":"Pause ikke underst&#xF8;ttet","ba-videorecorder-chooser.record-audio":"Optag lyd","ba-videorecorder-controlbar.stop-available-after":"Mindste optagetid er %d sekunder","ba-videorecorder-controlbar.cancel":"Afbestille","ba-videorecorder-controlbar.cancel-tooltip":"Klik her for at annullere.","ba-videorecorder.cancel-confirm":"Vil du virkelig annullere din video upload?","ba-videoplayer-adslot.elapsed-time":"Elasped tid","ba-videoplayer-adslot.volume-button":"Indstil lydstyrke","ba-videoplayer-adslot.volume-mute":"D&#xE6;mp lyd","ba-videoplayer-adslot.volume-unmute":"Sluk lyden","ba-videoplayer-adslot.ad-will-end-after":"Annoncen slutter efter %s","ba-videoplayer-adslot.can-skip-after":"Spring over efter %d","ba-videoplayer-adslot.skip-ad":"Spring annoncen over","ba-videorecorder.software-required":"Klik nedenfor for at installere / aktivere f&#xF8;lgende krav for at forts&#xE6;tte.","ba-videorecorder.software-waiting":"Venter p&#xE5; de krav, der skal installeres / aktiveres. Du skal m&#xE5;ske opdatere siden efter f&#xE6;rdigg&#xF8;relsen.","ba-videoplayer-controlbar.close-tracks":"Luk CC","ba-videoplayer-controlbar.show-tracks":"Vis CC","ba-videoplayer-tracks.upload-text-tracks":"Upload spor tekstfiler","ba-videoplayer-tracks.select-text-track-language":"Undertekstsprog","ba-videoplayer-tracks.info-select-locale-first":"V&#xE6;lg f&#xF8;rst lokalitet","ba-videoplayer-tracks.select-text-track-file":"Klik for at v&#xE6;lge fil","ba-videoplayer-tracks.back":"tilbage","ba-videorecorder.framerate-warning":"Videorammerhastigheden er meget lav. Vi anbefaler at lukke alle andre programmer og browser faner eller at bruge en hurtigere computer.","ba-videorecorder.upload-error-duration":"L&#xE6;ngden p&#xE5; den uploadede video opfylder ikke kravene - klik her for at pr&#xF8;ve igen.","ba-videorecorder.resolution-constraint-error":"Filen du har valgt stemmer ikke overens med den kr&#xE6;vede opl&#xF8;sning - klik her for at pr&#xF8;ve igen.","ba-videorecorder.orientation-portrait-required":"Venligst drej din enhed for at optage i st&#xE5;ende tilstand.","ba-videorecorder.orientation-landscape-required":"Venligst drej din enhed for at optage i liggende tilstand.","ba-imageviewer-controlbar.rerecord-image":"Redo?","ba-imageviewer-controlbar.submit-image":"Bekr&#xE6;fte","ba-imageviewer-controlbar.fullscreen-image":"Indtast fuldsk&#xE6;rm","ba-imageviewer-controlbar.exit-fullscreen-image":"Afslut fuldsk&#xE6;rm","ba-imageviewer.image-error":"Der opstod en fejl. Pr&#xF8;v venligst igen senere. Klik for at pr&#xF8;ve igen.","ba-imagecapture-chooser.image-capture":"Capture Image","ba-imagecapture-chooser.upload-image":"Upload billede","ba-imagecapture-controlbar.settings":"Indstillinger","ba-imagecapture-controlbar.camerahealthy":"Belysning er god","ba-imagecapture-controlbar.cameraunhealthy":"Belysning er ikke optimal","ba-imagecapture-controlbar.record":"Fange","ba-imagecapture-controlbar.record-tooltip":"Klik her for at fange.","ba-imagecapture-controlbar.rerecord":"redo","ba-imagecapture-controlbar.rerecord-tooltip":"Klik her for at gentage.","ba-imagecapture-controlbar.cancel":"Afbestille","ba-imagecapture-controlbar.cancel-tooltip":"Klik her for at annullere.","ba-audioplayer-controlbar.audio-progress":"Fremskridt","ba-audioplayer-controlbar.rerecord-audio":"Redo?","ba-audioplayer-controlbar.submit-audio":"Bekr&#xE6;fte","ba-audioplayer-controlbar.play-audio":"Spille","ba-audioplayer-controlbar.pause-audio":"Pause","ba-audioplayer-controlbar.pause-audio-disabled":"Pause ikke underst&#xF8;ttet","ba-audioplayer-controlbar.elapsed-time":"Elasped tid","ba-audioplayer-controlbar.total-time":"Total l&#xE6;ngde p&#xE5;","ba-audioplayer-controlbar.volume-button":"Indstil lydstyrke","ba-audioplayer-controlbar.volume-mute":"D&#xE6;mp lyd","ba-audioplayer-controlbar.volume-unmute":"Sluk lyden","ba-audioplayer-loader.tooltip":"Indl&#xE6;ser...","ba-audioplayer.audio-error":"Der opstod en fejl. Pr&#xF8;v venligst igen senere. Klik for at pr&#xF8;ve igen.","ba-audiorecorder-chooser.record-audio":"Optag lyd","ba-audiorecorder-chooser.upload-audio":"Upload lyd","ba-audiorecorder-controlbar.settings":"Indstillinger","ba-audiorecorder-controlbar.microphonehealthy":"Lyden er god","ba-audiorecorder-controlbar.microphoneunhealthy":"Kan ikke hente nogen lyd","ba-audiorecorder-controlbar.record":"Optage","ba-audiorecorder-controlbar.record-tooltip":"Klik her for at optage.","ba-audiorecorder-controlbar.rerecord":"redo","ba-audiorecorder-controlbar.rerecord-tooltip":"Klik her for at gentage.","ba-audiorecorder-controlbar.stop":"Hold op","ba-audiorecorder-controlbar.stop-tooltip":"Klik her for at stoppe.","ba-audiorecorder-controlbar.stop-available-after":"Mindste optagetid er %d sekunder","ba-audiorecorder-controlbar.cancel":"Afbestille","ba-audiorecorder-controlbar.cancel-tooltip":"Klik her for at annullere."},"language:de":{"ba-videoplayer-playbutton.tooltip":"Hier klicken um Wiedergabe zu starten.","ba-videoplayer-playbutton.rerecord":"Video neu aufnehmen","ba-videoplayer-playbutton.submit-video":"Video akzeptieren","ba-videoplayer-loader.tooltip":"Video wird geladen...","ba-videoplayer-controlbar.change-resolution":"Aufl&#xF6;sung anpassen","ba-videoplayer-controlbar.video-progress":"Videofortschritt","ba-videoplayer-controlbar.rerecord-video":"Video erneut aufnehmen?","ba-videoplayer-controlbar.submit-video":"Video akzeptieren","ba-videoplayer-controlbar.play-video":"Video wiedergeben","ba-videoplayer-controlbar.pause-video":"Video pausieren","ba-videoplayer-controlbar.elapsed-time":"Vergangene Zeit","ba-videoplayer-controlbar.total-time":"L&#xE4;nge des Videos","ba-videoplayer-controlbar.fullscreen-video":"Vollbildmodus","ba-videoplayer-controlbar.volume-button":"Lautst&#xE4;rke regulieren","ba-videoplayer-controlbar.volume-mute":"Ton abstellen","ba-videoplayer-controlbar.volume-unmute":"Ton wieder aktivieren","ba-videoplayer.video-error":"Es ist ein Fehler aufgetreten, bitte versuchen Sie es sp&#xE4;ter noch einmal. Hier klicken, um es noch einmal zu probieren.","ba-videorecorder-chooser.record-video":"Video aufnehmen","ba-videorecorder-chooser.upload-video":"Video hochladen","ba-videorecorder-chooser.record-screen":"Desktop aufnehmen","ba-videorecorder-controlbar.settings":"Einstellungen","ba-videorecorder-controlbar.camerahealthy":"Gute Beleuchtung","ba-videorecorder-controlbar.cameraunhealthy":"Beleuchtung nicht optimal","ba-videorecorder-controlbar.microphonehealthy":"Soundqualit&#xE4;t einwandfrei","ba-videorecorder-controlbar.microphoneunhealthy":"Mikrofon bis jetzt stumm","ba-videorecorder-controlbar.record":"Video aufnehmen","ba-videorecorder-controlbar.record-tooltip":"Hier klicken um Aufnahme zu starten.","ba-videorecorder-controlbar.rerecord":"Video neu aufnehmen","ba-videorecorder-controlbar.rerecord-tooltip":"Hier klicken um Video erneut aufzunehmen.","ba-videorecorder-controlbar.upload-covershot":"Hochladen","ba-videorecorder-controlbar.upload-covershot-tooltip":"Hier klicken um einen Covershot hochzuladen.","ba-videorecorder-controlbar.stop":"Aufnahme stoppen","ba-videorecorder-controlbar.stop-tooltip":"Hier klicken um Aufnahme zu stoppen.","ba-videorecorder-controlbar.skip":"&#xDC;berspringen","ba-videorecorder-controlbar.skip-tooltip":"Hier klicken um zu &#xDC;berspringen.","ba-videorecorder.recorder-error":"Es ist ein Fehler aufgetreten, bitte versuchen Sie es sp&#xE4;ter noch einmal. Hier klicken, um es noch einmal zu probieren.","ba-videorecorder.attach-error":"Wir konnten nicht auf das Medieninterface zugreifen. Je nach Browser und Ger&#xE4;t muss m&#xF6;glicherweise Flash installiert oder die Seite &#xFC;ber SSL geladen werden.","ba-videorecorder.access-forbidden":"Zugriff auf das Medieninterface wurde verweigert. Hier klicken, um es noch einmal zu probieren.","ba-videorecorder.pick-covershot":"Bitte w&#xE4;hlen Sie einen Covershot aus.","ba-videorecorder.uploading":"Hochladen","ba-videorecorder.uploading-failed":"Hochladen fehlgeschlagen. Hier klicken, um es noch einmal zu probieren.","ba-videorecorder.verifying":"Verifizieren","ba-videorecorder.verifying-failed":"Verifizierung fehlgeschlagen. Hier klicken, um es noch einmal zu probieren.","ba-videorecorder.rerecord-confirm":"M&#xF6;chten Sie Ihr Video wirklich noch einmal aufnehmen?","ba-videorecorder.video_file_too_large":"Die angegebene Videodatei ist zu gro&#xDF; (%s). Hier klicken, um eine kleinere Videodatei hochzuladen.","ba-videorecorder.unsupported_video_type":"Bitte laden Sie Dateien des folgenden Typs hoch: %s. Hier klicken, um es noch einmal zu probieren.","ba-videoplayer-controlbar.exit-fullscreen-video":"Den Vollbildmous verlassen","ba-videoplayer-share.share":"Video teilen","ba-videoplayer-controlbar.pause-video-disabled":"Pause wird nicht unterst&#xFC;tzt","ba-videorecorder-chooser.record-audio":"Ton aufnehmen","ba-videorecorder-controlbar.stop-available-after":"Die minimale Aufnahmezeit ist %d Sekunden","ba-videorecorder-controlbar.cancel":"Stornieren","ba-videorecorder-controlbar.cancel-tooltip":"Klicken Sie hier, um abzubrechen.","ba-videorecorder.cancel-confirm":"M&#xF6;chten Sie Ihren Video-Upload wirklich abbrechen?","ba-videoplayer-adslot.elapsed-time":"Elased Zeit","ba-videoplayer-adslot.volume-button":"Lautst&#xE4;rke einstellen","ba-videoplayer-adslot.volume-mute":"Ton stummschalten","ba-videoplayer-adslot.volume-unmute":"Ton nicht h&#xF6;ren","ba-videoplayer-adslot.ad-will-end-after":"Die Anzeige endet nach %s","ba-videoplayer-adslot.can-skip-after":"&#xDC;berspringen nach %d","ba-videoplayer-adslot.skip-ad":"&#xDC;berspringen","ba-videorecorder.software-required":"Bitte klicken Sie hier, um die folgenden Voraussetzungen zu installieren bzw. zu aktivieren.","ba-videorecorder.software-waiting":"Warte auf Abschluss der Installation bzw. der Aktivierung. M&#xF6;glicherweise m&#xFC;ssen Sie die Seite nach dem Abschluss aktualisieren.","ba-videoplayer-controlbar.close-tracks":"Schlie&#xDF;en CC","ba-videoplayer-controlbar.show-tracks":"Zeig CC","ba-videoplayer-tracks.upload-text-tracks":"Hochladen von Textdateien","ba-videoplayer-tracks.select-text-track-language":"Untertitelsprache","ba-videoplayer-tracks.info-select-locale-first":"W&#xE4;hlen Sie zuerst das Gebietsschema aus","ba-videoplayer-tracks.select-text-track-file":"Klicken Sie, um eine Datei auszuw&#xE4;hlen","ba-videoplayer-tracks.back":"zur&#xFC;ck","ba-videorecorder.framerate-warning":"Die Videobildrate ist sehr niedrig. Wir empfehlen, alle anderen Programme und Browser-Tabs zu schlie&#xDF;en oder einen schnelleren Computer zu verwenden.","ba-videorecorder.upload-error-duration":"Die L&#xE4;nge des hochgeladenen Videos entspricht nicht den Anforderungen. Klicken Sie hier, um es erneut zu versuchen.","ba-videorecorder.resolution-constraint-error":"Die von Ihnen ausgew&#xE4;hlte Datei stimmt nicht mit der erforderlichen Aufl&#xF6;sung &#xFC;berein - klicken Sie hier, um es erneut zu versuchen.","ba-videorecorder.orientation-portrait-required":"Bitte drehen Sie Ihr Ger&#xE4;t, um im Hochformat aufzunehmen.","ba-videorecorder.orientation-landscape-required":"Bitte drehen Sie Ihr Ger&#xE4;t, um im Querformat aufzunehmen.","ba-imageviewer-controlbar.rerecord-image":"Wiederholen?","ba-imageviewer-controlbar.submit-image":"Best&#xE4;tigen","ba-imageviewer-controlbar.fullscreen-image":"Vollbildmodus aktivieren","ba-imageviewer-controlbar.exit-fullscreen-image":"Vollbildmodus beenden","ba-imageviewer.image-error":"Ein Fehler ist aufgetreten. Bitte versuchen Sie es sp&#xE4;ter erneut. Klicken Sie, um es erneut zu versuchen.","ba-imagecapture-chooser.image-capture":"Bild aufnehmen","ba-imagecapture-chooser.upload-image":"Bild hochladen","ba-imagecapture-controlbar.settings":"die Einstellungen","ba-imagecapture-controlbar.camerahealthy":"Die Beleuchtung ist gut","ba-imagecapture-controlbar.cameraunhealthy":"Die Beleuchtung ist nicht optimal","ba-imagecapture-controlbar.record":"Erfassung","ba-imagecapture-controlbar.record-tooltip":"Klicken Sie hier, um zu erfassen.","ba-imagecapture-controlbar.rerecord":"Wiederholen","ba-imagecapture-controlbar.rerecord-tooltip":"Klicken Sie hier, um den Vorgang zu wiederholen.","ba-imagecapture-controlbar.cancel":"Stornieren","ba-imagecapture-controlbar.cancel-tooltip":"Klicken Sie hier, um abzubrechen.","ba-audioplayer-controlbar.audio-progress":"Fortschritt","ba-audioplayer-controlbar.rerecord-audio":"Wiederholen?","ba-audioplayer-controlbar.submit-audio":"Best&#xE4;tigen","ba-audioplayer-controlbar.play-audio":"abspielen","ba-audioplayer-controlbar.pause-audio":"Pause","ba-audioplayer-controlbar.pause-audio-disabled":"Pause wird nicht unterst&#xFC;tzt","ba-audioplayer-controlbar.elapsed-time":"Elased Zeit","ba-audioplayer-controlbar.total-time":"Gesamtl&#xE4;nge von","ba-audioplayer-controlbar.volume-button":"Lautst&#xE4;rke einstellen","ba-audioplayer-controlbar.volume-mute":"Ton stummschalten","ba-audioplayer-controlbar.volume-unmute":"Ton nicht h&#xF6;ren","ba-audioplayer-loader.tooltip":"Wird geladen...","ba-audioplayer.audio-error":"Ein Fehler ist aufgetreten. Bitte versuchen Sie es sp&#xE4;ter erneut. Klicken Sie, um es erneut zu versuchen.","ba-audiorecorder-chooser.record-audio":"Ton aufnehmen","ba-audiorecorder-chooser.upload-audio":"Audio hochladen","ba-audiorecorder-controlbar.settings":"die Einstellungen","ba-audiorecorder-controlbar.microphonehealthy":"Sound ist gut","ba-audiorecorder-controlbar.microphoneunhealthy":"Kann keinen Ton aufnehmen","ba-audiorecorder-controlbar.record":"Aufzeichnung","ba-audiorecorder-controlbar.record-tooltip":"Klicken Sie hier, um aufzunehmen.","ba-audiorecorder-controlbar.rerecord":"Wiederholen","ba-audiorecorder-controlbar.rerecord-tooltip":"Klicken Sie hier, um den Vorgang zu wiederholen.","ba-audiorecorder-controlbar.stop":"Halt","ba-audiorecorder-controlbar.stop-tooltip":"Klicken Sie hier, um zu stoppen.","ba-audiorecorder-controlbar.stop-available-after":"Die minimale Aufnahmezeit ist %d Sekunden","ba-audiorecorder-controlbar.cancel":"Stornieren","ba-audiorecorder-controlbar.cancel-tooltip":"Klicken Sie hier, um abzubrechen."},"language:es":{"ba-videoplayer-playbutton.tooltip":"Haga clic para ver el video.","ba-videoplayer-playbutton.rerecord":"Regrabar","ba-videoplayer-playbutton.submit-video":"Confirmar v&#xED;deo","ba-videoplayer-loader.tooltip":"Cargando v&#xED;deo ...","ba-videoplayer-controlbar.change-resolution":"Cambiar la resoluci&#xF3;n","ba-videoplayer-controlbar.video-progress":"Progreso de v&#xED;deo","ba-videoplayer-controlbar.rerecord-video":"Regrabar v&#xED;deo?","ba-videoplayer-controlbar.submit-video":"Confirmar v&#xED;deo","ba-videoplayer-controlbar.play-video":"Reproducir video","ba-videoplayer-controlbar.pause-video":"Pausar v&#xED;deo","ba-videoplayer-controlbar.elapsed-time":"Tiempo transcurrido","ba-videoplayer-controlbar.total-time":"Duraci&#xF3;n total de video","ba-videoplayer-controlbar.fullscreen-video":"Ingrese a pantalla completa","ba-videoplayer-controlbar.volume-button":"Boton de volumen","ba-videoplayer-controlbar.volume-mute":"Silenciar sonido","ba-videoplayer-controlbar.volume-unmute":"Activar sonido","ba-videoplayer.video-error":"Se produjo un error, por favor intente de nuevo m&#xE1;s tarde. Haga clic para volver a intentarlo.","ba-videorecorder-chooser.record-video":"Grabar v&#xED;deo","ba-videorecorder-chooser.upload-video":"Subir v&#xED;deo","ba-videorecorder-controlbar.settings":"Ajustes","ba-videorecorder-controlbar.camerahealthy":"La iluminaci&#xF3;n es buena","ba-videorecorder-controlbar.cameraunhealthy":"La iluminaci&#xF3;n no es &#xF3;ptima","ba-videorecorder-controlbar.microphonehealthy":"El sonido es bueno","ba-videorecorder-controlbar.microphoneunhealthy":"Problemas con sonido","ba-videorecorder-controlbar.record":"Grabar","ba-videorecorder-controlbar.record-tooltip":"Haga clic aqu&#xED; para grabar.","ba-videorecorder-controlbar.rerecord":"Rehacer","ba-videorecorder-controlbar.rerecord-tooltip":"Haga clic aqu&#xED; para grabar de nuevo.","ba-videorecorder-controlbar.upload-covershot":"Subir","ba-videorecorder-controlbar.upload-covershot-tooltip":"Haga clic aqu&#xED; para subir foto de portada personalizada","ba-videorecorder-controlbar.stop":"Detener","ba-videorecorder-controlbar.stop-tooltip":"Haga clic aqu&#xED; para detener.","ba-videorecorder-controlbar.skip":"Saltear","ba-videorecorder-controlbar.skip-tooltip":"Haga clic aqu&#xED; para saltear.","ba-videorecorder.recorder-error":"Se produjo un error, por favor intente de nuevo m&#xE1;s tarde. Haga clic para volver a intentarlo.","ba-videorecorder.attach-error":"No hemos podido acceder a la interfaz de la c&#xE1;mara. Dependiendo del dispositivo y del navegador, es posible que tenga que instalar Flash o acceder a la p&#xE1;gina a trav&#xE9;s de SSL.","ba-videorecorder.access-forbidden":"Acceso denegado a la c&#xE1;mara. Haga clic para volver a intentarlo.","ba-videorecorder.pick-covershot":"Elige una foto de portada.","ba-videorecorder.uploading":"Subiendo","ba-videorecorder.uploading-failed":"La subida ha fallado - hacer clic aqu&#xED; para volver a intentarlo.","ba-videorecorder.verifying":"Verificando","ba-videorecorder.verifying-failed":"Fall&#xF3; la verificaci&#xF3;n - hacer clic aqu&#xED; para volver a intentarlo.","ba-videorecorder.rerecord-confirm":"&#xBF;Est&#xE1; seguro quiere volver a hacer el v&#xED;deo?","ba-videorecorder.video_file_too_large":"El archivo de v&#xED;deo es demasiado grande (%s) - hacer clic aqu&#xED; para volver a intentarlo con un archivo de v&#xED;deo m&#xE1;s peque&#xF1;o.","ba-videorecorder.unsupported_video_type":"Por favor, sube: %s - haz clic aqu&#xED; para volver a intentarlo.","ba-videoplayer-controlbar.exit-fullscreen-video":"Salir de pantalla completa","ba-videoplayer-share.share":"Compartir video","ba-videorecorder-chooser.record-screen":"Grabar pantalla","ba-videoplayer-controlbar.pause-video-disabled":"Pausa no admitida","ba-videorecorder-chooser.record-audio":"Grabar audio","ba-videorecorder-controlbar.stop-available-after":"El tiempo de grabaci&#xF3;n m&#xED;nimo es %d segundos","ba-videorecorder-controlbar.cancel":"Cancelar","ba-videorecorder-controlbar.cancel-tooltip":"Haga clic aqu&#xED; para cancelar.","ba-videorecorder.cancel-confirm":"&#xBF;Realmente quieres cancelar tu carga de video?","ba-videoplayer-adslot.elapsed-time":"Tiempo Transcurrido","ba-videoplayer-adslot.volume-button":"Establecer el volumen","ba-videoplayer-adslot.volume-mute":"Sin sonido","ba-videoplayer-adslot.volume-unmute":"Dejar de silenciar el sonido","ba-videoplayer-adslot.ad-will-end-after":"El anuncio finalizar&#xE1; despu&#xE9;s de %s","ba-videoplayer-adslot.can-skip-after":"Omitir despu&#xE9;s de %d","ba-videoplayer-adslot.skip-ad":"Omitir aviso publicitario","ba-videorecorder.software-required":"Haga click a continuaci&#xF3;n para instalar / activar los siguientes requisitos y as&#xED; poder continuar.","ba-videorecorder.software-waiting":"Esperando a que se instalen / activen los requisitos. Es posible que deba actualizar la p&#xE1;gina despu&#xE9;s de finalizar.","ba-videoplayer-controlbar.close-tracks":"Cerrar CC","ba-videoplayer-controlbar.show-tracks":"Mostrar CC","ba-videoplayer-tracks.upload-text-tracks":"Cargar archivos de texto de seguimiento","ba-videoplayer-tracks.select-text-track-language":"Idioma de subt&#xED;tulos","ba-videoplayer-tracks.info-select-locale-first":"Primero seleccione la configuraci&#xF3;n regional","ba-videoplayer-tracks.select-text-track-file":"Haga clic para seleccionar el archivo","ba-videoplayer-tracks.back":"espalda","ba-videorecorder.framerate-warning":"La velocidad de cuadro de video es muy baja. Recomendamos cerrar todos los dem&#xE1;s programas y pesta&#xF1;as del navegador o utilizar una computadora m&#xE1;s r&#xE1;pida.","ba-videorecorder.upload-error-duration":"La duraci&#xF3;n del video cargado no cumple con los requisitos: haga clic aqu&#xED; para volver a intentarlo.","ba-videorecorder.resolution-constraint-error":"El archivo que ha seleccionado no coincide con la resoluci&#xF3;n requerida; haga clic aqu&#xED; para volver a intentarlo.","ba-videorecorder.orientation-portrait-required":"Por favor, gire su dispositivo para grabar en modo vertical.","ba-videorecorder.orientation-landscape-required":"Por favor, gire su dispositivo para grabar en modo horizontal.","ba-imageviewer-controlbar.rerecord-image":"&#xBF;Rehacer?","ba-imageviewer-controlbar.submit-image":"Confirmar","ba-imageviewer-controlbar.fullscreen-image":"Ingrese a pantalla completa","ba-imageviewer-controlbar.exit-fullscreen-image":"Salir de pantalla completa","ba-imageviewer.image-error":"Se produjo un error. Int&#xE9;ntalo de nuevo m&#xE1;s tarde. Haga clic para volver a intentar.","ba-imagecapture-chooser.image-capture":"Capturar imagen","ba-imagecapture-chooser.upload-image":"Cargar imagen","ba-imagecapture-controlbar.settings":"Configuraciones","ba-imagecapture-controlbar.camerahealthy":"La iluminaci&#xF3;n es buena","ba-imagecapture-controlbar.cameraunhealthy":"La iluminaci&#xF3;n no es &#xF3;ptima","ba-imagecapture-controlbar.record":"Capturar","ba-imagecapture-controlbar.record-tooltip":"Haga clic aqu&#xED; para capturar","ba-imagecapture-controlbar.rerecord":"Rehacer","ba-imagecapture-controlbar.rerecord-tooltip":"Haga clic aqu&#xED; para rehacer.","ba-imagecapture-controlbar.cancel":"Cancelar","ba-imagecapture-controlbar.cancel-tooltip":"Haga clic aqu&#xED; para cancelar.","ba-audioplayer-controlbar.audio-progress":"Progreso","ba-audioplayer-controlbar.rerecord-audio":"&#xBF;Rehacer?","ba-audioplayer-controlbar.submit-audio":"Confirmar","ba-audioplayer-controlbar.play-audio":"Jugar","ba-audioplayer-controlbar.pause-audio":"Pausa","ba-audioplayer-controlbar.pause-audio-disabled":"Pausa no admitida","ba-audioplayer-controlbar.elapsed-time":"Tiempo Elasped","ba-audioplayer-controlbar.total-time":"Longitud total de","ba-audioplayer-controlbar.volume-button":"Establecer el volumen","ba-audioplayer-controlbar.volume-mute":"Sin sonido","ba-audioplayer-controlbar.volume-unmute":"Dejar de silenciar el sonido","ba-audioplayer-loader.tooltip":"Cargando...","ba-audioplayer.audio-error":"Se produjo un error. Int&#xE9;ntalo de nuevo m&#xE1;s tarde. Haga clic para volver a intentar.","ba-audiorecorder-chooser.record-audio":"Grabar audio","ba-audiorecorder-chooser.upload-audio":"Subir audio","ba-audiorecorder-controlbar.settings":"Configuraciones","ba-audiorecorder-controlbar.microphonehealthy":"El sonido es bueno","ba-audiorecorder-controlbar.microphoneunhealthy":"No puede captar ning&#xFA;n sonido","ba-audiorecorder-controlbar.record":"Grabar","ba-audiorecorder-controlbar.record-tooltip":"Haga clic aqu&#xED; para grabar.","ba-audiorecorder-controlbar.rerecord":"Rehacer","ba-audiorecorder-controlbar.rerecord-tooltip":"Haga clic aqu&#xED; para rehacer.","ba-audiorecorder-controlbar.stop":"Detener","ba-audiorecorder-controlbar.stop-tooltip":"Haga clic aqu&#xED; para detenerse.","ba-audiorecorder-controlbar.stop-available-after":"El tiempo de grabaci&#xF3;n m&#xED;nimo es %d segundos","ba-audiorecorder-controlbar.cancel":"Cancelar","ba-audiorecorder-controlbar.cancel-tooltip":"Haga clic aqu&#xED; para cancelar."},"language:fi":{"ba-videoplayer-playbutton.tooltip":"Toista video.","ba-videoplayer-playbutton.rerecord":"tehd&#xE4; uudelleen","ba-videoplayer-playbutton.submit-video":"vahvista video","ba-videoplayer-loader.tooltip":"Ladataan videota ...","ba-videoplayer-controlbar.change-resolution":"Muuta resoluutio","ba-videoplayer-controlbar.video-progress":"video edistyminen","ba-videoplayer-controlbar.rerecord-video":"Tee uudelleen video?","ba-videoplayer-controlbar.submit-video":"vahvista video","ba-videoplayer-controlbar.play-video":"Toista video","ba-videoplayer-controlbar.pause-video":"tauko video","ba-videoplayer-controlbar.elapsed-time":"Elasped aika","ba-videoplayer-controlbar.total-time":"Kokonaispituus video","ba-videoplayer-controlbar.fullscreen-video":"Anna koko n&#xE4;yt&#xF6;n","ba-videoplayer-controlbar.volume-button":"Set tilavuus","ba-videoplayer-controlbar.volume-mute":"&#xE4;&#xE4;nen mykistys","ba-videoplayer-controlbar.volume-unmute":"Poista mykistys","ba-videoplayer.video-error":"Tapahtui virhe, yrit&#xE4; my&#xF6;hemmin uudelleen. Yrit&#xE4; uudelleen klikkaamalla.","ba-videorecorder-chooser.record-video":"Tallenna videon","ba-videorecorder-chooser.upload-video":"Lataa video","ba-videorecorder-controlbar.settings":"Asetukset","ba-videorecorder-controlbar.camerahealthy":"Valaistus on hyv&#xE4;","ba-videorecorder-controlbar.cameraunhealthy":"Valaistus ei ole optimaalinen","ba-videorecorder-controlbar.microphonehealthy":"&#xC4;&#xE4;ni on hyv&#xE4;","ba-videorecorder-controlbar.microphoneunhealthy":"Voi poimia mit&#xE4;&#xE4;n &#xE4;&#xE4;nt&#xE4;","ba-videorecorder-controlbar.record":"Enn&#xE4;tys","ba-videorecorder-controlbar.record-tooltip":"T&#xE4;&#xE4;lt&#xE4; tallentaa.","ba-videorecorder-controlbar.rerecord":"tehd&#xE4; uudelleen","ba-videorecorder-controlbar.rerecord-tooltip":"T&#xE4;&#xE4;lt&#xE4; redo.","ba-videorecorder-controlbar.upload-covershot":"Lataa","ba-videorecorder-controlbar.upload-covershot-tooltip":"T&#xE4;&#xE4;lt&#xE4; ladata mukautettuja kansi ammuttu","ba-videorecorder-controlbar.stop":"Stop","ba-videorecorder-controlbar.stop-tooltip":"T&#xE4;&#xE4;lt&#xE4; lopettaa.","ba-videorecorder-controlbar.skip":"hyppi&#xE4;","ba-videorecorder-controlbar.skip-tooltip":"T&#xE4;&#xE4;lt&#xE4; ohittaa.","ba-videorecorder.recorder-error":"Tapahtui virhe, yrit&#xE4; my&#xF6;hemmin uudelleen. Yrit&#xE4; uudelleen klikkaamalla.","ba-videorecorder.attach-error":"Emme voineet k&#xE4;ytt&#xE4;&#xE4; Kameraliit&#xE4;nn&#xE4;t. Laitteesta riippuen ja selainta, sinun on ehk&#xE4; asennettava Flash tai k&#xE4;ytt&#xE4;&#xE4; sivun kautta SSL.","ba-videorecorder.access-forbidden":"P&#xE4;&#xE4;sy kameraan oli kielletty. Yrit&#xE4; uudelleen klikkaamalla.","ba-videorecorder.pick-covershot":"Valitse covershot.","ba-videorecorder.uploading":"lataaminen","ba-videorecorder.uploading-failed":"Lataaminen ep&#xE4;onnistui - klikkaa t&#xE4;st&#xE4; yrit&#xE4; uudelleen.","ba-videorecorder.verifying":"Tarkistetaan","ba-videorecorder.verifying-failed":"Varmentaa ep&#xE4;onnistui - klikkaa t&#xE4;st&#xE4; yrit&#xE4; uudelleen.","ba-videorecorder.rerecord-confirm":"Haluatko todella redo videon?","ba-videorecorder.video_file_too_large":"Videotiedosto on liian suuri (%s) - klikkaa t&#xE4;st&#xE4; yritt&#xE4;&#xE4; uudelleen pienemm&#xE4;ll&#xE4; videotiedosto.","ba-videorecorder.unsupported_video_type":"Lataa: %s - klikkaa t&#xE4;st&#xE4; yrit&#xE4; uudelleen.","ba-videoplayer-controlbar.exit-fullscreen-video":"exit fullscreen","ba-videoplayer-share.share":"Jaa video","ba-videorecorder-chooser.record-screen":"Tallennusn&#xE4;ytt&#xF6;","ba-videoplayer-controlbar.pause-video-disabled":"Tauko ei ole tuettu","ba-videorecorder-chooser.record-audio":"&#xC4;&#xE4;nit&#xE4; &#xE4;&#xE4;nt&#xE4;","ba-videorecorder-controlbar.stop-available-after":"Minimi tallennusaika on %d sekuntia","ba-videorecorder-controlbar.cancel":"Peruuttaa","ba-videorecorder-controlbar.cancel-tooltip":"Peruuta napsauttamalla t&#xE4;t&#xE4;.","ba-videorecorder.cancel-confirm":"Haluatko todella peruuttaa videon l&#xE4;hett&#xE4;misen?","ba-videoplayer-adslot.elapsed-time":"Elpytty aika","ba-videoplayer-adslot.volume-button":"Aseta &#xE4;&#xE4;nen voimakkuus","ba-videoplayer-adslot.volume-mute":"Mykist&#xE4; &#xE4;&#xE4;ni","ba-videoplayer-adslot.volume-unmute":"Sammuta &#xE4;&#xE4;ni","ba-videoplayer-adslot.ad-will-end-after":"Mainos p&#xE4;&#xE4;ttyy %s: n j&#xE4;lkeen","ba-videoplayer-adslot.can-skip-after":"Ohita %d j&#xE4;lkeen","ba-videoplayer-adslot.skip-ad":"Ohita mainos","ba-videorecorder.software-required":"Napsauta alla olevaa asentaaksesi / aktivoi seuraavat vaatimukset jatkaaksesi.","ba-videorecorder.software-waiting":"Odottaa, ett&#xE4; vaatimukset asennetaan / aktivoidaan. Sinun on ehk&#xE4; p&#xE4;ivitett&#xE4;v&#xE4; sivusi valmiiksi.","ba-videoplayer-controlbar.close-tracks":"Sulje CC","ba-videoplayer-controlbar.show-tracks":"N&#xE4;yt&#xE4; CC","ba-videoplayer-tracks.upload-text-tracks":"Lataa tekstitiedostoja","ba-videoplayer-tracks.select-text-track-language":"Tekstityskieli","ba-videoplayer-tracks.info-select-locale-first":"Valitse ensin locale","ba-videoplayer-tracks.select-text-track-file":"Valitse tiedosto valitsemalla","ba-videoplayer-tracks.back":"takaisin","ba-videorecorder.framerate-warning":"Videokuvan nopeus on hyvin alhainen. Suosittelemme kaikkien muiden ohjelmien ja selausv&#xE4;lilehtien sulkemista tai nopeamman tietokoneen k&#xE4;ytt&#xF6;&#xE4;.","ba-videorecorder.upload-error-duration":"L&#xE4;hetetyn videon pituus ei t&#xE4;yt&#xE4; vaatimuksia - klikkaa t&#xE4;st&#xE4; uudelleen.","ba-videorecorder.resolution-constraint-error":"Valitsemasi tiedosto ei vastaa vaadittua tarkkuutta - napsauta t&#xE4;t&#xE4; uudelleen yritt&#xE4;miseen.","ba-videorecorder.orientation-portrait-required":"Kierr&#xE4; laitetta pystyasennossa pystyasennossa.","ba-videorecorder.orientation-landscape-required":"Kierr&#xE4; laitetta ottaaksesi kuva vaakasuunnassa.","ba-imageviewer-controlbar.rerecord-image":"Toista?","ba-imageviewer-controlbar.submit-image":"Vahvistaa","ba-imageviewer-controlbar.fullscreen-image":"Sy&#xF6;t&#xE4; koko n&#xE4;ytt&#xF6;","ba-imageviewer-controlbar.exit-fullscreen-image":"Poistu koko n&#xE4;yt&#xF6;st&#xE4;","ba-imageviewer.image-error":"Tapahtui virhe. Yrit&#xE4; my&#xF6;hemmin uudelleen. Napsauta uudelleen.","ba-imagecapture-chooser.image-capture":"Kuvan kaappaus","ba-imagecapture-chooser.upload-image":"Lataa kuva","ba-imagecapture-controlbar.settings":"asetukset","ba-imagecapture-controlbar.camerahealthy":"Valaistus on hyv&#xE4;","ba-imagecapture-controlbar.cameraunhealthy":"Valaistus ei ole optimaalinen","ba-imagecapture-controlbar.record":"Kaapata","ba-imagecapture-controlbar.record-tooltip":"Napsauta t&#xE4;st&#xE4; kaapata.","ba-imagecapture-controlbar.rerecord":"tehd&#xE4; uudelleen","ba-imagecapture-controlbar.rerecord-tooltip":"Napsauta t&#xE4;t&#xE4; uudelleen.","ba-imagecapture-controlbar.cancel":"Peruuttaa","ba-imagecapture-controlbar.cancel-tooltip":"Peruuta napsauttamalla t&#xE4;t&#xE4;.","ba-audioplayer-controlbar.audio-progress":"edistyminen","ba-audioplayer-controlbar.rerecord-audio":"Toista?","ba-audioplayer-controlbar.submit-audio":"Vahvistaa","ba-audioplayer-controlbar.play-audio":"pelata","ba-audioplayer-controlbar.pause-audio":"Tauko","ba-audioplayer-controlbar.pause-audio-disabled":"Tauko ei ole tuettu","ba-audioplayer-controlbar.elapsed-time":"Elpytty aika","ba-audioplayer-controlbar.total-time":"Kokonaispituus","ba-audioplayer-controlbar.volume-button":"Aseta &#xE4;&#xE4;nen voimakkuus","ba-audioplayer-controlbar.volume-mute":"Mykist&#xE4; &#xE4;&#xE4;ni","ba-audioplayer-controlbar.volume-unmute":"Sammuta &#xE4;&#xE4;ni","ba-audioplayer-loader.tooltip":"Ladataan...","ba-audioplayer.audio-error":"Tapahtui virhe. Yrit&#xE4; my&#xF6;hemmin uudelleen. Napsauta uudelleen.","ba-audiorecorder-chooser.record-audio":"&#xC4;&#xE4;nit&#xE4; &#xE4;&#xE4;nt&#xE4;","ba-audiorecorder-chooser.upload-audio":"L&#xE4;het&#xE4; &#xE4;&#xE4;ni","ba-audiorecorder-controlbar.settings":"asetukset","ba-audiorecorder-controlbar.microphonehealthy":"&#xC4;&#xE4;ni on hyv&#xE4;","ba-audiorecorder-controlbar.microphoneunhealthy":"Ei voi her&#xE4;tt&#xE4;&#xE4; &#xE4;&#xE4;nt&#xE4;","ba-audiorecorder-controlbar.record":"Enn&#xE4;tys","ba-audiorecorder-controlbar.record-tooltip":"Napsauta t&#xE4;t&#xE4;.","ba-audiorecorder-controlbar.rerecord":"tehd&#xE4; uudelleen","ba-audiorecorder-controlbar.rerecord-tooltip":"Napsauta t&#xE4;t&#xE4; uudelleen.","ba-audiorecorder-controlbar.stop":"Stop","ba-audiorecorder-controlbar.stop-tooltip":"Napsauta t&#xE4;st&#xE4; lopettaaksesi.","ba-audiorecorder-controlbar.stop-available-after":"Minimi tallennusaika on %d sekuntia","ba-audiorecorder-controlbar.cancel":"Peruuttaa","ba-audiorecorder-controlbar.cancel-tooltip":"Peruuta napsauttamalla t&#xE4;t&#xE4;."},"language:fr":{"ba-videoplayer-playbutton.tooltip":"Cliquez ici pour voir la vid&#xE9;o.","ba-videoplayer-playbutton.rerecord":"Revoir","ba-videoplayer-playbutton.submit-video":"Confirmer vid&#xE9;o","ba-videoplayer-loader.tooltip":"T&#xE9;l&#xE9;chargez votre vid&#xE9;o...","ba-videoplayer-controlbar.change-resolution":"Modifiez la r&#xE9;solution d&#x2019;&#xE9;cran","ba-videoplayer-controlbar.video-progress":"Vid&#xE9;o en cours de chargement","ba-videoplayer-controlbar.rerecord-video":"Revoir la vid&#xE9;o?","ba-videoplayer-controlbar.submit-video":"Validez la vid&#xE9;o","ba-videoplayer-controlbar.play-video":"Lire la vid&#xE9;o","ba-videoplayer-controlbar.pause-video":"Pause vid&#xE9;o","ba-videoplayer-controlbar.elapsed-time":"Temps &#xE9;coul&#xE9; ou expir&#xE9;","ba-videoplayer-controlbar.total-time":"Dur&#xE9;e total de la vid&#xE9;o","ba-videoplayer-controlbar.fullscreen-video":"S&#xE9;lectionnez le mode plein &#xE9;cran","ba-videoplayer-controlbar.volume-button":"R&#xE9;glez ou ajustez le volume","ba-videoplayer-controlbar.volume-mute":"Silencieux","ba-videoplayer-controlbar.volume-unmute":"Silencieux d&#xE9;sactiv&#xE9;","ba-videoplayer.video-error":"Une s&#x2019;est produite, r&#xE9;essayez ult&#xE9;rieurement &#x2013; cliquez ici pour r&#xE9;essayer.","ba-videorecorder-chooser.record-video":"Enregistrez votre vid&#xE9;o","ba-videorecorder-chooser.upload-video":"T&#xE9;l&#xE9;chargez votre vid&#xE9;o","ba-videorecorder-controlbar.settings":"R&#xE9;glage ou mise &#xE0; jour","ba-videorecorder-controlbar.camerahealthy":"Bon &#xE9;clairage","ba-videorecorder-controlbar.cameraunhealthy":"L&#x2019;&#xE9;clairage n&#x2019;est pas ideal","ba-videorecorder-controlbar.microphonehealthy":"Bonne acoustique","ba-videorecorder-controlbar.microphoneunhealthy":"Acoustique n&#x27;est pas ideal","ba-videorecorder-controlbar.record":"Enregistrer","ba-videorecorder-controlbar.record-tooltip":"Cliquez ici pour enregistrez.","ba-videorecorder-controlbar.rerecord":"Revoir","ba-videorecorder-controlbar.rerecord-tooltip":"Cliquez ici pour recommencer.","ba-videorecorder-controlbar.upload-covershot":"T&#xE9;l&#xE9;chargez","ba-videorecorder-controlbar.upload-covershot-tooltip":"Cliquez ici pour t&#xE9;l&#xE9;charger une couverture personnalis&#xE9;e.","ba-videorecorder-controlbar.stop":"Arr&#xEA;ter","ba-videorecorder-controlbar.stop-tooltip":"Cliquez ici pour arr&#xEA;ter.","ba-videorecorder-controlbar.skip":"Sauter","ba-videorecorder-controlbar.skip-tooltip":"Cliquez ici pour sauter.","ba-videorecorder.recorder-error":"Une s&#x2019;est produite, r&#xE9;essayez ult&#xE9;rieurement &#x2013; cliquez ici pour r&#xE9;essayer.","ba-videorecorder.attach-error":"Nous ne pouvons pas acc&#xE9;der &#xE0; l&#x2019;interface de l&#x2019;appareil- cela d&#xE9;pend du syst&#xE8;me et de l&#x2019;explorateur. Cela peut n&#xE9;cessiter d&#x2019;installer flash ou une acc&#xE9;dez &#xE0; la page via SSL.","ba-videorecorder.access-forbidden":"L&#x2019;acc&#xE8;s &#xE0; l&#x2019;appareil est interdit. Cliquez pour recommencer.","ba-videorecorder.pick-covershot":"Choisissez une page de couverture.","ba-videorecorder.uploading":"T&#xE9;l&#xE9;chargez","ba-videorecorder.uploading-failed":"T&#xE9;l&#xE9;chargement &#xE9;chou&#xE9;- Cliquez ici pour recommencer ou r&#xE9;essayer.","ba-videorecorder.verifying":"V&#xE9;rification","ba-videorecorder.verifying-failed":"V&#xE9;rification &#xE9;chou&#xE9;e - Cliquez ici pour recommencer ou r&#xE9;essayer.","ba-videorecorder.rerecord-confirm":"Souhaitez vous r&#xE9;ellement recommencer la vid&#xE9;o?","ba-videorecorder.video_file_too_large":"La taille de votre fichier est trop grande (%s). Cliquez ici pour ajuster la taille.","ba-videorecorder.unsupported_video_type":"S&#x27;il vous pla&#xEE;t t&#xE9;l&#xE9;charger: %s - cliquez ici pour r&#xE9;essayer.","ba-videoplayer-controlbar.exit-fullscreen-video":"Quitter le mode plein &#xE9;cran","ba-videoplayer-share.share":"Partager la vid&#xE9;o","ba-videorecorder-chooser.record-screen":"&#xC9;cran d&#x27;enregistrement","ba-videoplayer-controlbar.pause-video-disabled":"Pause non prise en charge","ba-videorecorder-chooser.record-audio":"Enregistrement audio","ba-videorecorder-controlbar.stop-available-after":"La dur&#xE9;e d&#x27;enregistrement minimale est de %d secondes","ba-videorecorder-controlbar.cancel":"Annuler","ba-videorecorder-controlbar.cancel-tooltip":"Cliquez ici pour annuler","ba-videorecorder.cancel-confirm":"Voulez-vous vraiment annuler votre t&#xE9;l&#xE9;chargement de vid&#xE9;o?","ba-videoplayer-adslot.elapsed-time":"Temps &#xE9;lasped","ba-videoplayer-adslot.volume-button":"D&#xE9;finir le volume","ba-videoplayer-adslot.volume-mute":"Son muet","ba-videoplayer-adslot.volume-unmute":"Activer le son","ba-videoplayer-adslot.ad-will-end-after":"L&#x27;annonce se termine apr&#xE8;s %s","ba-videoplayer-adslot.can-skip-after":"Passer apr&#xE8;s %d","ba-videoplayer-adslot.skip-ad":"Passer la pub","ba-videorecorder.software-required":"Veuillez cliquer ci-dessous pour installer / activer les conditions suivantes afin de continuer.","ba-videorecorder.software-waiting":"Attendre que les exigences soient install&#xE9;es / activ&#xE9;es. Vous devrez peut-&#xEA;tre actualiser la page apr&#xE8;s l&#x27;ach&#xE8;vement.","ba-videoplayer-controlbar.close-tracks":"Fermer CC","ba-videoplayer-controlbar.show-tracks":"Montrer CC","ba-videoplayer-tracks.upload-text-tracks":"T&#xE9;l&#xE9;charger des fichiers texte de piste","ba-videoplayer-tracks.select-text-track-language":"Langue des sous-titres","ba-videoplayer-tracks.info-select-locale-first":"S&#xE9;lectionnez d&#x27;abord les param&#xE8;tres r&#xE9;gionaux","ba-videoplayer-tracks.select-text-track-file":"Cliquez pour s&#xE9;lectionner un fichier","ba-videoplayer-tracks.back":"arri&#xE8;re","ba-videorecorder.framerate-warning":"Le taux de trame vid&#xE9;o est tr&#xE8;s faible. Nous vous recommandons de fermer tous les autres programmes et les onglets du navigateur ou d&#x27;utiliser un ordinateur plus rapide.","ba-videorecorder.upload-error-duration":"La longueur de la vid&#xE9;o t&#xE9;l&#xE9;charg&#xE9;e ne r&#xE9;pond pas aux exigences - cliquez ici pour r&#xE9;essayer.","ba-videorecorder.resolution-constraint-error":"Le fichier que vous avez s&#xE9;lectionn&#xE9; ne correspond pas &#xE0; la r&#xE9;solution requise - cliquez ici pour r&#xE9;essayer.","ba-videorecorder.orientation-portrait-required":"Veuillez faire pivoter votre appareil pour enregistrer en mode portrait.","ba-videorecorder.orientation-landscape-required":"Veuillez faire pivoter votre appareil pour enregistrer en mode paysage.","ba-imageviewer-controlbar.rerecord-image":"Refaire?","ba-imageviewer-controlbar.submit-image":"Confirmer","ba-imageviewer-controlbar.fullscreen-image":"Passer en mode plein &#xE9;cran","ba-imageviewer-controlbar.exit-fullscreen-image":"Quitter le mode plein &#xE9;cran","ba-imageviewer.image-error":"Une erreur est survenue, veuillez r&#xE9;essayer plus tard. Cliquez pour r&#xE9;essayer.","ba-imagecapture-chooser.image-capture":"Capture d&#x27;image","ba-imagecapture-chooser.upload-image":"T&#xE9;l&#xE9;charger une image","ba-imagecapture-controlbar.settings":"Param&#xE8;tres","ba-imagecapture-controlbar.camerahealthy":"L&#x27;&#xE9;clairage est bon","ba-imagecapture-controlbar.cameraunhealthy":"L&#x27;&#xE9;clairage n&#x27;est pas optimal","ba-imagecapture-controlbar.record":"Capturer","ba-imagecapture-controlbar.record-tooltip":"Cliquez ici pour capturer.","ba-imagecapture-controlbar.rerecord":"Refaire","ba-imagecapture-controlbar.rerecord-tooltip":"Cliquez ici pour refaire","ba-imagecapture-controlbar.cancel":"Annuler","ba-imagecapture-controlbar.cancel-tooltip":"Cliquez ici pour annuler.","ba-audioplayer-controlbar.audio-progress":"Le progr&#xE8;s","ba-audioplayer-controlbar.rerecord-audio":"Refaire?","ba-audioplayer-controlbar.submit-audio":"Confirmer","ba-audioplayer-controlbar.play-audio":"Jouer","ba-audioplayer-controlbar.pause-audio":"Pause","ba-audioplayer-controlbar.pause-audio-disabled":"Pause non support&#xE9;e","ba-audioplayer-controlbar.elapsed-time":"Temps &#xE9;coul&#xE9;","ba-audioplayer-controlbar.total-time":"Longueur totale de","ba-audioplayer-controlbar.volume-button":"R&#xE9;gler le volume","ba-audioplayer-controlbar.volume-mute":"Son muet","ba-audioplayer-controlbar.volume-unmute":"Activer le son","ba-audioplayer-loader.tooltip":"Chargement...","ba-audioplayer.audio-error":"Une erreur est survenue, veuillez r&#xE9;essayer plus tard. Cliquez pour r&#xE9;essayer.","ba-audiorecorder-chooser.record-audio":"Enregistrement audio","ba-audiorecorder-chooser.upload-audio":"T&#xE9;l&#xE9;charger l&#x27;audio","ba-audiorecorder-controlbar.settings":"Param&#xE8;tres","ba-audiorecorder-controlbar.microphonehealthy":"Le son est bon","ba-audiorecorder-controlbar.microphoneunhealthy":"Impossible de capter un son","ba-audiorecorder-controlbar.record":"Record","ba-audiorecorder-controlbar.record-tooltip":"Cliquez ici pour enregistrer.","ba-audiorecorder-controlbar.rerecord":"Refaire","ba-audiorecorder-controlbar.rerecord-tooltip":"Cliquez ici pour refaire","ba-audiorecorder-controlbar.stop":"Arr&#xEA;tez","ba-audiorecorder-controlbar.stop-tooltip":"Cliquez ici pour arr&#xEA;ter.","ba-audiorecorder-controlbar.stop-available-after":"La dur&#xE9;e d&#x27;enregistrement minimale est de %d secondes","ba-audiorecorder-controlbar.cancel":"Annuler","ba-audiorecorder-controlbar.cancel-tooltip":"Cliquez ici pour annuler."},"language:hi":{"ba-videoplayer-playbutton.tooltip":"&#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x91A;&#x932;&#x93E;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;","ba-videoplayer-playbutton.rerecord":"&#x92B;&#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x92A;&#x941;&#x928;&#x903; &#x930;&#x93F;&#x915;&#x949;&#x93F;&#x921; &#x915;&#x93F;","ba-videoplayer-playbutton.submit-video":"&#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x91C;&#x92E;&#x93E; &#x915;&#x93F;","ba-videoplayer-loader.tooltip":"&#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x932;&#x94B;&#x921; &#x939;&#x94B; &#x930;&#x939;&#x93E; &#x939;&#x948; ...","ba-videoplayer-controlbar.change-resolution":"&#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; - &#x93F;&#x947;&#x938;&#x94B;&#x932;&#x941;&#x936;&#x928; &#x92C;&#x926;&#x932;&#x94B;","ba-videoplayer-controlbar.video-progress":"&#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x92C;&#x922;&#x93C; &#x93F;&#x939;&#x93E; &#x939;","ba-videoplayer-controlbar.rerecord-video":"&#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x92A;&#x941;&#x928;&#x903; &#x930;&#x93F;&#x915;&#x949;&#x93F;&#x921; &#x915;&#x93F;","ba-videoplayer-controlbar.submit-video":"&#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x91C;&#x92E;&#x93E; &#x915;&#x93F;","ba-videoplayer-controlbar.play-video":"&#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x91A;&#x932;&#x93E;&#x90F;&#x902;","ba-videoplayer-controlbar.pause-video":"&#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x930;&#x94B;&#x915;&#x947;&#x902;","ba-videoplayer-controlbar.elapsed-time":"&#x92C;&#x940;&#x924;&#x93E;  &#x906; &#x938;&#x92E;&#x92F;","ba-videoplayer-controlbar.total-time":"&#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x915;&#x940; &#x915;&#x941;&#x932; &#x932;&#x902;&#x92C;&#x93E;&#x908;","ba-videoplayer-controlbar.fullscreen-video":"&#x92A;&#x942;&#x930;&#x94D;&#x923; &#x938;&#x94D;&#x915;&#x94D;&#x930;&#x940;&#x928; &#x926;&#x930;&#x94D;&#x91C; &#x915;&#x930;&#x947;&#x902;","ba-videoplayer-controlbar.volume-button":"&#x92E;&#x93E;&#x924;&#x94D;&#x930;&#x93E; &#x938;&#x947;&#x91F; &#x915;&#x930;&#x947;&#x902;","ba-videoplayer-controlbar.volume-mute":"&#x927;&#x94D;&#x935;&#x928;&#x93F; &#x92E;&#x94D;&#x92F;&#x942;&#x91F; &#x915;&#x930;&#x947;&#x902;","ba-videoplayer-controlbar.volume-unmute":"&#x927;&#x94D;&#x935;&#x928;&#x93F; &#x915;&#x94B; &#x905;&#x928;&#x92E;&#x94D;&#x92F;&#x942;&#x91F; &#x915;&#x930;&#x947;&#x902;","ba-videoplayer.video-error":"&#x905; &#x93E;&#x924;  &#x941;&#x921;&#x93F; | &#x92A;&#x941;&#x928;&#x903;  &#x92F;&#x93E;&#x938; &#x915;&#x93F;&#x928;&#x947; &#x915;&#x947; &#x921;&#x932;&#x90F;  &#x93F;&#x915; &#x915;&#x93F;","ba-videorecorder-chooser.record-video":"&#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x930;&#x93F;&#x915;&#x949;&#x930;&#x94D;&#x921; &#x915;&#x930;&#x94B;","ba-videorecorder-chooser.upload-video":"&#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x905;&#x92A;&#x932;&#x94B;&#x921; &#x915;&#x930;&#x947;&#x902;","ba-videorecorder-controlbar.settings":"&#x938;&#x947;&#x91F;&#x93F;&#x902;&#x917;&#x94D;&#x938;","ba-videorecorder-controlbar.camerahealthy":"&#x92A;&#x94D;&#x930;&#x915;&#x93E;&#x936; &#x905;&#x91A;&#x94D;&#x91B;&#x93E; &#x939;&#x948;","ba-videorecorder-controlbar.cameraunhealthy":"&#x92A;&#x94D;&#x930;&#x915;&#x93E;&#x936; &#x907;&#x937;&#x94D;&#x91F;&#x924;&#x92E; &#x928;&#x939;&#x940;&#x902; &#x939;&#x948;","ba-videorecorder-controlbar.microphonehealthy":"&#x927;&#x94D;&#x935;&#x928;&#x93F; &#x905;&#x91A;&#x94D;&#x91B;&#x940; &#x939;&#x948;","ba-videorecorder-controlbar.microphoneunhealthy":"&#x915;&#x94B;&#x908; &#x92D;&#x940; &#x906;&#x935;&#x93E;&#x91C; &#x928;&#x939;&#x940;&#x902; &#x909;&#x920;&#x93E; &#x938;&#x915;&#x924;&#x93E;","ba-videorecorder-controlbar.record":"&#x930;&#x93F;&#x915;&#x949;&#x93F;&#x921;","ba-videorecorder-controlbar.record-tooltip":"&#x930;&#x93F;&#x915;&#x949;&#x930;&#x94D;&#x921; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;&#x964;","ba-videorecorder-controlbar.rerecord":"&#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x92A;&#x941;&#x928;&#x903; &#x930;&#x93F;&#x915;&#x949;&#x93F;&#x921; &#x915;&#x93F;","ba-videorecorder-controlbar.rerecord-tooltip":"&#x92B;&#x93F;&#x930; &#x938;&#x947; &#x915;&#x930;&#x947;&#x902; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;&#x964;","ba-videorecorder-controlbar.upload-covershot":"&#x905;&#x92A;&#x932;&#x94B;&#x921;","ba-videorecorder-controlbar.upload-covershot-tooltip":"&#x915;&#x938;&#x94D;&#x91F;&#x92E; &#x915;&#x935;&#x930; &#x936;&#x949;&#x91F; &#x905;&#x92A;&#x932;&#x94B;&#x921; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;","ba-videorecorder-controlbar.stop":"&#x930;&#x941;&#x915;&#x947;&#x902;","ba-videorecorder-controlbar.stop-tooltip":"&#x930;&#x94B;&#x915;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;","ba-videorecorder-controlbar.skip":"&#x91B;&#x94B;&#x921;&#x93C;&#x947;&#x902;","ba-videorecorder-controlbar.skip-tooltip":"&#x91B;&#x94B;&#x921;&#x93C;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;&#x964;","ba-videorecorder.recorder-error":"&#x90F;&#x915; &#x924;&#x94D;&#x930;&#x941;&#x91F;&#x93F; &#x918;&#x91F;&#x93F;&#x924; &#x939;&#x941;&#x908; &#x939;&#x948;, &#x915;&#x943;&#x92A;&#x92F;&#x93E; &#x92C;&#x93E;&#x926; &#x92E;&#x947;&#x902; &#x92A;&#x941;&#x928;: &#x92A;&#x94D;&#x930;&#x92F;&#x93E;&#x938; &#x915;&#x930;&#x947;&#x902;&#x964; &#x92A;&#x941;&#x928;&#x903; &#x92A;&#x94D;&#x930;&#x92F;&#x93E;&#x938; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;","ba-videorecorder.attach-error":"&#x939;&#x92E; &#x915;&#x948;&#x92E;&#x930;&#x947; &#x915;&#x947; &#x907;&#x902;&#x91F;&#x930;&#x92B;&#x93C;&#x947;&#x938; &#x924;&#x915; &#x92A;&#x939;&#x941;&#x902;&#x91A; &#x928;&#x939;&#x940;&#x902; &#x938;&#x915;&#x947;&#x964; &#x921;&#x93F;&#x935;&#x93E;&#x907;&#x938; &#x914;&#x930; &#x92C;&#x94D;&#x930;&#x93E;&#x909;&#x91C;&#x93C;&#x930; &#x915;&#x947; &#x906;&#x927;&#x93E;&#x930; &#x92A;&#x930;, &#x906;&#x92A;&#x915;&#x94B; &#x92B;&#x94D;&#x932;&#x948;&#x936; &#x907;&#x902;&#x938;&#x94D;&#x91F;&#x949;&#x932; &#x915;&#x930;&#x928;&#x93E; &#x92F;&#x93E; &#x92A;&#x943;&#x937;&#x94D;&#x920; &#x92A;&#x930; &#x90F;&#x938;&#x90F;&#x938;&#x90F;&#x932; &#x915;&#x947; &#x92E;&#x93E;&#x927;&#x94D;&#x92F;&#x92E; &#x938;&#x947; &#x92A;&#x94D;&#x930;&#x935;&#x947;&#x936; &#x915;&#x930;&#x928;&#x93E; &#x92A;&#x921;&#x93C; &#x938;&#x915;&#x924;&#x93E; &#x939;&#x948;","ba-videorecorder.access-forbidden":"&#x915;&#x948;&#x92E;&#x930;&#x947; &#x924;&#x915; &#x92A;&#x939;&#x941;&#x902;&#x91A; &#x92E;&#x928;&#x93E;&#x908; &#x917;&#x908; &#x925;&#x940; &#x92A;&#x941;&#x928;&#x903; &#x92A;&#x94D;&#x930;&#x92F;&#x93E;&#x938; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;","ba-videorecorder.pick-covershot":"&#x936;&#x949;&#x93F;&#x921;&#x915;&#x93F; &#x915;&#x93E; &#x91A;&#x941;&#x928;&#x93E;&#x935; &#x915;&#x940;&#x921;&#x91C;&#x90F;","ba-videorecorder.uploading":"&#x905;&#x92A;&#x932;&#x94B;&#x921; &#x939;&#x94B; &#x930;&#x939;&#x93E; &#x939;&#x948;","ba-videorecorder.uploading-failed":"&#x905;&#x92A;&#x932;&#x94B;&#x921; &#x915;&#x930;&#x928;&#x93E; &#x935;&#x93F;&#x92B;&#x932; - &#x92A;&#x941;&#x928;&#x903; &#x92A;&#x94D;&#x930;&#x92F;&#x93E;&#x938; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;&#x964;","ba-videorecorder.verifying":"&#x91C;&#x93E; &#x91A; &#x91C;&#x93E;&#x93F;&#x940; &#x939;&#x948;","ba-videorecorder.verifying-failed":"&#x938;&#x924;&#x94D;&#x92F;&#x93E;&#x92A;&#x928; &#x935;&#x93F;&#x92B;&#x932; - &#x92A;&#x941;&#x928;&#x903; &#x92A;&#x94D;&#x930;&#x92F;&#x93E;&#x938; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;&#x964;","ba-videorecorder.rerecord-confirm":"&#x915;&#x94D;&#x92F;&#x93E; &#x906;&#x92A; &#x935;&#x93E;&#x938;&#x94D;&#x924;&#x935; &#x92E;&#x947;&#x902; &#x905;&#x92A;&#x928;&#x947; &#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x915;&#x94B; &#x92B;&#x93F;&#x930; &#x938;&#x947; &#x915;&#x930;&#x928;&#x93E; &#x91A;&#x93E;&#x939;&#x924;&#x947; &#x939;&#x948;&#x902;?","ba-videorecorder.video_file_too_large":"&#x906;&#x92A;&#x915;&#x940; &#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x92B;&#x93C;&#x93E;&#x907;&#x932; &#x92C;&#x939;&#x941;&#x924; &#x92C;&#x921;&#x93C;&#x940; &#x939;&#x948; ( %s) - &#x90F;&#x915; &#x91B;&#x94B;&#x91F;&#x947; &#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x92B;&#x93C;&#x93E;&#x907;&#x932; &#x915;&#x947; &#x938;&#x93E;&#x925; &#x92B;&#x93F;&#x930; &#x938;&#x947; &#x92A;&#x94D;&#x930;&#x92F;&#x93E;&#x938; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;","ba-videorecorder.unsupported_video_type":"&#x915;&#x943;&#x92A;&#x92F;&#x93E; &#x905;&#x92A;&#x932;&#x94B;&#x921; &#x915;&#x930;&#x947;&#x902;: %s - &#x92A;&#x941;&#x928;&#x903; &#x92A;&#x94D;&#x930;&#x92F;&#x93E;&#x938; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;&#x964;","ba-videoplayer-controlbar.exit-fullscreen-video":"&#x92A;&#x942;&#x930;&#x94D;&#x923; &#x938;&#x94D;&#x915;&#x94D;&#x930;&#x940;&#x928; &#x938;&#x947; &#x92C;&#x93E;&#x939;&#x930; &#x928;&#x93F;&#x915;&#x932;&#x947;&#x902;","ba-videoplayer-share.share":"&#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x936;&#x947;&#x92F;&#x930; &#x915;&#x930;&#x947;&#x902;","ba-videorecorder-chooser.record-screen":"&#x930;&#x93F;&#x915;&#x949;&#x930;&#x94D;&#x921; &#x938;&#x94D;&#x915;&#x94D;&#x930;&#x940;&#x928;","ba-videoplayer-controlbar.pause-video-disabled":"&#x930;&#x94B;&#x915;&#x947;&#x902; &#x938;&#x92E;&#x930;&#x94D;&#x925;&#x93F;&#x924; &#x928;&#x939;&#x940;&#x902; &#x939;&#x948;","ba-videorecorder-chooser.record-audio":"&#x927;&#x94D;&#x935;&#x928;&#x93F; &#x930;&#x93F;&#x915;&#x949;&#x930;&#x94D;&#x921; &#x915;&#x930;&#x947;&#x902;","ba-videorecorder-controlbar.stop-available-after":"&#x928;&#x94D;&#x92F;&#x942;&#x928;&#x924;&#x92E; &#x930;&#x93F;&#x915;&#x949;&#x930;&#x94D;&#x921;&#x93F;&#x902;&#x917; &#x938;&#x92E;&#x92F; %d &#x938;&#x947;&#x915;&#x902;&#x921; &#x939;&#x948;","ba-videorecorder-controlbar.cancel":"&#x930;&#x926;&#x94D;&#x926; &#x915;&#x930;&#x928;&#x93E;","ba-videorecorder-controlbar.cancel-tooltip":"&#x930;&#x926;&#x94D;&#x926; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;","ba-videorecorder.cancel-confirm":"&#x915;&#x94D;&#x92F;&#x93E; &#x906;&#x92A; &#x935;&#x93E;&#x915;&#x908; &#x905;&#x92A;&#x928;&#x93E; &#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x905;&#x92A;&#x932;&#x94B;&#x921; &#x930;&#x926;&#x94D;&#x926; &#x915;&#x930;&#x928;&#x93E; &#x91A;&#x93E;&#x939;&#x924;&#x947; &#x939;&#x948;&#x902;?","ba-videoplayer-adslot.elapsed-time":"Elasped &#x938;&#x92E;&#x92F;","ba-videoplayer-adslot.volume-button":"&#x92E;&#x93E;&#x924;&#x94D;&#x930;&#x93E; &#x938;&#x947;&#x91F; &#x915;&#x930;&#x947;&#x902;","ba-videoplayer-adslot.volume-mute":"&#x927;&#x94D;&#x935;&#x928;&#x93F; &#x92E;&#x94D;&#x92F;&#x942;&#x91F; &#x915;&#x930;&#x947;&#x902;","ba-videoplayer-adslot.volume-unmute":"&#x927;&#x94D;&#x935;&#x928;&#x93F; &#x915;&#x94B; &#x905;&#x928;&#x92E;&#x94D;&#x92F;&#x942;&#x91F; &#x915;&#x930;&#x947;&#x902;","ba-videoplayer-adslot.ad-will-end-after":"&#x935;&#x93F;&#x91C;&#x94D;&#x91E;&#x93E;&#x92A;&#x928; %s &#x915;&#x947; &#x92C;&#x93E;&#x926; &#x938;&#x92E;&#x93E;&#x92A;&#x94D;&#x924; &#x939;&#x94B; &#x91C;&#x93E;&#x90F;&#x917;&#x93E;","ba-videoplayer-adslot.can-skip-after":" %D &#x915;&#x947; &#x92C;&#x93E;&#x926; &#x91B;&#x94B;&#x921;&#x93C;&#x947;&#x902;","ba-videoplayer-adslot.skip-ad":"&#x935;&#x93F;&#x91C;&#x94D;&#x91E;&#x93E;&#x92A;&#x928; &#x938;&#x947; &#x906;&#x917;&#x947; &#x92C;&#x922;&#x93C;&#x947;&#x902;","ba-videorecorder.software-required":"&#x906;&#x917;&#x947; &#x92C;&#x922;&#x93C;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x915;&#x943;&#x92A;&#x92F;&#x93E; &#x928;&#x93F;&#x92E;&#x94D;&#x928;&#x932;&#x93F;&#x916;&#x93F;&#x924; &#x906;&#x935;&#x936;&#x94D;&#x92F;&#x915;&#x924;&#x93E;&#x913;&#x902; &#x915;&#x94B; &#x938;&#x94D;&#x925;&#x93E;&#x92A;&#x93F;&#x924; / &#x938;&#x915;&#x94D;&#x930;&#x93F;&#x92F; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x928;&#x940;&#x91A;&#x947; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;&#x964;","ba-videorecorder.software-waiting":"&#x906;&#x935;&#x936;&#x94D;&#x92F;&#x915;&#x924;&#x93E;&#x913;&#x902; &#x915;&#x94B; &#x938;&#x94D;&#x925;&#x93E;&#x92A;&#x93F;&#x924; / &#x938;&#x915;&#x94D;&#x930;&#x93F;&#x92F; &#x915;&#x930;&#x928;&#x947; &#x915;&#x940; &#x92A;&#x94D;&#x930;&#x924;&#x940;&#x915;&#x94D;&#x937;&#x93E; &#x915;&#x930; &#x930;&#x939;&#x93E; &#x939;&#x948; &#x906;&#x92A;&#x915;&#x94B; &#x92A;&#x942;&#x930;&#x93E; &#x939;&#x94B;&#x928;&#x947; &#x915;&#x947; &#x92C;&#x93E;&#x926; &#x92A;&#x943;&#x937;&#x94D;&#x920; &#x915;&#x94B; &#x930;&#x940;&#x92B;&#x93C;&#x94D;&#x930;&#x947;&#x936; &#x915;&#x930;&#x928;&#x93E; &#x92A;&#x921;&#x93C; &#x938;&#x915;&#x924;&#x93E; &#x939;&#x948;","ba-videoplayer-controlbar.close-tracks":"&#x938;&#x940;&#x938;&#x940; &#x92C;&#x902;&#x926; &#x915;&#x930;&#x947;&#x902;","ba-videoplayer-controlbar.show-tracks":"&#x938;&#x940;&#x938;&#x940; &#x926;&#x93F;&#x916;&#x93E;&#x913;","ba-videoplayer-tracks.upload-text-tracks":"&#x91F;&#x94D;&#x930;&#x948;&#x915; &#x91F;&#x947;&#x915;&#x94D;&#x938;&#x94D;&#x91F; &#x92B;&#x93E;&#x907;&#x932; &#x905;&#x92A;&#x932;&#x94B;&#x921; &#x915;&#x930;&#x947;&#x902;","ba-videoplayer-tracks.select-text-track-language":"&#x909;&#x92A;&#x936;&#x940;&#x930;&#x94D;&#x937;&#x915; &#x92D;&#x93E;&#x937;&#x93E;","ba-videoplayer-tracks.info-select-locale-first":"&#x92A;&#x939;&#x932;&#x947; &#x932;&#x94B;&#x915;&#x947;&#x932; &#x915;&#x93E; &#x91A;&#x92F;&#x928; &#x915;&#x930;&#x947;&#x902;","ba-videoplayer-tracks.select-text-track-file":"&#x92B;&#x93C;&#x93E;&#x907;&#x932; &#x915;&#x93E; &#x91A;&#x92F;&#x928; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;","ba-videoplayer-tracks.back":"&#x935;&#x93E;&#x92A;&#x938;","ba-videorecorder.framerate-warning":"&#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x92B;&#x94D;&#x930;&#x947;&#x92E; &#x926;&#x930; &#x92C;&#x939;&#x941;&#x924; &#x915;&#x92E; &#x939;&#x948;&#x964; &#x939;&#x92E; &#x938;&#x92D;&#x940; &#x905;&#x928;&#x94D;&#x92F; &#x915;&#x93E;&#x930;&#x94D;&#x92F;&#x915;&#x94D;&#x930;&#x92E;&#x94B;&#x902; &#x914;&#x930; &#x92C;&#x94D;&#x930;&#x93E;&#x909;&#x91C;&#x93C;&#x930; &#x91F;&#x948;&#x92C; &#x915;&#x94B; &#x92C;&#x902;&#x926; &#x915;&#x930;&#x928;&#x947; &#x92F;&#x93E; &#x90F;&#x915; &#x924;&#x947;&#x91C;&#x93C; &#x915;&#x902;&#x92A;&#x94D;&#x92F;&#x942;&#x91F;&#x930; &#x915;&#x93E; &#x909;&#x92A;&#x92F;&#x94B;&#x917; &#x915;&#x930;&#x928;&#x947; &#x915;&#x940; &#x938;&#x932;&#x93E;&#x939; &#x926;&#x947;&#x924;&#x947; &#x939;&#x948;&#x902;&#x964;","ba-videorecorder.upload-error-duration":"&#x905;&#x92A;&#x932;&#x94B;&#x921; &#x915;&#x93F;&#x90F; &#x917;&#x90F; &#x935;&#x940;&#x921;&#x93F;&#x92F;&#x94B; &#x915;&#x940; &#x932;&#x902;&#x92C;&#x93E;&#x908; &#x906;&#x935;&#x936;&#x94D;&#x92F;&#x915;&#x924;&#x93E;&#x913;&#x902; &#x915;&#x94B; &#x92A;&#x942;&#x930;&#x93E; &#x928;&#x939;&#x940;&#x902; &#x915;&#x930;&#x924;&#x940; &#x939;&#x948; - &#x92A;&#x941;&#x928;&#x903; &#x92A;&#x94D;&#x930;&#x92F;&#x93E;&#x938; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;&#x964;","ba-videorecorder.resolution-constraint-error":"&#x906;&#x92A;&#x915;&#x947; &#x926;&#x94D;&#x935;&#x93E;&#x930;&#x93E; &#x91A;&#x941;&#x928;&#x940; &#x917;&#x908; &#x92B;&#x93C;&#x93E;&#x907;&#x932; &#x906;&#x935;&#x936;&#x94D;&#x92F;&#x915; &#x938;&#x902;&#x915;&#x932;&#x94D;&#x92A; &#x938;&#x947; &#x92E;&#x947;&#x932; &#x928;&#x939;&#x940;&#x902; &#x916;&#x93E;&#x924;&#x940; &#x939;&#x948; - &#x92A;&#x941;&#x928;&#x903; &#x92A;&#x94D;&#x930;&#x92F;&#x93E;&#x938; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;&#x964;","ba-videorecorder.orientation-portrait-required":"&#x92A;&#x94B;&#x930;&#x94D;&#x91F;&#x94D;&#x930;&#x947;&#x91F; &#x92E;&#x94B;&#x921; &#x92E;&#x947;&#x902; &#x930;&#x93F;&#x915;&#x949;&#x930;&#x94D;&#x921; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x915;&#x943;&#x92A;&#x92F;&#x93E; &#x905;&#x92A;&#x928;&#x947; &#x921;&#x93F;&#x935;&#x93E;&#x907;&#x938; &#x915;&#x94B; &#x918;&#x941;&#x92E;&#x93E;&#x90F;&#x902;&#x964;","ba-videorecorder.orientation-landscape-required":"&#x932;&#x948;&#x902;&#x921;&#x938;&#x94D;&#x915;&#x947;&#x92A; &#x92E;&#x94B;&#x921; &#x92E;&#x947;&#x902; &#x930;&#x93F;&#x915;&#x949;&#x930;&#x94D;&#x921; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x915;&#x943;&#x92A;&#x92F;&#x93E; &#x905;&#x92A;&#x928;&#x947; &#x921;&#x93F;&#x935;&#x93E;&#x907;&#x938; &#x915;&#x94B; &#x918;&#x941;&#x92E;&#x93E;&#x90F;&#x902;&#x964;","ba-imageviewer-controlbar.rerecord-image":"&#x92B;&#x93F;&#x930; &#x938;&#x947; &#x915;&#x930;&#x947;&#x902;?","ba-imageviewer-controlbar.submit-image":"&#x915;&#x940; &#x92A;&#x941;&#x937;&#x94D;&#x91F;&#x93F; &#x915;&#x930;&#x947;&#x902;","ba-imageviewer-controlbar.fullscreen-image":"&#x92A;&#x942;&#x930;&#x94D;&#x923; &#x938;&#x94D;&#x915;&#x94D;&#x930;&#x940;&#x928; &#x926;&#x930;&#x94D;&#x91C; &#x915;&#x930;&#x947;&#x902;","ba-imageviewer-controlbar.exit-fullscreen-image":"&#x92A;&#x942;&#x930;&#x94D;&#x923; &#x938;&#x94D;&#x915;&#x94D;&#x930;&#x940;&#x928; &#x938;&#x947; &#x92C;&#x93E;&#x939;&#x930; &#x928;&#x93F;&#x915;&#x932;&#x947;&#x902;","ba-imageviewer.image-error":"&#x90F;&#x915; &#x924;&#x94D;&#x930;&#x941;&#x91F;&#x93F; &#x918;&#x91F;&#x93F;&#x924; &#x939;&#x941;&#x908; &#x939;&#x948;, &#x915;&#x943;&#x92A;&#x92F;&#x93E; &#x92C;&#x93E;&#x926; &#x92E;&#x947;&#x902; &#x92A;&#x941;&#x928;: &#x92A;&#x94D;&#x930;&#x92F;&#x93E;&#x938; &#x915;&#x930;&#x947;&#x902;&#x964; &#x92A;&#x941;&#x928;&#x903; &#x92A;&#x94D;&#x930;&#x92F;&#x93E;&#x938; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;&#x964;","ba-imagecapture-chooser.image-capture":"&#x91B;&#x935;&#x93F; &#x915;&#x948;&#x92A;&#x94D;&#x91A;&#x930; &#x915;&#x930;&#x947;&#x902;","ba-imagecapture-chooser.upload-image":"&#x924;&#x938;&#x94D;&#x935;&#x940;&#x930; &#x921;&#x93E;&#x932;&#x93F;&#x92F;&#x947;","ba-imagecapture-controlbar.settings":"&#x938;&#x947;&#x91F;&#x93F;&#x902;&#x917;&#x94D;&#x938;","ba-imagecapture-controlbar.camerahealthy":"&#x92A;&#x94D;&#x930;&#x915;&#x93E;&#x936; &#x905;&#x91A;&#x94D;&#x91B;&#x93E; &#x939;&#x948;","ba-imagecapture-controlbar.cameraunhealthy":"&#x92A;&#x94D;&#x930;&#x915;&#x93E;&#x936; &#x907;&#x937;&#x94D;&#x91F;&#x924;&#x92E; &#x928;&#x939;&#x940;&#x902; &#x939;&#x948;","ba-imagecapture-controlbar.record":"&#x915;&#x92C;&#x94D;&#x91C;&#x93E;","ba-imagecapture-controlbar.record-tooltip":"&#x915;&#x92C;&#x94D;&#x91C;&#x93E; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;&#x964;","ba-imagecapture-controlbar.rerecord":"&#x92B;&#x93F;&#x930; &#x938;&#x947; &#x915;&#x930;&#x928;&#x93E;","ba-imagecapture-controlbar.rerecord-tooltip":"&#x92B;&#x93F;&#x930; &#x938;&#x947; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;&#x964;","ba-imagecapture-controlbar.cancel":"&#x930;&#x926;&#x94D;&#x926; &#x915;&#x930;&#x928;&#x93E;","ba-imagecapture-controlbar.cancel-tooltip":"&#x930;&#x926;&#x94D;&#x926; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;&#x964;","ba-audioplayer-controlbar.audio-progress":"&#x92A;&#x94D;&#x930;&#x917;&#x924;&#x93F;","ba-audioplayer-controlbar.rerecord-audio":"&#x92B;&#x93F;&#x930; &#x938;&#x947; &#x915;&#x930;&#x947;&#x902;?","ba-audioplayer-controlbar.submit-audio":"&#x915;&#x940; &#x92A;&#x941;&#x937;&#x94D;&#x91F;&#x93F; &#x915;&#x930;&#x947;&#x902;","ba-audioplayer-controlbar.play-audio":"&#x92A;&#x94D;&#x932;&#x947;","ba-audioplayer-controlbar.pause-audio":"&#x920;&#x939;&#x930;&#x93E;&#x935;","ba-audioplayer-controlbar.pause-audio-disabled":"&#x930;&#x94B;&#x915;&#x947;&#x902; &#x938;&#x92E;&#x930;&#x94D;&#x925;&#x93F;&#x924; &#x928;&#x939;&#x940;&#x902; &#x939;&#x948;","ba-audioplayer-controlbar.elapsed-time":"Elasped &#x938;&#x92E;&#x92F;","ba-audioplayer-controlbar.total-time":"&#x915;&#x940; &#x915;&#x941;&#x932; &#x932;&#x902;&#x92C;&#x93E;&#x908;","ba-audioplayer-controlbar.volume-button":"&#x935;&#x949;&#x932;&#x94D;&#x92F;&#x942;&#x92E; &#x938;&#x947;&#x91F; &#x915;&#x930;&#x947;&#x902;","ba-audioplayer-controlbar.volume-mute":"&#x927;&#x94D;&#x935;&#x928;&#x93F; &#x92E;&#x94D;&#x92F;&#x942;&#x91F; &#x915;&#x930;&#x947;&#x902;","ba-audioplayer-controlbar.volume-unmute":"&#x927;&#x94D;&#x935;&#x928;&#x93F; &#x905;&#x928;&#x92E;&#x94D;&#x92F;&#x942;&#x91F; &#x915;&#x930;&#x947;&#x902;","ba-audioplayer-loader.tooltip":"&#x932;&#x94B;&#x921; &#x939;&#x94B; &#x930;&#x939;&#x93E; &#x939;&#x948;...","ba-audioplayer.audio-error":"&#x90F;&#x915; &#x924;&#x94D;&#x930;&#x941;&#x91F;&#x93F; &#x918;&#x91F;&#x93F;&#x924; &#x939;&#x941;&#x908; &#x939;&#x948;, &#x915;&#x943;&#x92A;&#x92F;&#x93E; &#x92C;&#x93E;&#x926; &#x92E;&#x947;&#x902; &#x92A;&#x941;&#x928;: &#x92A;&#x94D;&#x930;&#x92F;&#x93E;&#x938; &#x915;&#x930;&#x947;&#x902;&#x964; &#x92A;&#x941;&#x928;&#x903; &#x92A;&#x94D;&#x930;&#x92F;&#x93E;&#x938; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;&#x964;","ba-audiorecorder-chooser.record-audio":"&#x927;&#x94D;&#x935;&#x928;&#x93F; &#x930;&#x93F;&#x915;&#x949;&#x930;&#x94D;&#x921; &#x915;&#x930;&#x947;&#x902;","ba-audiorecorder-chooser.upload-audio":"&#x911;&#x921;&#x93F;&#x92F;&#x94B; &#x905;&#x92A;&#x932;&#x94B;&#x921; &#x915;&#x930;&#x947;&#x902;","ba-audiorecorder-controlbar.settings":"&#x938;&#x947;&#x91F;&#x93F;&#x902;&#x917;&#x94D;&#x938;","ba-audiorecorder-controlbar.microphonehealthy":"&#x927;&#x94D;&#x935;&#x928;&#x93F; &#x905;&#x91A;&#x94D;&#x91B;&#x940; &#x939;&#x948;&#x902;","ba-audiorecorder-controlbar.microphoneunhealthy":"&#x915;&#x94B;&#x908; &#x906;&#x935;&#x93E;&#x91C; &#x928;&#x939;&#x940;&#x902; &#x909;&#x920;&#x93E; &#x938;&#x915;&#x924;&#x947; &#x939;&#x948;&#x902;","ba-audiorecorder-controlbar.record":"&#x905;&#x92D;&#x93F;&#x932;&#x947;&#x916;","ba-audiorecorder-controlbar.record-tooltip":"&#x930;&#x93F;&#x915;&#x949;&#x930;&#x94D;&#x921; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;&#x964;","ba-audiorecorder-controlbar.rerecord":"&#x92B;&#x93F;&#x930; &#x938;&#x947; &#x915;&#x930;&#x928;&#x93E;","ba-audiorecorder-controlbar.rerecord-tooltip":"&#x92B;&#x93F;&#x930; &#x938;&#x947; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;&#x964;","ba-audiorecorder-controlbar.stop":"&#x930;&#x941;&#x915;&#x947;&#x902;","ba-audiorecorder-controlbar.stop-tooltip":"&#x930;&#x94B;&#x915;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;&#x964;","ba-audiorecorder-controlbar.stop-available-after":"&#x928;&#x94D;&#x92F;&#x942;&#x928;&#x924;&#x92E; &#x930;&#x93F;&#x915;&#x949;&#x930;&#x94D;&#x921;&#x93F;&#x902;&#x917; &#x938;&#x92E;&#x92F; %d &#x938;&#x947;&#x915;&#x947;&#x902;&#x921; &#x939;&#x948;","ba-audiorecorder-controlbar.cancel":"&#x930;&#x926;&#x94D;&#x926; &#x915;&#x930;&#x928;&#x93E;","ba-audiorecorder-controlbar.cancel-tooltip":"&#x930;&#x926;&#x94D;&#x926; &#x915;&#x930;&#x928;&#x947; &#x915;&#x947; &#x932;&#x93F;&#x90F; &#x92F;&#x939;&#x93E;&#x902; &#x915;&#x94D;&#x932;&#x93F;&#x915; &#x915;&#x930;&#x947;&#x902;&#x964;"},"language:hr":{"ba-videoplayer-playbutton.tooltip":"Kliknite za reprodukciju video zapisa.","ba-videoplayer-playbutton.rerecord":"preurediti","ba-videoplayer-playbutton.submit-video":"Potvrda videa","ba-videoplayer-loader.tooltip":"U&#x10D;itavanje videa ...","ba-videoplayer-controlbar.change-resolution":"Promjena razlu&#x10D;ivosti","ba-videoplayer-controlbar.video-progress":"napredak Video","ba-videoplayer-controlbar.rerecord-video":"Ponovi video?","ba-videoplayer-controlbar.submit-video":"Potvrda videa","ba-videoplayer-controlbar.play-video":"Reprodukcija videozapisa","ba-videoplayer-controlbar.pause-video":"Pauza Video","ba-videoplayer-controlbar.elapsed-time":"Elasped vrijeme","ba-videoplayer-controlbar.total-time":"Ukupna du&#x17E;ina videa","ba-videoplayer-controlbar.fullscreen-video":"Idi na puni zaslon","ba-videoplayer-controlbar.volume-button":"Set volumen","ba-videoplayer-controlbar.volume-mute":"Bez zvuka","ba-videoplayer-controlbar.volume-unmute":"Vrati zvuk","ba-videoplayer.video-error":"Do&#x161;lo je do pogre&#x161;ke. Molimo poku&#x161;ajte ponovno kasnije. Kliknite za ponovni poku&#x161;aj.","ba-videorecorder-chooser.record-video":"Snimanje videa","ba-videorecorder-chooser.upload-video":"Dodaj video","ba-videorecorder-controlbar.settings":"Postavke","ba-videorecorder-controlbar.camerahealthy":"Rasvjeta je dobra","ba-videorecorder-controlbar.cameraunhealthy":"Rasvjeta nije optimalno","ba-videorecorder-controlbar.microphonehealthy":"Zvuk je dobar","ba-videorecorder-controlbar.microphoneunhealthy":"ne mo&#x17E;e podi&#x107;i bilo koji zvuk","ba-videorecorder-controlbar.record":"Snimiti","ba-videorecorder-controlbar.record-tooltip":"Kliknite ovdje za snimanje.","ba-videorecorder-controlbar.rerecord":"preurediti","ba-videorecorder-controlbar.rerecord-tooltip":"Kliknite ovdje ponoviti.","ba-videorecorder-controlbar.upload-covershot":"Postavi","ba-videorecorder-controlbar.upload-covershot-tooltip":"Kliknite ovdje kako biste poslali prilago&#x111;ene cover metak","ba-videorecorder-controlbar.stop":"Stop","ba-videorecorder-controlbar.stop-tooltip":"Kliknite ovdje da se zaustavi.","ba-videorecorder-controlbar.skip":"Presko&#x10D;iti","ba-videorecorder-controlbar.skip-tooltip":"Kliknite ovdje presko&#x10D;iti.","ba-videorecorder.recorder-error":"Do&#x161;lo je do pogre&#x161;ke. Molimo poku&#x161;ajte ponovno kasnije. Kliknite za ponovni poku&#x161;aj.","ba-videorecorder.attach-error":"Nismo mogli pristupiti su&#x10D;elju fotoaparata. Ovisno o ure&#x111;aju i preglednika, mo&#x17E;da &#x107;ete morati instalirati Flash ili pristupiti stranici putem SSL-a.","ba-videorecorder.access-forbidden":"Pristup kameri je zabranjeno. Kliknite za ponovni poku&#x161;aj.","ba-videorecorder.pick-covershot":"Izaberite covershot.","ba-videorecorder.uploading":"Prijenos","ba-videorecorder.uploading-failed":"Prijenos nije uspio - kliknite ovdje za ponovni poku&#x161;aj.","ba-videorecorder.verifying":"Potvr&#x111;ivanje","ba-videorecorder.verifying-failed":"Potvr&#x111;ivanje nije uspjelo - kliknite ovdje za ponovni poku&#x161;aj.","ba-videorecorder.rerecord-confirm":"Da li zaista &#x17E;elite ponoviti svoj video?","ba-videorecorder.video_file_too_large":"Va&#x161; video datoteka je prevelika (%s) - kliknite ovdje kako bi poku&#x161;ali ponovno s manjim video datoteka.","ba-videorecorder.unsupported_video_type":"Prenesite: %s - kliknite ovdje za ponovni poku&#x161;aj.","ba-videoplayer-controlbar.exit-fullscreen-video":"Iza&#x111;ite iz cijelog zaslona","ba-videoplayer-share.share":"Dijeljenje videozapisa","ba-videorecorder-chooser.record-screen":"Zaslon za snimanje","ba-videoplayer-controlbar.pause-video-disabled":"Pauza nije podr&#x17E;ana","ba-videorecorder-chooser.record-audio":"Snimanje zvuka","ba-videorecorder-controlbar.stop-available-after":"Minimalno vrijeme snimanja je %d sekundi","ba-videorecorder-controlbar.cancel":"Otkazati","ba-videorecorder-controlbar.cancel-tooltip":"Kliknite ovdje kako biste odustali.","ba-videorecorder.cancel-confirm":"&#x17D;elite li zaista odustati od prijenosa videozapisa?","ba-videoplayer-adslot.elapsed-time":"Otpremljeno vrijeme","ba-videoplayer-adslot.volume-button":"Postavite glasno&#x107;u","ba-videoplayer-adslot.volume-mute":"Isklju&#x10D;ite zvuk","ba-videoplayer-adslot.volume-unmute":"Uklju&#x10D;i zvuk","ba-videoplayer-adslot.ad-will-end-after":"Oglas zavr&#x161;ava nakon %s","ba-videoplayer-adslot.can-skip-after":"Presko&#x10D;i nakon %d","ba-videoplayer-adslot.skip-ad":"Presko&#x10D;ite oglas","ba-videorecorder.software-required":"Kliknite dolje da biste instalirali / aktivirali sljede&#x107;e uvjete kako biste nastavili.","ba-videorecorder.software-waiting":"&#x10C;eka se postavljanje / aktiviranje zahtjeva. Mo&#x17E;da &#x107;ete morati osvje&#x17E;iti stranicu nakon zavr&#x161;etka.","ba-videoplayer-controlbar.close-tracks":"Zatvori CC","ba-videoplayer-controlbar.show-tracks":"Prika&#x17E;i CC","ba-videoplayer-tracks.upload-text-tracks":"Prenesite tekstne datoteke zapisa","ba-videoplayer-tracks.select-text-track-language":"Jezik podnaslova","ba-videoplayer-tracks.info-select-locale-first":"Prvo odaberite mjesto","ba-videoplayer-tracks.select-text-track-file":"Kliknite za odabir datoteke","ba-videoplayer-tracks.back":"le&#x111;a","ba-videorecorder.framerate-warning":"Brzina videozapisa je vrlo niska. Preporu&#x10D;ujemo zatvaranje svih ostalih programa i kartica preglednika ili kori&#x161;tenje br&#x17E;eg ra&#x10D;unala.","ba-videorecorder.upload-error-duration":"Duljina prijenosa videozapisa ne zadovoljava uvjete - kliknite ovdje kako biste poku&#x161;ali ponovno.","ba-videorecorder.resolution-constraint-error":"Odabrana datoteka ne odgovara potrebnoj rezoluciji - kliknite ovdje kako biste poku&#x161;ali ponovno.","ba-videorecorder.orientation-portrait-required":"Zakrenite ure&#x111;aj za snimanje u portretnom na&#x10D;inu rada.","ba-videorecorder.orientation-landscape-required":"Zakrenite ure&#x111;aj da snimate u pejza&#x17E;nom na&#x10D;inu rada.","ba-imageviewer-controlbar.rerecord-image":"Ponovi?","ba-imageviewer-controlbar.submit-image":"potvrditi","ba-imageviewer-controlbar.fullscreen-image":"Unesite puni zaslon","ba-imageviewer-controlbar.exit-fullscreen-image":"Izlaz iz cijelog zaslona","ba-imageviewer.image-error":"Do&#x161;lo je do pogre&#x161;ke. Molimo poku&#x161;ajte ponovno kasnije. Kliknite za ponovni poku&#x161;aj.","ba-imagecapture-chooser.image-capture":"Snimite sliku","ba-imagecapture-chooser.upload-image":"U&#x10D;itaj sliku","ba-imagecapture-controlbar.settings":"postavke","ba-imagecapture-controlbar.camerahealthy":"Rasvjeta je dobra","ba-imagecapture-controlbar.cameraunhealthy":"Rasvjeta nije optimalna","ba-imagecapture-controlbar.record":"Uhvatiti","ba-imagecapture-controlbar.record-tooltip":"Kliknite ovdje za snimanje.","ba-imagecapture-controlbar.rerecord":"preurediti","ba-imagecapture-controlbar.rerecord-tooltip":"Kliknite ovdje za ponavljanje.","ba-imagecapture-controlbar.cancel":"Otkazati","ba-imagecapture-controlbar.cancel-tooltip":"Kliknite ovdje kako biste odustali.","ba-audioplayer-controlbar.audio-progress":"Napredak","ba-audioplayer-controlbar.rerecord-audio":"Ponovi?","ba-audioplayer-controlbar.submit-audio":"potvrditi","ba-audioplayer-controlbar.play-audio":"igra","ba-audioplayer-controlbar.pause-audio":"Pauza","ba-audioplayer-controlbar.pause-audio-disabled":"Pauza nije podr&#x17E;ana","ba-audioplayer-controlbar.elapsed-time":"Otpremljeno vrijeme","ba-audioplayer-controlbar.total-time":"Ukupna duljina","ba-audioplayer-controlbar.volume-button":"Postavite glasno&#x107;u","ba-audioplayer-controlbar.volume-mute":"Isklju&#x10D;ite zvuk","ba-audioplayer-controlbar.volume-unmute":"Uklju&#x10D;i zvuk","ba-audioplayer-loader.tooltip":"U&#x10D;itavam...","ba-audioplayer.audio-error":"Do&#x161;lo je do pogre&#x161;ke. Molimo poku&#x161;ajte ponovno kasnije. Kliknite za ponovni poku&#x161;aj.","ba-audiorecorder-chooser.record-audio":"Snimanje zvuka","ba-audiorecorder-chooser.upload-audio":"Prijenos zvuka","ba-audiorecorder-controlbar.settings":"postavke","ba-audiorecorder-controlbar.microphonehealthy":"Zvuk je dobar","ba-audiorecorder-controlbar.microphoneunhealthy":"Ne mogu podi&#x107;i zvuk","ba-audiorecorder-controlbar.record":"Snimiti","ba-audiorecorder-controlbar.record-tooltip":"Kliknite ovdje za snimanje.","ba-audiorecorder-controlbar.rerecord":"preurediti","ba-audiorecorder-controlbar.rerecord-tooltip":"Kliknite ovdje za ponavljanje.","ba-audiorecorder-controlbar.stop":"Stop","ba-audiorecorder-controlbar.stop-tooltip":"Kliknite ovdje da biste prestali.","ba-audiorecorder-controlbar.stop-available-after":"Minimalno vrijeme snimanja je %d sekundi","ba-audiorecorder-controlbar.cancel":"Otkazati","ba-audiorecorder-controlbar.cancel-tooltip":"Kliknite ovdje kako biste odustali."},"language:hu":{"ba-videoplayer-playbutton.tooltip":"Kattintson ide a vide&#xF3; lej&#xE1;tsz&#xE1;s&#xE1;hoz.","ba-videoplayer-playbutton.rerecord":"&#xDA;jra","ba-videoplayer-playbutton.submit-video":"Er&#x151;s&#xED;tse vide&#xF3;","ba-videoplayer-loader.tooltip":"Vide&#xF3; bet&#xF6;lt&#xE9;se ...","ba-videoplayer-controlbar.change-resolution":"a felbont&#xE1;s m&#xF3;dos&#xED;t&#xE1;sa","ba-videoplayer-controlbar.video-progress":"vide&#xF3; halad&#xE1;s","ba-videoplayer-controlbar.rerecord-video":"&#xDA;jra vide&#xF3;t?","ba-videoplayer-controlbar.submit-video":"Er&#x151;s&#xED;tse vide&#xF3;","ba-videoplayer-controlbar.play-video":"vide&#xF3; lej&#xE1;tsz&#xE1;sa","ba-videoplayer-controlbar.pause-video":"sz&#xFC;net vide&#xF3;","ba-videoplayer-controlbar.elapsed-time":"Eltelt id&#x151;","ba-videoplayer-controlbar.total-time":"Teljes hossza vide&#xF3;","ba-videoplayer-controlbar.fullscreen-video":"a teljes k&#xE9;perny&#x151;s","ba-videoplayer-controlbar.volume-button":"&#xC1;ll&#xED;tsa be a hanger&#x151;t","ba-videoplayer-controlbar.volume-mute":"hang eln&#xE9;m&#xED;t&#xE1;sa","ba-videoplayer-controlbar.volume-unmute":"Unmute hang","ba-videoplayer.video-error":"Hiba t&#xF6;rt&#xE9;nt. K&#xE9;rj&#xFC;k, pr&#xF3;b&#xE1;lkozzon k&#xE9;s&#x151;bb. Kattintson ide &#xFA;jra.","ba-videorecorder-chooser.record-video":"A vide&#xF3; r&#xF6;gz&#xED;t&#xE9;s&#xE9;nek","ba-videorecorder-chooser.upload-video":"Vide&#xF3; felt&#xF6;lt&#xE9;se","ba-videorecorder-controlbar.settings":"Be&#xE1;ll&#xED;t&#xE1;sok","ba-videorecorder-controlbar.camerahealthy":"Vil&#xE1;g&#xED;t&#xE1;s j&#xF3;","ba-videorecorder-controlbar.cameraunhealthy":"Vil&#xE1;g&#xED;t&#xE1;s nem optim&#xE1;lis","ba-videorecorder-controlbar.microphonehealthy":"Hang j&#xF3;","ba-videorecorder-controlbar.microphoneunhealthy":"Nem lehet felvenni minden hang","ba-videorecorder-controlbar.record":"Rekord","ba-videorecorder-controlbar.record-tooltip":"Kattintson ide, hogy r&#xF6;gz&#xED;ti.","ba-videorecorder-controlbar.rerecord":"&#xDA;jra","ba-videorecorder-controlbar.rerecord-tooltip":"Kattintson ide, hogy &#xFA;jra.","ba-videorecorder-controlbar.upload-covershot":"Felt&#xF6;lt&#xE9;s","ba-videorecorder-controlbar.upload-covershot-tooltip":"Kattintson ide felt&#xF6;lthet&#x151; egyedi fed&#xE9;l l&#xF6;v&#xE9;s","ba-videorecorder-controlbar.stop":"&#xC1;llj meg","ba-videorecorder-controlbar.stop-tooltip":"Kattintson ide, hogy hagyja abba.","ba-videorecorder-controlbar.skip":"Skip","ba-videorecorder-controlbar.skip-tooltip":"Kattintson ide, hogy kihagyja.","ba-videorecorder.recorder-error":"Hiba t&#xF6;rt&#xE9;nt. K&#xE9;rj&#xFC;k, pr&#xF3;b&#xE1;lkozzon k&#xE9;s&#x151;bb. Kattintson ide &#xFA;jra.","ba-videorecorder.attach-error":"Nem tudtuk el&#xE9;rni a kamera interface. Att&#xF3;l f&#xFC;gg&#x151;en, hogy a k&#xE9;sz&#xFC;l&#xE9;k &#xE9;s a b&#xF6;ng&#xE9;sz&#x151;ben, akkor telep&#xED;tenie kell a Flash vagy el&#xE9;rni az oldalt SSL.","ba-videorecorder.access-forbidden":"Hozz&#xE1;f&#xE9;r&#xE9;s a kamera tilos volt. Kattintson ide &#xFA;jra.","ba-videorecorder.pick-covershot":"V&#xE1;lassz egy covershot.","ba-videorecorder.uploading":"Felt&#xF6;lt&#xE9;s","ba-videorecorder.uploading-failed":"Felt&#xF6;lt&#xE9;s sikertelen - ide kattintva &#xFA;jra.","ba-videorecorder.verifying":"ellen&#x151;rz&#xE9;se","ba-videorecorder.verifying-failed":"Ellen&#x151;rz&#xE9;s&#xE9;&#xE9;rt sikertelen - ide kattintva &#xFA;jra.","ba-videorecorder.rerecord-confirm":"T&#xE9;nyleg azt akarja ism&#xE9;telni a vide&#xF3;?","ba-videorecorder.video_file_too_large":"A vide&#xF3; f&#xE1;jl t&#xFA;l nagy (%s) - ide kattintva pr&#xF3;b&#xE1;lkozzon &#xFA;jra egy kisebb video f&#xE1;jlt.","ba-videorecorder.unsupported_video_type":"K&#xE9;rj&#xFC;k, t&#xF6;lts&#xF6;n fel: %s - ide kattintva &#xFA;jra.","ba-videoplayer-controlbar.exit-fullscreen-video":"Kil&#xE9;p&#xE9;s a teljes k&#xE9;perny&#x151;s","ba-videoplayer-share.share":"Vide&#xF3; megoszt&#xE1;sa","ba-videorecorder-chooser.record-screen":"Felv&#xE9;tel k&#xE9;perny&#x151;","ba-videoplayer-controlbar.pause-video-disabled":"A sz&#xFC;neteltet&#xE9;s nem t&#xE1;mogatott","ba-videorecorder-chooser.record-audio":"Hang r&#xF6;gz&#xED;t&#xE9;se","ba-videorecorder-controlbar.stop-available-after":"A minim&#xE1;lis felv&#xE9;teli id&#x151; %d m&#xE1;sodperc","ba-videorecorder-controlbar.cancel":"Megsz&#xFC;nteti","ba-videorecorder-controlbar.cancel-tooltip":"Kattintson ide a lemond&#xE1;shoz.","ba-videorecorder.cancel-confirm":"T&#xE9;nyleg t&#xF6;r&#xF6;lni szeretn&#xE9; a vide&#xF3; felt&#xF6;lt&#xE9;s&#xE9;t?","ba-videoplayer-adslot.elapsed-time":"Elkelt id&#x151;","ba-videoplayer-adslot.volume-button":"&#xC1;ll&#xED;tsa be a hanger&#x151;t","ba-videoplayer-adslot.volume-mute":"Eln&#xE9;m&#xED;tja a hangot","ba-videoplayer-adslot.volume-unmute":"Csengessen a hang","ba-videoplayer-adslot.ad-will-end-after":"A hirdet&#xE9;s a %s ut&#xE1;n befejez&#x151;dik","ba-videoplayer-adslot.can-skip-after":"Ugr&#xE1;s a %d ut&#xE1;n","ba-videoplayer-adslot.skip-ad":"Hirdet&#xE9;s &#xE1;tugr&#xE1;sa","ba-videorecorder.software-required":"K&#xE9;rj&#xFC;k, kattintson az al&#xE1;bbi gombra a k&#xF6;vetkez&#x151; k&#xF6;vetelm&#xE9;nyek telep&#xED;t&#xE9;s&#xE9;hez / aktiv&#xE1;l&#xE1;s&#xE1;hoz a folytat&#xE1;shoz.","ba-videorecorder.software-waiting":"V&#xE1;rakoz&#xE1;s a telep&#xED;t&#xE9;s / aktiv&#xE1;l&#xE1;s k&#xF6;vetelm&#xE9;nyeire. Lehet, hogy friss&#xED;tenie kell az oldalt befejez&#xE9;se ut&#xE1;n.","ba-videoplayer-controlbar.close-tracks":"K&#xF6;zeli CC","ba-videoplayer-controlbar.show-tracks":"CC mutat&#xE1;sa","ba-videoplayer-tracks.upload-text-tracks":"P&#xE1;lya sz&#xF6;veges f&#xE1;jlok felt&#xF6;lt&#xE9;se","ba-videoplayer-tracks.select-text-track-language":"Felirat nyelve","ba-videoplayer-tracks.info-select-locale-first":"El&#x151;sz&#xF6;r v&#xE1;lassza a helyi be&#xE1;ll&#xED;t&#xE1;st","ba-videoplayer-tracks.select-text-track-file":"Kattintson a f&#xE1;jl kiv&#xE1;laszt&#xE1;s&#xE1;hoz","ba-videoplayer-tracks.back":"h&#xE1;t","ba-videorecorder.framerate-warning":"A vide&#xF3; k&#xE9;par&#xE1;nya nagyon alacsony. Javasoljuk, hogy z&#xE1;rja be az &#xF6;sszes t&#xF6;bbi programot &#xE9;s b&#xF6;ng&#xE9;sz&#x151;lapot, vagy gyorsabb sz&#xE1;m&#xED;t&#xF3;g&#xE9;pet haszn&#xE1;ljon.","ba-videorecorder.upload-error-duration":"A felt&#xF6;lt&#xF6;tt vide&#xF3; hossza nem felel meg a k&#xF6;vetelm&#xE9;nyeknek - kattintson ide &#xFA;jrapr&#xF3;b&#xE1;lkoz&#xE1;shoz.","ba-videorecorder.resolution-constraint-error":"A kiv&#xE1;lasztott f&#xE1;jl nem egyezik meg a sz&#xFC;ks&#xE9;ges felbont&#xE1;ssal - kattintson ide &#xFA;jrapr&#xF3;b&#xE1;lkoz&#xE1;shoz.","ba-videorecorder.orientation-portrait-required":"Forgassa el a k&#xE9;sz&#xFC;l&#xE9;ket &#xE1;ll&#xF3;k&#xE9;p r&#xF6;gz&#xED;t&#xE9;s&#xE9;hez.","ba-videorecorder.orientation-landscape-required":"Forgassa el a k&#xE9;sz&#xFC;l&#xE9;ket fekv&#x151; m&#xF3;dban t&#xF6;rt&#xE9;n&#x151; r&#xF6;gz&#xED;t&#xE9;shez.","ba-imageviewer-controlbar.rerecord-image":"&#xDA;jra?","ba-imageviewer-controlbar.submit-image":"meger&#x151;s&#xED;t","ba-imageviewer-controlbar.fullscreen-image":"L&#xE9;pjen be a teljes k&#xE9;perny&#x151;re","ba-imageviewer-controlbar.exit-fullscreen-image":"Kil&#xE9;p&#xE9;s a teljes k&#xE9;perny&#x151;r&#x151;l","ba-imageviewer.image-error":"Hiba t&#xF6;rt&#xE9;nt. K&#xE9;rj&#xFC;k, pr&#xF3;b&#xE1;lkozzon k&#xE9;s&#x151;bb. Kattintson &#xFA;jra az &#xFA;jrapr&#xF3;b&#xE1;l&#xE1;shoz.","ba-imagecapture-chooser.image-capture":"K&#xE9;p r&#xF6;gz&#xED;t&#xE9;se","ba-imagecapture-chooser.upload-image":"K&#xE9;p felt&#xF6;lt&#xE9;se","ba-imagecapture-controlbar.settings":"Be&#xE1;ll&#xED;t&#xE1;sok","ba-imagecapture-controlbar.camerahealthy":"A vil&#xE1;g&#xED;t&#xE1;s j&#xF3;","ba-imagecapture-controlbar.cameraunhealthy":"A vil&#xE1;g&#xED;t&#xE1;s nem optim&#xE1;lis","ba-imagecapture-controlbar.record":"Elfog","ba-imagecapture-controlbar.record-tooltip":"Kattintson ide a r&#xF6;gz&#xED;t&#xE9;shez.","ba-imagecapture-controlbar.rerecord":"&#xDA;jra","ba-imagecapture-controlbar.rerecord-tooltip":"Kattintson ide &#xFA;jra.","ba-imagecapture-controlbar.cancel":"Megsz&#xFC;nteti","ba-imagecapture-controlbar.cancel-tooltip":"Kattintson ide a lemond&#xE1;shoz.","ba-audioplayer-controlbar.audio-progress":"El&#x151;rehalad","ba-audioplayer-controlbar.rerecord-audio":"&#xDA;jra?","ba-audioplayer-controlbar.submit-audio":"meger&#x151;s&#xED;t","ba-audioplayer-controlbar.play-audio":"J&#xE1;t&#xE9;k","ba-audioplayer-controlbar.pause-audio":"Sz&#xFC;net","ba-audioplayer-controlbar.pause-audio-disabled":"A sz&#xFC;neteltet&#xE9;s nem t&#xE1;mogatott","ba-audioplayer-controlbar.elapsed-time":"Elkelt id&#x151;","ba-audioplayer-controlbar.total-time":"Teljes hossza","ba-audioplayer-controlbar.volume-button":"&#xC1;ll&#xED;tsa be a hanger&#x151;t","ba-audioplayer-controlbar.volume-mute":"Eln&#xE9;m&#xED;tja a hangot","ba-audioplayer-controlbar.volume-unmute":"Csengessen a hang","ba-audioplayer-loader.tooltip":"Bet&#xF6;lt&#xE9;s...","ba-audioplayer.audio-error":"Hiba t&#xF6;rt&#xE9;nt. K&#xE9;rj&#xFC;k, pr&#xF3;b&#xE1;lkozzon k&#xE9;s&#x151;bb. Kattintson &#xFA;jra az &#xFA;jrapr&#xF3;b&#xE1;l&#xE1;shoz.","ba-audiorecorder-chooser.record-audio":"Hang r&#xF6;gz&#xED;t&#xE9;se","ba-audiorecorder-chooser.upload-audio":"Hang felt&#xF6;lt&#xE9;se","ba-audiorecorder-controlbar.settings":"Be&#xE1;ll&#xED;t&#xE1;sok","ba-audiorecorder-controlbar.microphonehealthy":"A hang j&#xF3;","ba-audiorecorder-controlbar.microphoneunhealthy":"Nem hallhat&#xF3; hang","ba-audiorecorder-controlbar.record":"Rekord","ba-audiorecorder-controlbar.record-tooltip":"Kattintson ide a felv&#xE9;telhez.","ba-audiorecorder-controlbar.rerecord":"&#xDA;jra","ba-audiorecorder-controlbar.rerecord-tooltip":"Kattintson ide &#xFA;jra.","ba-audiorecorder-controlbar.stop":"&#xC1;llj meg","ba-audiorecorder-controlbar.stop-tooltip":"Kattintson ide a le&#xE1;ll&#xED;t&#xE1;shoz.","ba-audiorecorder-controlbar.stop-available-after":"A minim&#xE1;lis felv&#xE9;teli id&#x151; %d m&#xE1;sodperc","ba-audiorecorder-controlbar.cancel":"Megsz&#xFC;nteti","ba-audiorecorder-controlbar.cancel-tooltip":"Kattintson ide a lemond&#xE1;shoz."},"language:id":{"ba-videoplayer-playbutton.tooltip":"Klik untuk memutar video.","ba-videoplayer-playbutton.rerecord":"Mengulangi","ba-videoplayer-playbutton.submit-video":"Konfirmasi video","ba-videoplayer-loader.tooltip":"Memuat video ...","ba-videoplayer-controlbar.change-resolution":"Ubah resolusi","ba-videoplayer-controlbar.video-progress":"Kemajuan video","ba-videoplayer-controlbar.rerecord-video":"Redo video?","ba-videoplayer-controlbar.submit-video":"Konfirmasi video","ba-videoplayer-controlbar.play-video":"Putar video","ba-videoplayer-controlbar.pause-video":"Jeda video","ba-videoplayer-controlbar.elapsed-time":"Elasped waktu","ba-videoplayer-controlbar.total-time":"Panjang video total","ba-videoplayer-controlbar.fullscreen-video":"Memasuki layar penuh","ba-videoplayer-controlbar.volume-button":"Setel volume","ba-videoplayer-controlbar.volume-mute":"Bisu terdengar","ba-videoplayer-controlbar.volume-unmute":"Suarakan suara","ba-videoplayer.video-error":"Terjadi kesalahan, coba lagi nanti. Klik untuk mencoba lagi.","ba-videorecorder-chooser.record-video":"Merekam video","ba-videorecorder-chooser.upload-video":"Upload Video","ba-videorecorder-controlbar.settings":"Pengaturan","ba-videorecorder-controlbar.camerahealthy":"Pencahayaan itu bagus","ba-videorecorder-controlbar.cameraunhealthy":"Pencahayaan tidak optimal","ba-videorecorder-controlbar.microphonehealthy":"Suara bagus","ba-videorecorder-controlbar.microphoneunhealthy":"Tidak bisa mengambil suara apapun","ba-videorecorder-controlbar.record":"Merekam","ba-videorecorder-controlbar.record-tooltip":"Klik di sini untuk merekam.","ba-videorecorder-controlbar.rerecord":"Mengulangi","ba-videorecorder-controlbar.rerecord-tooltip":"Klik di sini untuk mengulang.","ba-videorecorder-controlbar.upload-covershot":"Upload","ba-videorecorder-controlbar.upload-covershot-tooltip":"Klik di sini untuk mengunggah tangkapan sampul khusus","ba-videorecorder-controlbar.stop":"Berhenti","ba-videorecorder-controlbar.stop-tooltip":"Klik di sini untuk berhenti.","ba-videorecorder-controlbar.skip":"Melewatkan","ba-videorecorder-controlbar.skip-tooltip":"Klik di sini untuk melompat.","ba-videorecorder.recorder-error":"Terjadi kesalahan, coba lagi nanti. Klik untuk mencoba lagi.","ba-videorecorder.attach-error":"Kami tidak dapat mengakses antarmuka kamera. Bergantung pada perangkat dan browser, Anda mungkin perlu menginstal Flash atau mengakses halaman melalui SSL.","ba-videorecorder.access-forbidden":"Akses ke kamera dilarang. Klik untuk mencoba lagi.","ba-videorecorder.pick-covershot":"Pilih sebuah coverhot.","ba-videorecorder.uploading":"Mengunggah","ba-videorecorder.uploading-failed":"Mengunggah gagal - klik di sini untuk mencoba lagi.","ba-videorecorder.verifying":"Memverifikasi","ba-videorecorder.verifying-failed":"Verifikasi gagal - klik di sini untuk mencoba lagi.","ba-videorecorder.rerecord-confirm":"Apakah Anda benar-benar ingin mengulang video Anda?","ba-videorecorder.video_file_too_large":"File video Anda terlalu besar ( %s) - klik di sini untuk mencoba lagi dengan file video yang lebih kecil.","ba-videorecorder.unsupported_video_type":"Silakan upload: %s - klik di sini untuk mencoba lagi.","ba-videoplayer-controlbar.exit-fullscreen-video":"Keluar dari layar penuh","ba-videoplayer-share.share":"Berbagi video","ba-videorecorder-chooser.record-screen":"Layar rekam","ba-videoplayer-controlbar.pause-video-disabled":"Jeda tidak didukung","ba-videorecorder-chooser.record-audio":"Suara rekaman","ba-videorecorder-controlbar.stop-available-after":"Waktu perekaman minimum adalah %d detik","ba-videorecorder-controlbar.cancel":"Membatalkan","ba-videorecorder-controlbar.cancel-tooltip":"Klik disini untuk membatalkan","ba-videorecorder.cancel-confirm":"Apakah Anda benar-benar ingin membatalkan upload video Anda?","ba-videoplayer-adslot.elapsed-time":"Elasped waktu","ba-videoplayer-adslot.volume-button":"Setel volume","ba-videoplayer-adslot.volume-mute":"Bisu terdengar","ba-videoplayer-adslot.volume-unmute":"Suarakan suara","ba-videoplayer-adslot.ad-will-end-after":"Iklan akan berakhir setelah %s","ba-videoplayer-adslot.can-skip-after":"Lewati setelah %d","ba-videoplayer-adslot.skip-ad":"Melewatkan iklan","ba-videorecorder.software-required":"Silahkan klik di bawah ini untuk menginstal / mengaktifkan persyaratan berikut agar bisa melanjutkan.","ba-videorecorder.software-waiting":"Menunggu persyaratan untuk dipasang / diaktifkan. Anda mungkin perlu menyegarkan halaman setelah selesai.","ba-videoplayer-controlbar.close-tracks":"Tutup CC","ba-videoplayer-controlbar.show-tracks":"Tampilkan CC","ba-videoplayer-tracks.upload-text-tracks":"Unggah file teks lagu","ba-videoplayer-tracks.select-text-track-language":"Bahasa Subtitle","ba-videoplayer-tracks.info-select-locale-first":"Pertama pilih lokal","ba-videoplayer-tracks.select-text-track-file":"Klik untuk memilih file","ba-videoplayer-tracks.back":"kembali","ba-videorecorder.framerate-warning":"Kecepatan frame video sangat rendah. Kami sarankan untuk menutup semua program lain dan tab browser atau menggunakan komputer yang lebih cepat.","ba-videorecorder.upload-error-duration":"Panjang video yang diunggah tidak memenuhi persyaratan - klik di sini untuk mencoba lagi.","ba-videorecorder.resolution-constraint-error":"File yang Anda pilih tidak sesuai dengan resolusi yang diperlukan - klik di sini untuk mencoba lagi.","ba-videorecorder.orientation-portrait-required":"Silakan putar perangkat Anda untuk merekam dalam mode potret.","ba-videorecorder.orientation-landscape-required":"Silakan putar perangkat Anda untuk merekam dalam mode lansekap.","ba-imageviewer-controlbar.rerecord-image":"Mengulangi?","ba-imageviewer-controlbar.submit-image":"Memastikan","ba-imageviewer-controlbar.fullscreen-image":"Memasuki layar penuh","ba-imageviewer-controlbar.exit-fullscreen-image":"Keluar dari layar penuh","ba-imageviewer.image-error":"Terjadi kesalahan, coba lagi nanti. Klik untuk mencoba lagi.","ba-imagecapture-chooser.image-capture":"Capture Image","ba-imagecapture-chooser.upload-image":"Unggah Gambar","ba-imagecapture-controlbar.settings":"Pengaturan","ba-imagecapture-controlbar.camerahealthy":"Pencahayaan bagus","ba-imagecapture-controlbar.cameraunhealthy":"Pencahayaan tidak optimal","ba-imagecapture-controlbar.record":"Menangkap","ba-imagecapture-controlbar.record-tooltip":"Klik di sini untuk menangkap.","ba-imagecapture-controlbar.rerecord":"Mengulangi","ba-imagecapture-controlbar.rerecord-tooltip":"Klik di sini untuk mengulang.","ba-imagecapture-controlbar.cancel":"Membatalkan","ba-imagecapture-controlbar.cancel-tooltip":"Klik di sini untuk membatalkan.","ba-audioplayer-controlbar.audio-progress":"Kemajuan","ba-audioplayer-controlbar.rerecord-audio":"Mengulangi?","ba-audioplayer-controlbar.submit-audio":"Memastikan","ba-audioplayer-controlbar.play-audio":"Bermain","ba-audioplayer-controlbar.pause-audio":"Berhenti sebentar","ba-audioplayer-controlbar.pause-audio-disabled":"Jeda tidak didukung","ba-audioplayer-controlbar.elapsed-time":"Waktu Elasped","ba-audioplayer-controlbar.total-time":"Panjang total","ba-audioplayer-controlbar.volume-button":"Setel volume","ba-audioplayer-controlbar.volume-mute":"Bungkam suara","ba-audioplayer-controlbar.volume-unmute":"Bunyikan suara","ba-audioplayer-loader.tooltip":"Pemuatan...","ba-audioplayer.audio-error":"Terjadi kesalahan, coba lagi nanti. Klik untuk mencoba lagi.","ba-audiorecorder-chooser.record-audio":"Suara rekaman","ba-audiorecorder-chooser.upload-audio":"Unggah Audio","ba-audiorecorder-controlbar.settings":"Pengaturan","ba-audiorecorder-controlbar.microphonehealthy":"Suara itu bagus","ba-audiorecorder-controlbar.microphoneunhealthy":"Tidak dapat mengambil suara apa pun","ba-audiorecorder-controlbar.record":"Merekam","ba-audiorecorder-controlbar.record-tooltip":"Klik di sini untuk merekam.","ba-audiorecorder-controlbar.rerecord":"Mengulangi","ba-audiorecorder-controlbar.rerecord-tooltip":"Klik di sini untuk mengulang.","ba-audiorecorder-controlbar.stop":"Berhenti","ba-audiorecorder-controlbar.stop-tooltip":"Klik di sini untuk berhenti.","ba-audiorecorder-controlbar.stop-available-after":"Waktu perekaman minimum adalah %d detik","ba-audiorecorder-controlbar.cancel":"Membatalkan","ba-audiorecorder-controlbar.cancel-tooltip":"Klik di sini untuk membatalkan."},"language:it":{"ba-videoplayer-playbutton.tooltip":"Clicca per giocare video.","ba-videoplayer-playbutton.rerecord":"Rifare","ba-videoplayer-playbutton.submit-video":"confermare il video","ba-videoplayer-loader.tooltip":"Caricamento video...","ba-videoplayer-controlbar.change-resolution":"Cambiare la risoluzione","ba-videoplayer-controlbar.video-progress":"progresso Video","ba-videoplayer-controlbar.rerecord-video":"Ripeti video?","ba-videoplayer-controlbar.submit-video":"confermare il video","ba-videoplayer-controlbar.play-video":"Guarda il video","ba-videoplayer-controlbar.pause-video":"il video Pause","ba-videoplayer-controlbar.elapsed-time":"tempo Elasped","ba-videoplayer-controlbar.total-time":"La lunghezza totale di Video","ba-videoplayer-controlbar.fullscreen-video":"Vai a tutto schermo","ba-videoplayer-controlbar.volume-button":"Impostare il volume","ba-videoplayer-controlbar.volume-mute":"suono muto","ba-videoplayer-controlbar.volume-unmute":"disattivare l&#x27;audio","ba-videoplayer.video-error":"&#xC8; verificato un errore, riprova pi&#xF9; tardi. Fare clic per riprovare.","ba-videorecorder-chooser.record-video":"Registra il tuo video","ba-videorecorder-chooser.upload-video":"Carica video","ba-videorecorder-controlbar.settings":"impostazioni","ba-videorecorder-controlbar.camerahealthy":"L&#x27;illuminazione &#xE8; buona","ba-videorecorder-controlbar.cameraunhealthy":"L&#x27;illuminazione non &#xE8; ottimale","ba-videorecorder-controlbar.microphonehealthy":"Il suono &#xE8; buono","ba-videorecorder-controlbar.microphoneunhealthy":"Non &#xE8; possibile udire i suoni","ba-videorecorder-controlbar.record":"Disco","ba-videorecorder-controlbar.record-tooltip":"Clicca qui per registrare.","ba-videorecorder-controlbar.rerecord":"Rifare","ba-videorecorder-controlbar.rerecord-tooltip":"Clicca qui per rifare.","ba-videorecorder-controlbar.upload-covershot":"Caricare","ba-videorecorder-controlbar.upload-covershot-tooltip":"Clicca qui per caricare copertina personalizzata colpo","ba-videorecorder-controlbar.stop":"Stop","ba-videorecorder-controlbar.stop-tooltip":"Clicca qui per fermare.","ba-videorecorder-controlbar.skip":"Salta","ba-videorecorder-controlbar.skip-tooltip":"Clicca qui per saltare.","ba-videorecorder.recorder-error":"&#xC8; verificato un errore, riprova pi&#xF9; tardi. Fare clic per riprovare.","ba-videorecorder.attach-error":"Non abbiamo potuto accedere alla interfaccia della fotocamera. A seconda del dispositivo e del browser, potrebbe essere necessario installare Flash o accedere alla pagina tramite SSL.","ba-videorecorder.access-forbidden":"L&#x27;accesso alla telecamera era proibito. Fare clic per riprovare.","ba-videorecorder.pick-covershot":"Scegli una covershot.","ba-videorecorder.uploading":"Caricamento","ba-videorecorder.uploading-failed":"Caricamento fallito - clicca qui per riprovare.","ba-videorecorder.verifying":"verifica","ba-videorecorder.verifying-failed":"Verifica non riuscita - clicca qui per riprovare.","ba-videorecorder.rerecord-confirm":"Vuoi davvero di rifare il video?","ba-videorecorder.video_file_too_large":"Il file video &#xE8; troppo grande (%s) - clicca qui per provare di nuovo con un file video pi&#xF9; piccolo.","ba-videorecorder.unsupported_video_type":"Si prega di caricare: %s - clicca qui per riprovare.","ba-videoplayer-controlbar.exit-fullscreen-video":"Uscire da schermo intero","ba-videoplayer-share.share":"Condividi il Video","ba-videorecorder-chooser.record-screen":"Registra schermo","ba-videoplayer-controlbar.pause-video-disabled":"Pausa non supportata","ba-videorecorder-chooser.record-audio":"Registra audio","ba-videorecorder-controlbar.stop-available-after":"Il tempo di registrazione minimo &#xE8; %d secondi","ba-videorecorder-controlbar.cancel":"Annulla","ba-videorecorder-controlbar.cancel-tooltip":"Clicca qui per cancellare.","ba-videorecorder.cancel-confirm":"Vuoi veramente cancellare il tuo caricamento video?","ba-videoplayer-adslot.elapsed-time":"Tempo trascorso","ba-videoplayer-adslot.volume-button":"Imposta il volume","ba-videoplayer-adslot.volume-mute":"Suono muto","ba-videoplayer-adslot.volume-unmute":"Riattiva il suono","ba-videoplayer-adslot.ad-will-end-after":"L&#x27;annuncio terminer&#xE0; dopo %s","ba-videoplayer-adslot.can-skip-after":"Salta dopo %d","ba-videoplayer-adslot.skip-ad":"Salta annuncio","ba-videorecorder.software-required":"Clicca qui sotto per installare / attivare i seguenti requisiti per procedere.","ba-videorecorder.software-waiting":"Aspettando che i requisiti siano installati / attivati. Potrebbe essere necessario aggiornare la pagina dopo il completamento.","ba-videoplayer-controlbar.close-tracks":"Chiudi CC","ba-videoplayer-controlbar.show-tracks":"Mostra CC","ba-videoplayer-tracks.upload-text-tracks":"Carica file di testo traccia","ba-videoplayer-tracks.select-text-track-language":"Lingua sottotitoli","ba-videoplayer-tracks.info-select-locale-first":"Prima seleziona la locale","ba-videoplayer-tracks.select-text-track-file":"Clicca per selezionare il file","ba-videoplayer-tracks.back":"indietro","ba-videorecorder.framerate-warning":"Il frame rate video &#xE8; molto basso. Ti consigliamo di chiudere tutti gli altri programmi e le schede del browser o di utilizzare un computer pi&#xF9; veloce.","ba-videorecorder.upload-error-duration":"La lunghezza del video caricato non soddisfa i requisiti: fai clic qui per riprovare.","ba-videorecorder.resolution-constraint-error":"Il file che hai selezionato non corrisponde alla risoluzione richiesta: fai clic qui per riprovare.","ba-videorecorder.orientation-portrait-required":"Si prega di ruotare il dispositivo per registrare in modalit&#xE0; verticale.","ba-videorecorder.orientation-landscape-required":"Si prega di ruotare il dispositivo per registrare in modalit&#xE0; orizzontale.","ba-imageviewer-controlbar.rerecord-image":"Rifare?","ba-imageviewer-controlbar.submit-image":"Confermare","ba-imageviewer-controlbar.fullscreen-image":"Entra a schermo intero","ba-imageviewer-controlbar.exit-fullscreen-image":"Esci dalla modalit&#xE0; schermo intero","ba-imageviewer.image-error":"Si &#xE8; verificato un errore, riprova pi&#xF9; tardi. Clicca per riprovare.","ba-imagecapture-chooser.image-capture":"Cattura immagine","ba-imagecapture-chooser.upload-image":"Carica immagine","ba-imagecapture-controlbar.settings":"impostazioni","ba-imagecapture-controlbar.camerahealthy":"L&#x27;illuminazione &#xE8; buona","ba-imagecapture-controlbar.cameraunhealthy":"L&#x27;illuminazione non &#xE8; ottimale","ba-imagecapture-controlbar.record":"Catturare","ba-imagecapture-controlbar.record-tooltip":"Clicca qui per catturare.","ba-imagecapture-controlbar.rerecord":"Rifare","ba-imagecapture-controlbar.rerecord-tooltip":"Clicca qui per rifare.","ba-imagecapture-controlbar.cancel":"Annulla","ba-imagecapture-controlbar.cancel-tooltip":"Clicca qui per cancellare.","ba-audioplayer-controlbar.audio-progress":"Progresso","ba-audioplayer-controlbar.rerecord-audio":"Rifare?","ba-audioplayer-controlbar.submit-audio":"Confermare","ba-audioplayer-controlbar.play-audio":"Giocare","ba-audioplayer-controlbar.pause-audio":"Pausa","ba-audioplayer-controlbar.pause-audio-disabled":"Pausa non supportata","ba-audioplayer-controlbar.elapsed-time":"Tempo trascorso","ba-audioplayer-controlbar.total-time":"Lunghezza totale di","ba-audioplayer-controlbar.volume-button":"Imposta il volume","ba-audioplayer-controlbar.volume-mute":"Suono muto","ba-audioplayer-controlbar.volume-unmute":"Riattiva il suono","ba-audioplayer-loader.tooltip":"Caricamento in corso...","ba-audioplayer.audio-error":"Si &#xE8; verificato un errore, riprova pi&#xF9; tardi. Clicca per riprovare.","ba-audiorecorder-chooser.record-audio":"Registra audio","ba-audiorecorder-chooser.upload-audio":"Carica audio","ba-audiorecorder-controlbar.settings":"impostazioni","ba-audiorecorder-controlbar.microphonehealthy":"Il suono &#xE8; buono","ba-audiorecorder-controlbar.microphoneunhealthy":"Non posso sentire alcun suono","ba-audiorecorder-controlbar.record":"Disco","ba-audiorecorder-controlbar.record-tooltip":"Clicca qui per registrare.","ba-audiorecorder-controlbar.rerecord":"Rifare","ba-audiorecorder-controlbar.rerecord-tooltip":"Clicca qui per rifare.","ba-audiorecorder-controlbar.stop":"Stop","ba-audiorecorder-controlbar.stop-tooltip":"Clicca qui per interrompere.","ba-audiorecorder-controlbar.stop-available-after":"Il tempo di registrazione minimo &#xE8; %d secondi","ba-audiorecorder-controlbar.cancel":"Annulla","ba-audiorecorder-controlbar.cancel-tooltip":"Clicca qui per cancellare."},"language:nl":{"ba-videoplayer-playbutton.tooltip":"Klik om video af te spelen.","ba-videoplayer-playbutton.rerecord":"Opnieuw","ba-videoplayer-playbutton.submit-video":"Bevestigen","ba-videoplayer-loader.tooltip":"Laden...","ba-videoplayer-controlbar.change-resolution":"Resolutie veranderen","ba-videoplayer-controlbar.video-progress":"Vooruitgang","ba-videoplayer-controlbar.rerecord-video":"Opnieuw opnemen?","ba-videoplayer-controlbar.submit-video":"Bevestigen","ba-videoplayer-controlbar.play-video":"Afspelen","ba-videoplayer-controlbar.pause-video":"Pauze","ba-videoplayer-controlbar.elapsed-time":"Verstreken tijd","ba-videoplayer-controlbar.total-time":"De totale lengte van de video","ba-videoplayer-controlbar.fullscreen-video":"Volledig scherm","ba-videoplayer-controlbar.volume-button":"Volume instellen","ba-videoplayer-controlbar.volume-mute":"Geluid dempen","ba-videoplayer-controlbar.volume-unmute":"Geluid inschakelen","ba-videoplayer.video-error":"Er is een fout opgetreden, probeer het later opnieuw. Klik hier om opnieuw te proberen.","ba-videorecorder-chooser.record-video":"Video opnemen","ba-videorecorder-chooser.upload-video":"Video uploaden","ba-videorecorder-controlbar.settings":"Instellingen","ba-videorecorder-controlbar.camerahealthy":"Verlichting is goed","ba-videorecorder-controlbar.cameraunhealthy":"Verlichting is niet optimaal","ba-videorecorder-controlbar.microphonehealthy":"Het geluid is goed","ba-videorecorder-controlbar.microphoneunhealthy":"Geluid is niet optimaal","ba-videorecorder-controlbar.record":"Opnemen","ba-videorecorder-controlbar.record-tooltip":"Klik hier om te registreren.","ba-videorecorder-controlbar.rerecord":"Opnieuw opnemen","ba-videorecorder-controlbar.rerecord-tooltip":"Opnieuw opnemen","ba-videorecorder-controlbar.upload-covershot":"Video uploaden","ba-videorecorder-controlbar.upload-covershot-tooltip":"Klik hier om je aangepaste cover te uploaden","ba-videorecorder-controlbar.stop":"Stop","ba-videorecorder-controlbar.stop-tooltip":"Klik hier om te stoppen.","ba-videorecorder-controlbar.skip":"Overslaan","ba-videorecorder-controlbar.skip-tooltip":"Klik hier om over te slaan.","ba-videorecorder.recorder-error":"Er is een fout opgetreden, probeer het later opnieuw. Klik hier om opnieuw te proberen.","ba-videorecorder.attach-error":"We konden geen toegang krijgen tot de camera. Afhankelijk van het apparaat en de browser, moet u misschien Flash installeren of toegang tot de pagina via SSL.","ba-videorecorder.access-forbidden":"De toegang tot de camera was verboden. Klik hier om opnieuw te proberen.","ba-videorecorder.pick-covershot":"Kies een covershot.","ba-videorecorder.uploading":"Uploaden","ba-videorecorder.uploading-failed":"Uploaden mislukt - klik hier om opnieuw te proberen.","ba-videorecorder.verifying":"Verifi&#xEB;ren","ba-videorecorder.verifying-failed":"Verificatie mislukt - klik hier om opnieuw te proberen.","ba-videorecorder.rerecord-confirm":"Wil je echt je video opnieuw opnemen?","ba-videorecorder.video_file_too_large":"Uw video bestand is te groot (%s) - klik hier om opnieuw te proberen met een kleiner bestand.","ba-videorecorder.unsupported_video_type":"Upload: %s - klik hier om opnieuw te proberen.","ba-videoplayer-controlbar.exit-fullscreen-video":"Verlaat volledig scherm","ba-videoplayer-share.share":"Video Helen","ba-videorecorder-chooser.record-screen":"Scherm opnemen","ba-videoplayer-controlbar.pause-video-disabled":"Pauzeren niet ondersteund","ba-videorecorder-chooser.record-audio":"Geluid opnemen","ba-videorecorder-controlbar.stop-available-after":"Minimale opnametijd is %d seconden","ba-videorecorder-controlbar.cancel":"Annuleren","ba-videorecorder-controlbar.cancel-tooltip":"Klik hier om te annuleren.","ba-videorecorder.cancel-confirm":"Wil je je upload echt annuleren?","ba-videoplayer-adslot.elapsed-time":"Verstreken tijd","ba-videoplayer-adslot.volume-button":"Volume","ba-videoplayer-adslot.volume-mute":"Geluid dempen","ba-videoplayer-adslot.volume-unmute":"Geluid inschakelen","ba-videoplayer-adslot.ad-will-end-after":"Advertentie eindigt na %s","ba-videoplayer-adslot.can-skip-after":"Skip na %d","ba-videoplayer-adslot.skip-ad":"Advertentie overslaan","ba-videorecorder.software-required":"Klik hieronder om de volgende vereisten te installeren / activeren om door te gaan.","ba-videorecorder.software-waiting":"Wacht tot de vereisten zijn ge&#xEF;nstalleerd / geactiveerd. Mogelijk moet u de pagina na voltooiing vernieuwen.","ba-videoplayer-controlbar.close-tracks":"Sluit CC","ba-videoplayer-controlbar.show-tracks":"Toon CC","ba-videoplayer-tracks.upload-text-tracks":"Uploadtekstbestanden uploaden","ba-videoplayer-tracks.select-text-track-language":"Taal ondertitels","ba-videoplayer-tracks.info-select-locale-first":"Selecteer eerst locale","ba-videoplayer-tracks.select-text-track-file":"Klik om bestand te selecteren","ba-videoplayer-tracks.back":"terug","ba-videorecorder.framerate-warning":"De videoframesnelheid is erg laag. We raden aan om alle andere programma&#x27;s en browsertabs te sluiten of om een &#x200B;&#x200B;snellere computer te gebruiken.","ba-videorecorder.upload-error-duration":"De lengte van de ge&#xFC;ploade video voldoet niet aan de vereisten. Klik hier om opnieuw te proberen.","ba-videorecorder.resolution-constraint-error":"Het bestand dat je hebt geselecteerd komt niet overeen met de vereiste resolutie - klik hier om het opnieuw te proberen.","ba-videorecorder.orientation-portrait-required":"Draai uw apparaat om op te nemen in staande modus.","ba-videorecorder.orientation-landscape-required":"Draai je apparaat om in de liggende modus op te nemen.","ba-imageviewer-controlbar.rerecord-image":"Opnieuw doen?","ba-imageviewer-controlbar.submit-image":"Bevestigen","ba-imageviewer-controlbar.fullscreen-image":"Voer het volledige scherm in","ba-imageviewer-controlbar.exit-fullscreen-image":"Verlaat volledig scherm","ba-imageviewer.image-error":"Er is een fout opgetreden. Probeer het later opnieuw. Klik om opnieuw te proberen.","ba-imagecapture-chooser.image-capture":"Capture Image","ba-imagecapture-chooser.upload-image":"Afbeelding uploaden","ba-imagecapture-controlbar.settings":"instellingen","ba-imagecapture-controlbar.camerahealthy":"Verlichting is goed","ba-imagecapture-controlbar.cameraunhealthy":"Verlichting is niet optimaal","ba-imagecapture-controlbar.record":"Gevangen nemen","ba-imagecapture-controlbar.record-tooltip":"Klik hier om vast te leggen.","ba-imagecapture-controlbar.rerecord":"Opnieuw doen","ba-imagecapture-controlbar.rerecord-tooltip":"Klik hier om opnieuw te doen.","ba-imagecapture-controlbar.cancel":"Annuleer","ba-imagecapture-controlbar.cancel-tooltip":"Klik hier om te annuleren.","ba-audioplayer-controlbar.audio-progress":"Vooruitgang","ba-audioplayer-controlbar.rerecord-audio":"Opnieuw doen?","ba-audioplayer-controlbar.submit-audio":"Bevestigen","ba-audioplayer-controlbar.play-audio":"Spelen","ba-audioplayer-controlbar.pause-audio":"Pauze","ba-audioplayer-controlbar.pause-audio-disabled":"Pauzeren niet ondersteund","ba-audioplayer-controlbar.elapsed-time":"Elasped tijd","ba-audioplayer-controlbar.total-time":"Totale lengte van","ba-audioplayer-controlbar.volume-button":"Volume instellen","ba-audioplayer-controlbar.volume-mute":"Geluid dempen","ba-audioplayer-controlbar.volume-unmute":"Geluid dempen","ba-audioplayer-loader.tooltip":"Bezig met laden...","ba-audioplayer.audio-error":"Er is een fout opgetreden. Probeer het later opnieuw. Klik om opnieuw te proberen.","ba-audiorecorder-chooser.record-audio":"Geluid opnemen","ba-audiorecorder-chooser.upload-audio":"Upload audio","ba-audiorecorder-controlbar.settings":"instellingen","ba-audiorecorder-controlbar.microphonehealthy":"Geluid is goed","ba-audiorecorder-controlbar.microphoneunhealthy":"Kan geen geluid oppikken","ba-audiorecorder-controlbar.record":"Record","ba-audiorecorder-controlbar.record-tooltip":"Klik hier om op te nemen.","ba-audiorecorder-controlbar.rerecord":"Opnieuw doen","ba-audiorecorder-controlbar.rerecord-tooltip":"Klik hier om opnieuw te doen.","ba-audiorecorder-controlbar.stop":"Hou op","ba-audiorecorder-controlbar.stop-tooltip":"Klik hier om te stoppen.","ba-audiorecorder-controlbar.stop-available-after":"Minimale opnametijd is %d seconden","ba-audiorecorder-controlbar.cancel":"Annuleer","ba-audiorecorder-controlbar.cancel-tooltip":"Klik hier om te annuleren."},"language:no":{"ba-videoplayer-playbutton.tooltip":"Klikk for &#xE5; spille video.","ba-videoplayer-playbutton.rerecord":"Gj&#xF8;re om","ba-videoplayer-playbutton.submit-video":"bekreft video","ba-videoplayer-loader.tooltip":"Laster video ...","ba-videoplayer-controlbar.change-resolution":"Endre oppl&#xF8;sning","ba-videoplayer-controlbar.video-progress":"video fremgang","ba-videoplayer-controlbar.rerecord-video":"Gj&#xF8;r om videoen?","ba-videoplayer-controlbar.submit-video":"bekreft video","ba-videoplayer-controlbar.play-video":"spill video","ba-videoplayer-controlbar.pause-video":"pause video","ba-videoplayer-controlbar.elapsed-time":"Elasped tid","ba-videoplayer-controlbar.total-time":"Total lengde p&#xE5; video","ba-videoplayer-controlbar.fullscreen-video":"Skriv fullskjerm","ba-videoplayer-controlbar.volume-button":"Still inn volum","ba-videoplayer-controlbar.volume-mute":"lyd","ba-videoplayer-controlbar.volume-unmute":"lyd","ba-videoplayer.video-error":"En feil oppstod. Vennligst pr&#xF8;v igjen senere. Klikk for &#xE5; pr&#xF8;ve p&#xE5; nytt.","ba-videorecorder-chooser.record-video":"Spill av video","ba-videorecorder-chooser.upload-video":"Last opp video","ba-videorecorder-controlbar.settings":"innstillinger","ba-videorecorder-controlbar.camerahealthy":"Belysning er god","ba-videorecorder-controlbar.cameraunhealthy":"Belysning er ikke optimal","ba-videorecorder-controlbar.microphonehealthy":"Lyden er god","ba-videorecorder-controlbar.microphoneunhealthy":"Kan ikke plukke opp noen lyd","ba-videorecorder-controlbar.record":"Ta opp","ba-videorecorder-controlbar.record-tooltip":"Klikk her for &#xE5; spille inn.","ba-videorecorder-controlbar.rerecord":"Gj&#xF8;re om","ba-videorecorder-controlbar.rerecord-tooltip":"Klikk her for &#xE5; gj&#xF8;re om.","ba-videorecorder-controlbar.upload-covershot":"Laste opp","ba-videorecorder-controlbar.upload-covershot-tooltip":"Klikk her for &#xE5; laste opp egendefinerte dekke skudd","ba-videorecorder-controlbar.stop":"Stoppe","ba-videorecorder-controlbar.stop-tooltip":"Klikk her for &#xE5; stoppe.","ba-videorecorder-controlbar.skip":"Hopp","ba-videorecorder-controlbar.skip-tooltip":"Klikk her for &#xE5; hoppe.","ba-videorecorder.recorder-error":"En feil oppstod. Vennligst pr&#xF8;v igjen senere. Klikk for &#xE5; pr&#xF8;ve p&#xE5; nytt.","ba-videorecorder.attach-error":"Vi kunne ikke f&#xE5; tilgang til kameraet grensesnitt. Avhengig av enheten og nettleser, kan det hende du m&#xE5; installere Flash eller tilgang til siden via SSL.","ba-videorecorder.access-forbidden":"Tilgang til kameraet ble forbudt. Klikk for &#xE5; pr&#xF8;ve p&#xE5; nytt.","ba-videorecorder.pick-covershot":"Plukk en covershot.","ba-videorecorder.uploading":"Laster opp","ba-videorecorder.uploading-failed":"Opplasting mislyktes - klikk her for &#xE5; pr&#xF8;ve p&#xE5; nytt.","ba-videorecorder.verifying":"Bekrefter","ba-videorecorder.verifying-failed":"Bekrefter mislyktes - klikk her for &#xE5; pr&#xF8;ve p&#xE5; nytt.","ba-videorecorder.rerecord-confirm":"Har du virkelig &#xF8;nsker &#xE5; gj&#xF8;re om videoen?","ba-videorecorder.video_file_too_large":"Videofilen er for stor (%s) - klikk her for &#xE5; pr&#xF8;ve p&#xE5; nytt med en mindre videofil.","ba-videorecorder.unsupported_video_type":"Last opp: %s - klikk her for &#xE5; pr&#xF8;ve p&#xE5; nytt.","ba-videoplayer-controlbar.exit-fullscreen-video":"Avslutt fullskjerm","ba-videoplayer-share.share":"Del video","ba-videorecorder-chooser.record-screen":"Opptaksskjerm","ba-videoplayer-controlbar.pause-video-disabled":"Pause ikke st&#xF8;ttet","ba-videorecorder-chooser.record-audio":"Ta opp lyd","ba-videorecorder-controlbar.stop-available-after":"Minimum opptakstid er %d sekunder","ba-videorecorder-controlbar.cancel":"Avbryt","ba-videorecorder-controlbar.cancel-tooltip":"Klikk her for &#xE5; avbryte.","ba-videorecorder.cancel-confirm":"Vil du virkelig slette videoopplasting?","ba-videoplayer-adslot.elapsed-time":"Elasped tid","ba-videoplayer-adslot.volume-button":"Angi volum","ba-videoplayer-adslot.volume-mute":"Dempe lyd","ba-videoplayer-adslot.volume-unmute":"Sl&#xE5; av lyden","ba-videoplayer-adslot.ad-will-end-after":"Annonsen slutter etter %s","ba-videoplayer-adslot.can-skip-after":"Hopp over etter %d","ba-videoplayer-adslot.skip-ad":"Hopp over annonse","ba-videorecorder.software-required":"Vennligst klikk nedenfor for &#xE5; installere / aktivere f&#xF8;lgende krav for &#xE5; fortsette.","ba-videorecorder.software-waiting":"Venter p&#xE5; kravene som skal installeres / aktiveres. Du m&#xE5; kanskje oppdatere siden etter ferdigstillelse.","ba-videoplayer-controlbar.close-tracks":"Lukk CC","ba-videoplayer-controlbar.show-tracks":"Vis CC","ba-videoplayer-tracks.upload-text-tracks":"Last opp tekstfilfiler","ba-videoplayer-tracks.select-text-track-language":"Undertekst Spr&#xE5;k","ba-videoplayer-tracks.info-select-locale-first":"Velg f&#xF8;rst spr&#xE5;k","ba-videoplayer-tracks.select-text-track-file":"Klikk for &#xE5; velge fil","ba-videoplayer-tracks.back":"tilbake","ba-videorecorder.framerate-warning":"Videorammen er sv&#xE6;rt lav. Vi anbefaler at du lukker alle andre programmer og nettleserfliker eller bruker en raskere datamaskin.","ba-videorecorder.upload-error-duration":"Lengden p&#xE5; den opplastede videoen oppfyller ikke kravene - klikk her for &#xE5; pr&#xF8;ve p&#xE5; nytt.","ba-videorecorder.resolution-constraint-error":"Filen du har valgt stemmer ikke overens med &#xF8;nsket oppl&#xF8;sning - klikk her for &#xE5; pr&#xF8;ve p&#xE5; nytt.","ba-videorecorder.orientation-portrait-required":"Vennligst roter enheten til &#xE5; ta opp i st&#xE5;ende modus.","ba-videorecorder.orientation-landscape-required":"Vennligst roter enheten til &#xE5; ta opp i liggende modus.","ba-imageviewer-controlbar.rerecord-image":"Gj&#xF8;re om?","ba-imageviewer-controlbar.submit-image":"Bekrefte","ba-imageviewer-controlbar.fullscreen-image":"Skriv inn fullskjerm","ba-imageviewer-controlbar.exit-fullscreen-image":"Avslutt fullskjerm","ba-imageviewer.image-error":"En feil oppstod. Vennligst pr&#xF8;v igjen senere. Klikk for &#xE5; pr&#xF8;ve igjen.","ba-imagecapture-chooser.image-capture":"Capture Image","ba-imagecapture-chooser.upload-image":"Last opp bilde","ba-imagecapture-controlbar.settings":"innstillinger","ba-imagecapture-controlbar.camerahealthy":"Belysning er bra","ba-imagecapture-controlbar.cameraunhealthy":"Belysning er ikke optimal","ba-imagecapture-controlbar.record":"Capture","ba-imagecapture-controlbar.record-tooltip":"Klikk her for &#xE5; fange.","ba-imagecapture-controlbar.rerecord":"Gj&#xF8;re om","ba-imagecapture-controlbar.rerecord-tooltip":"Klikk her for &#xE5; gjenta.","ba-imagecapture-controlbar.cancel":"Avbryt","ba-imagecapture-controlbar.cancel-tooltip":"Klikk her for &#xE5; avbryte.","ba-audioplayer-controlbar.audio-progress":"Framgang","ba-audioplayer-controlbar.rerecord-audio":"Gj&#xF8;re om?","ba-audioplayer-controlbar.submit-audio":"Bekrefte","ba-audioplayer-controlbar.play-audio":"Spille","ba-audioplayer-controlbar.pause-audio":"Pause","ba-audioplayer-controlbar.pause-audio-disabled":"Pause ikke st&#xF8;ttet","ba-audioplayer-controlbar.elapsed-time":"Elasped tid","ba-audioplayer-controlbar.total-time":"Total lengde p&#xE5;","ba-audioplayer-controlbar.volume-button":"Angi volum","ba-audioplayer-controlbar.volume-mute":"Dempe lyd","ba-audioplayer-controlbar.volume-unmute":"Sl&#xE5; av lyden","ba-audioplayer-loader.tooltip":"Laster ...","ba-audioplayer.audio-error":"En feil oppstod. Vennligst pr&#xF8;v igjen senere. Klikk for &#xE5; pr&#xF8;ve igjen.","ba-audiorecorder-chooser.record-audio":"Ta opp lyd","ba-audiorecorder-chooser.upload-audio":"Last opp lyd","ba-audiorecorder-controlbar.settings":"innstillinger","ba-audiorecorder-controlbar.microphonehealthy":"Lyden er god","ba-audiorecorder-controlbar.microphoneunhealthy":"Kan ikke hente lyd","ba-audiorecorder-controlbar.record":"Ta opp","ba-audiorecorder-controlbar.record-tooltip":"Klikk her for &#xE5; spille inn.","ba-audiorecorder-controlbar.rerecord":"Gj&#xF8;re om","ba-audiorecorder-controlbar.rerecord-tooltip":"Klikk her for &#xE5; gjenta.","ba-audiorecorder-controlbar.stop":"Stoppe","ba-audiorecorder-controlbar.stop-tooltip":"Klikk her for &#xE5; stoppe.","ba-audiorecorder-controlbar.stop-available-after":"Minimum opptakstid er %d sekunder","ba-audiorecorder-controlbar.cancel":"Avbryt","ba-audiorecorder-controlbar.cancel-tooltip":"Klikk her for &#xE5; avbryte."},"language:pl":{"ba-videoplayer-playbutton.tooltip":"Kliknij, aby odtworzy&#x107; film.","ba-videoplayer-playbutton.rerecord":"Przerobi&#x107;","ba-videoplayer-playbutton.submit-video":"Potwierd&#x17A; wideo","ba-videoplayer-loader.tooltip":"&#x141;adowanie wideo ...","ba-videoplayer-controlbar.change-resolution":"zmiana rozdzielczo&#x15B;ci","ba-videoplayer-controlbar.video-progress":"post&#x119;p wideo","ba-videoplayer-controlbar.rerecord-video":"Redo wideo?","ba-videoplayer-controlbar.submit-video":"Potwierd&#x17A; wideo","ba-videoplayer-controlbar.play-video":"play video","ba-videoplayer-controlbar.pause-video":"Pauza wideo","ba-videoplayer-controlbar.elapsed-time":"czas, jaki up&#x142;yn&#x105;&#x142;","ba-videoplayer-controlbar.total-time":"Ca&#x142;kowita d&#x142;ugo&#x15B;&#x107; wideo","ba-videoplayer-controlbar.fullscreen-video":"Otworzy&#x107; w trybie pe&#x142;noekranowym","ba-videoplayer-controlbar.volume-button":"Ustaw g&#x142;o&#x15B;no&#x15B;&#x107;","ba-videoplayer-controlbar.volume-mute":"Wycisz d&#x17A;wi&#x119;k","ba-videoplayer-controlbar.volume-unmute":"W&#x142;&#x105;cz d&#x17A;wi&#x119;k","ba-videoplayer.video-error":"Wyst&#x105;pi&#x142; b&#x142;&#x105;d. Prosz&#x119; spr&#xF3;bowa&#x107; p&#xF3;&#x17A;niej. Kliknij, aby ponowi&#x107; pr&#xF3;b&#x119;.","ba-videorecorder-chooser.record-video":"Nagraj wideo","ba-videorecorder-chooser.upload-video":"Prze&#x15B;lij wideo","ba-videorecorder-controlbar.settings":"Ustawienia","ba-videorecorder-controlbar.camerahealthy":"O&#x15B;wietlenie jest dobre","ba-videorecorder-controlbar.cameraunhealthy":"O&#x15B;wietlenie nie jest optymalna","ba-videorecorder-controlbar.microphonehealthy":"D&#x17A;wi&#x119;k jest dobry","ba-videorecorder-controlbar.microphoneunhealthy":"Nie mog&#x119; odebra&#x107; &#x17C;adnego d&#x17A;wi&#x119;ku","ba-videorecorder-controlbar.record":"Rekord","ba-videorecorder-controlbar.record-tooltip":"Kliknij tutaj, aby nagra&#x107;.","ba-videorecorder-controlbar.rerecord":"Przerobi&#x107;","ba-videorecorder-controlbar.rerecord-tooltip":"Kliknij tutaj, aby ponowi&#x107;.","ba-videorecorder-controlbar.upload-covershot":"Przekaza&#x107; plik","ba-videorecorder-controlbar.upload-covershot-tooltip":"Kliknij tu aby przes&#x142;a&#x107; niestandardowy ok&#x142;adk&#x119; strza&#x142;","ba-videorecorder-controlbar.stop":"Zatrzymaj si&#x119;","ba-videorecorder-controlbar.stop-tooltip":"Kliknij tutaj, aby zatrzyma&#x107;.","ba-videorecorder-controlbar.skip":"Pomin&#x105;&#x107;","ba-videorecorder-controlbar.skip-tooltip":"Kliknij tutaj, aby przej&#x15B;&#x107;.","ba-videorecorder.recorder-error":"Wyst&#x105;pi&#x142; b&#x142;&#x105;d. Prosz&#x119; spr&#xF3;bowa&#x107; p&#xF3;&#x17A;niej. Kliknij, aby ponowi&#x107; pr&#xF3;b&#x119;.","ba-videorecorder.attach-error":"Nie mogli&#x15B;my uzyska&#x107; dost&#x119;p do interfejsu aparatu. W zale&#x17C;no&#x15B;ci od urz&#x105;dzenia i przegl&#x105;darki, mo&#x17C;e by&#x107; konieczne zainstalowanie Flash lub wej&#x15B;&#x107; na stron&#x119; za po&#x15B;rednictwem protoko&#x142;u SSL.","ba-videorecorder.access-forbidden":"Dost&#x119;p do kamery by&#x142;o zabronione. Kliknij, aby ponowi&#x107; pr&#xF3;b&#x119;.","ba-videorecorder.pick-covershot":"Wybierz covershot.","ba-videorecorder.uploading":"Przesy&#x142;anie","ba-videorecorder.uploading-failed":"Przesy&#x142;anie nie powiod&#x142;o si&#x119; - kliknij tutaj, aby ponowi&#x107; pr&#xF3;b&#x119;.","ba-videorecorder.verifying":"Weryfikacja","ba-videorecorder.verifying-failed":"Sprawdzanie poprawno&#x15B;ci nie powiod&#x142;o si&#x119; - kliknij tutaj, aby ponowi&#x107; pr&#xF3;b&#x119;.","ba-videorecorder.rerecord-confirm":"Czy na pewno chcesz przerobi&#x107; sw&#xF3;j film?","ba-videorecorder.video_file_too_large":"Plik wideo jest zbyt du&#x17C;a (%s) - kliknij tutaj, aby spr&#xF3;bowa&#x107; ponownie z mniejszym pliku wideo.","ba-videorecorder.unsupported_video_type":"Prosz&#x119; przes&#x142;a&#x107;: %s - kliknij tutaj, aby ponowi&#x107; pr&#xF3;b&#x119;.","ba-videoplayer-controlbar.exit-fullscreen-video":"Zamknij pe&#x142;ny ekran","ba-videoplayer-share.share":"Udost&#x119;pnij film","ba-videorecorder-chooser.record-screen":"Ekran nagrywania","ba-videoplayer-controlbar.pause-video-disabled":"Wstrzymanie nie jest obs&#x142;ugiwane","ba-videorecorder-chooser.record-audio":"Nagra&#x107; d&#x17A;wi&#x119;k","ba-videorecorder-controlbar.stop-available-after":"Minimalny czas nagrywania to %d sekund","ba-videorecorder-controlbar.cancel":"Anuluj","ba-videorecorder-controlbar.cancel-tooltip":"Kliknij tutaj, aby anulowa&#x107;.","ba-videorecorder.cancel-confirm":"Czy na pewno chcesz anulowa&#x107; przesy&#x142;anie wideo?","ba-videoplayer-adslot.elapsed-time":"Wyd&#x142;u&#x17C;ony czas","ba-videoplayer-adslot.volume-button":"Ustaw g&#x142;o&#x15B;no&#x15B;&#x107;","ba-videoplayer-adslot.volume-mute":"Wycisz d&#x17A;wi&#x119;k","ba-videoplayer-adslot.volume-unmute":"W&#x142;&#x105;cz d&#x17A;wi&#x119;k","ba-videoplayer-adslot.ad-will-end-after":"Reklama zako&#x144;czy si&#x119; po %s","ba-videoplayer-adslot.can-skip-after":"Pomi&#x144; po %d","ba-videoplayer-adslot.skip-ad":"Pomi&#x144; reklam&#x119;","ba-videorecorder.software-required":"Kliknij poni&#x17C;ej, aby zainstalowa&#x107; / aktywowa&#x107; nast&#x119;puj&#x105;ce wymagania, aby kontynuowa&#x107;.","ba-videorecorder.software-waiting":"Oczekiwanie na zainstalowanie / aktywacj&#x119; wymaga&#x144;. Po zako&#x144;czeniu mo&#x17C;e by&#x107; konieczne od&#x15B;wie&#x17C;enie strony.","ba-videoplayer-controlbar.close-tracks":"Zamknij CC","ba-videoplayer-controlbar.show-tracks":"Poka&#x17C; CC","ba-videoplayer-tracks.upload-text-tracks":"Prze&#x15B;lij pliki tekstowe &#x15B;ladu","ba-videoplayer-tracks.select-text-track-language":"J&#x119;zyk napis&#xF3;w","ba-videoplayer-tracks.info-select-locale-first":"Najpierw wybierz ustawienia regionalne","ba-videoplayer-tracks.select-text-track-file":"Kliknij, aby wybra&#x107; plik","ba-videoplayer-tracks.back":"plecy","ba-videorecorder.framerate-warning":"Szybko&#x15B;&#x107; klatek wideo jest bardzo niska. Zalecamy zamkni&#x119;cie wszystkich innych program&#xF3;w i kart przegl&#x105;darki lub u&#x17C;ycie szybszego komputera.","ba-videorecorder.upload-error-duration":"D&#x142;ugo&#x15B;&#x107; przes&#x142;anego filmu nie spe&#x142;nia wymaga&#x144; - kliknij tutaj, aby spr&#xF3;bowa&#x107; ponownie.","ba-videorecorder.resolution-constraint-error":"Wybrany plik nie pasuje do wymaganej rozdzielczo&#x15B;ci - kliknij tutaj, aby spr&#xF3;bowa&#x107; ponownie.","ba-videorecorder.orientation-portrait-required":"Obr&#xF3;&#x107; urz&#x105;dzenie, aby nagrywa&#x107; w trybie portretu.","ba-videorecorder.orientation-landscape-required":"Obr&#xF3;&#x107; urz&#x105;dzenie, aby nagrywa&#x107; w trybie poziomym.","ba-imageviewer-controlbar.rerecord-image":"Przerobi&#x107;?","ba-imageviewer-controlbar.submit-image":"Potwierdza&#x107;","ba-imageviewer-controlbar.fullscreen-image":"Wejd&#x17A; na pe&#x142;ny ekran","ba-imageviewer-controlbar.exit-fullscreen-image":"Wy&#x142;&#x105;czy&#x107; tryb pe&#x142;noekranowy","ba-imageviewer.image-error":"Wyst&#x105;pi&#x142; b&#x142;&#x105;d. Prosz&#x119; spr&#xF3;bowa&#x107; p&#xF3;&#x17A;niej. Kliknij, aby spr&#xF3;bowa&#x107; jeszcze raz.","ba-imagecapture-chooser.image-capture":"Zr&#xF3;b zdj&#x119;cie","ba-imagecapture-chooser.upload-image":"Za&#x142;aduj obrazek","ba-imagecapture-controlbar.settings":"Ustawienia","ba-imagecapture-controlbar.camerahealthy":"O&#x15B;wietlenie jest dobre","ba-imagecapture-controlbar.cameraunhealthy":"O&#x15B;wietlenie nie jest optymalne","ba-imagecapture-controlbar.record":"Zdoby&#x107;","ba-imagecapture-controlbar.record-tooltip":"Kliknij tutaj, aby uchwyci&#x107;.","ba-imagecapture-controlbar.rerecord":"Przerobi&#x107;","ba-imagecapture-controlbar.rerecord-tooltip":"Kliknij tutaj, aby przerobi&#x107;.","ba-imagecapture-controlbar.cancel":"Anuluj","ba-imagecapture-controlbar.cancel-tooltip":"Kliknij tutaj, aby anulowa&#x107;.","ba-audioplayer-controlbar.audio-progress":"Post&#x119;p","ba-audioplayer-controlbar.rerecord-audio":"Przerobi&#x107;?","ba-audioplayer-controlbar.submit-audio":"Potwierdza&#x107;","ba-audioplayer-controlbar.play-audio":"Gra&#x107;","ba-audioplayer-controlbar.pause-audio":"Pauza","ba-audioplayer-controlbar.pause-audio-disabled":"Wstrzymanie nie jest obs&#x142;ugiwane","ba-audioplayer-controlbar.elapsed-time":"Wyd&#x142;u&#x17C;ony czas","ba-audioplayer-controlbar.total-time":"Ca&#x142;kowita d&#x142;ugo&#x15B;&#x107;","ba-audioplayer-controlbar.volume-button":"Ustaw g&#x142;o&#x15B;no&#x15B;&#x107;","ba-audioplayer-controlbar.volume-mute":"Wycisz d&#x17A;wi&#x119;k","ba-audioplayer-controlbar.volume-unmute":"W&#x142;&#x105;cz d&#x17A;wi&#x119;k","ba-audioplayer-loader.tooltip":"&#x141;aduj&#x119;...","ba-audioplayer.audio-error":"Wyst&#x105;pi&#x142; b&#x142;&#x105;d. Prosz&#x119; spr&#xF3;bowa&#x107; p&#xF3;&#x17A;niej. Kliknij, aby spr&#xF3;bowa&#x107; jeszcze raz.","ba-audiorecorder-chooser.record-audio":"Nagra&#x107; d&#x17A;wi&#x119;k","ba-audiorecorder-chooser.upload-audio":"Prze&#x15B;lij audio","ba-audiorecorder-controlbar.settings":"Ustawienia","ba-audiorecorder-controlbar.microphonehealthy":"D&#x17A;wi&#x119;k jest dobry","ba-audiorecorder-controlbar.microphoneunhealthy":"Nie mo&#x17C;na odebra&#x107; &#x17C;adnego d&#x17A;wi&#x119;ku","ba-audiorecorder-controlbar.record":"Rekord","ba-audiorecorder-controlbar.record-tooltip":"Kliknij tutaj, aby nagra&#x107;.","ba-audiorecorder-controlbar.rerecord":"Przerobi&#x107;","ba-audiorecorder-controlbar.rerecord-tooltip":"Kliknij tutaj, aby przerobi&#x107;.","ba-audiorecorder-controlbar.stop":"Zatrzyma&#x107;","ba-audiorecorder-controlbar.stop-tooltip":"Kliknij tutaj, aby zatrzyma&#x107;.","ba-audiorecorder-controlbar.stop-available-after":"Minimalny czas nagrywania to %d sekund","ba-audiorecorder-controlbar.cancel":"Anuluj","ba-audiorecorder-controlbar.cancel-tooltip":"Kliknij tutaj, aby anulowa&#x107;."},"language:pt-br":{"ba-videoplayer-playbutton.tooltip":"Clique para reproduzir v&#xED;deo.","ba-videoplayer-playbutton.rerecord":"Refazer","ba-videoplayer-playbutton.submit-video":"confirmar v&#xED;deo","ba-videoplayer-loader.tooltip":"Carregando v&#xED;deo ...","ba-videoplayer-controlbar.change-resolution":"altera&#xE7;&#xE3;o de resolu&#xE7;&#xE3;o","ba-videoplayer-controlbar.video-progress":"o progresso de v&#xED;deo","ba-videoplayer-controlbar.rerecord-video":"Refazer v&#xED;deo?","ba-videoplayer-controlbar.submit-video":"confirmar v&#xED;deo","ba-videoplayer-controlbar.play-video":"reprodu&#xE7;&#xE3;o de v&#xED;deo","ba-videoplayer-controlbar.pause-video":"v&#xED;deo pausa","ba-videoplayer-controlbar.elapsed-time":"tempo elasped","ba-videoplayer-controlbar.total-time":"comprimento total de v&#xED;deo","ba-videoplayer-controlbar.fullscreen-video":"Entrar em tela cheia","ba-videoplayer-controlbar.volume-button":"volume definido","ba-videoplayer-controlbar.volume-mute":"som Mute","ba-videoplayer-controlbar.volume-unmute":"ativar o som","ba-videoplayer.video-error":"Ocorreu um erro. Por favor tente novamente mais tarde. Clique para tentar novamente.","ba-videorecorder-chooser.record-video":"Grave o seu v&#xED;deo","ba-videorecorder-chooser.upload-video":"Upload video","ba-videorecorder-controlbar.settings":"Configura&#xE7;&#xF5;es","ba-videorecorder-controlbar.camerahealthy":"A ilumina&#xE7;&#xE3;o &#xE9; boa","ba-videorecorder-controlbar.cameraunhealthy":"Ilumina&#xE7;&#xE3;o n&#xE3;o &#xE9; o ideal","ba-videorecorder-controlbar.microphonehealthy":"O som &#xE9; bom","ba-videorecorder-controlbar.microphoneunhealthy":"n&#xE3;o pode pegar qualquer som","ba-videorecorder-controlbar.record":"Registro","ba-videorecorder-controlbar.record-tooltip":"Clique aqui para registrar.","ba-videorecorder-controlbar.rerecord":"Refazer","ba-videorecorder-controlbar.rerecord-tooltip":"Clique aqui para refazer.","ba-videorecorder-controlbar.upload-covershot":"Envio","ba-videorecorder-controlbar.upload-covershot-tooltip":"Clique aqui para enviar capa personalizada tiro","ba-videorecorder-controlbar.stop":"Pare","ba-videorecorder-controlbar.stop-tooltip":"Clique aqui para parar.","ba-videorecorder-controlbar.skip":"Pular","ba-videorecorder-controlbar.skip-tooltip":"Clique aqui para pular.","ba-videorecorder.recorder-error":"Ocorreu um erro. Por favor tente novamente mais tarde. Clique para tentar novamente.","ba-videorecorder.attach-error":"N&#xF3;s n&#xE3;o poderia acessar a interface da c&#xE2;mera. Dependendo do dispositivo e navegador, pode ser necess&#xE1;rio instalar o Flash ou acessar a p&#xE1;gina atrav&#xE9;s de SSL.","ba-videorecorder.access-forbidden":"foi proibido o acesso &#xE0; c&#xE2;mera. Clique para tentar novamente.","ba-videorecorder.pick-covershot":"Escolha um covershot.","ba-videorecorder.uploading":"upload","ba-videorecorder.uploading-failed":"Upload falhou - clique aqui para tentar novamente.","ba-videorecorder.verifying":"Verificando","ba-videorecorder.verifying-failed":"Verificando falhou - clique aqui para tentar novamente.","ba-videorecorder.rerecord-confirm":"Voc&#xEA; realmente quer refazer seu v&#xED;deo?","ba-videorecorder.video_file_too_large":"O arquivo de v&#xED;deo &#xE9; muito grande (%s) - clique aqui para tentar novamente com um arquivo de v&#xED;deo menor.","ba-videorecorder.unsupported_video_type":"Fa&#xE7;a o upload: %s - clique aqui para tentar novamente.","ba-videoplayer-controlbar.exit-fullscreen-video":"Sair do ecr&#xE3; inteiro","ba-videoplayer-share.share":"Compartilhar video","ba-videorecorder-chooser.record-screen":"Tela de registro","ba-videoplayer-controlbar.pause-video-disabled":"Pausa n&#xE3;o suportada","ba-videorecorder-chooser.record-audio":"Gravar audio","ba-videorecorder-controlbar.stop-available-after":"O tempo m&#xED;nimo de grava&#xE7;&#xE3;o &#xE9; %d segundos","ba-videorecorder-controlbar.cancel":"Cancelar","ba-videorecorder-controlbar.cancel-tooltip":"Clique aqui para cancelar.","ba-videorecorder.cancel-confirm":"Voc&#xEA; deseja realmente cancelar o upload de seu v&#xED;deo?","ba-videoplayer-adslot.elapsed-time":"Tempo Elasped","ba-videoplayer-adslot.volume-button":"Definir volume","ba-videoplayer-adslot.volume-mute":"Som mudo","ba-videoplayer-adslot.volume-unmute":"Somar som","ba-videoplayer-adslot.ad-will-end-after":"O an&#xFA;ncio terminar&#xE1; ap&#xF3;s %s","ba-videoplayer-adslot.can-skip-after":"Ignorar ap&#xF3;s %d","ba-videoplayer-adslot.skip-ad":"Pular An&#xFA;ncio","ba-videorecorder.software-required":"Clique abaixo para instalar / ativar os seguintes requisitos para prosseguir.","ba-videorecorder.software-waiting":"Esperando que os requisitos sejam instalados / ativados. Talvez seja necess&#xE1;rio atualizar a p&#xE1;gina ap&#xF3;s a conclus&#xE3;o.","ba-videoplayer-controlbar.close-tracks":"Fechar CC","ba-videoplayer-controlbar.show-tracks":"Mostrar CC","ba-videoplayer-tracks.upload-text-tracks":"Carregar arquivos de texto da faixa","ba-videoplayer-tracks.select-text-track-language":"Idioma das legendas","ba-videoplayer-tracks.info-select-locale-first":"Primeiro selecione o local","ba-videoplayer-tracks.select-text-track-file":"Clique para selecionar o arquivo","ba-videoplayer-tracks.back":"costas","ba-videorecorder.framerate-warning":"A taxa de quadros do v&#xED;deo &#xE9; muito baixa. Recomendamos fechar todos os outros programas e guias do navegador ou usar um computador mais r&#xE1;pido.","ba-videorecorder.upload-error-duration":"A dura&#xE7;&#xE3;o do v&#xED;deo enviado n&#xE3;o atende aos requisitos. Clique aqui para tentar novamente.","ba-videorecorder.resolution-constraint-error":"O arquivo que voc&#xEA; selecionou n&#xE3;o corresponde &#xE0; resolu&#xE7;&#xE3;o necess&#xE1;ria - clique aqui para tentar novamente.","ba-videorecorder.orientation-portrait-required":"Por favor, gire seu dispositivo para gravar no modo retrato.","ba-videorecorder.orientation-landscape-required":"Por favor, gire seu dispositivo para gravar no modo paisagem.","ba-imageviewer-controlbar.rerecord-image":"Refazer","ba-imageviewer-controlbar.submit-image":"confirme","ba-imageviewer-controlbar.fullscreen-image":"Entrar em tela cheia","ba-imageviewer-controlbar.exit-fullscreen-image":"Sair da tela cheia","ba-imageviewer.image-error":"Ocorreu um erro. Por favor tente novamente mais tarde. Clique para tentar novamente.","ba-imagecapture-chooser.image-capture":"Capturar imagem","ba-imagecapture-chooser.upload-image":"Enviar Imagem","ba-imagecapture-controlbar.settings":"Configura&#xE7;&#xF5;es","ba-imagecapture-controlbar.camerahealthy":"Ilumina&#xE7;&#xE3;o &#xE9; boa","ba-imagecapture-controlbar.cameraunhealthy":"Ilumina&#xE7;&#xE3;o n&#xE3;o &#xE9; ideal","ba-imagecapture-controlbar.record":"Capturar","ba-imagecapture-controlbar.record-tooltip":"Clique aqui para capturar.","ba-imagecapture-controlbar.rerecord":"Refazer","ba-imagecapture-controlbar.rerecord-tooltip":"Clique aqui para refazer.","ba-imagecapture-controlbar.cancel":"Cancelar","ba-imagecapture-controlbar.cancel-tooltip":"Clique aqui para cancelar.","ba-audioplayer-controlbar.audio-progress":"Progresso","ba-audioplayer-controlbar.rerecord-audio":"Refazer","ba-audioplayer-controlbar.submit-audio":"confirme","ba-audioplayer-controlbar.play-audio":"Toque","ba-audioplayer-controlbar.pause-audio":"Pausa","ba-audioplayer-controlbar.pause-audio-disabled":"Pausa n&#xE3;o suportada","ba-audioplayer-controlbar.elapsed-time":"Tempo sa&#xED;do","ba-audioplayer-controlbar.total-time":"Comprimento total de","ba-audioplayer-controlbar.volume-button":"Definir volume","ba-audioplayer-controlbar.volume-mute":"Som mudo","ba-audioplayer-controlbar.volume-unmute":"Ativar som","ba-audioplayer-loader.tooltip":"Carregando...","ba-audioplayer.audio-error":"Ocorreu um erro. Por favor tente novamente mais tarde. Clique para tentar novamente.","ba-audiorecorder-chooser.record-audio":"Gravar audio","ba-audiorecorder-chooser.upload-audio":"Carregar &#xE1;udio","ba-audiorecorder-controlbar.settings":"Configura&#xE7;&#xF5;es","ba-audiorecorder-controlbar.microphonehealthy":"Som &#xE9; bom","ba-audiorecorder-controlbar.microphoneunhealthy":"N&#xE3;o &#xE9; poss&#xED;vel captar nenhum som","ba-audiorecorder-controlbar.record":"Registro","ba-audiorecorder-controlbar.record-tooltip":"Clique aqui para gravar.","ba-audiorecorder-controlbar.rerecord":"Refazer","ba-audiorecorder-controlbar.rerecord-tooltip":"Clique aqui para refazer.","ba-audiorecorder-controlbar.stop":"Pare","ba-audiorecorder-controlbar.stop-tooltip":"Clique aqui para parar.","ba-audiorecorder-controlbar.stop-available-after":"Tempo m&#xED;nimo de grava&#xE7;&#xE3;o &#xE9; de %d segundos","ba-audiorecorder-controlbar.cancel":"Cancelar","ba-audiorecorder-controlbar.cancel-tooltip":"Clique aqui para cancelar."},"language:pt":{"ba-videoplayer-playbutton.tooltip":"Clique para ver","ba-videoplayer-playbutton.rerecord":"Repetir","ba-videoplayer-playbutton.submit-video":"Enviar v&#xED;deo","ba-videoplayer-loader.tooltip":"A Carregar...","ba-videoplayer-controlbar.change-resolution":"Alterar resolu&#xE7;&#xE3;o","ba-videoplayer-controlbar.video-progress":"Progress&#xE3;o","ba-videoplayer-controlbar.rerecord-video":"Repetir?","ba-videoplayer-controlbar.submit-video":"Confirmar","ba-videoplayer-controlbar.play-video":"Ver V&#xED;deo","ba-videoplayer-controlbar.pause-video":"Pausa","ba-videoplayer-controlbar.elapsed-time":"Tempo decorrido","ba-videoplayer-controlbar.total-time":"Tempo Total","ba-videoplayer-controlbar.fullscreen-video":"Modo ecr&#xE3; inteiro","ba-videoplayer-controlbar.volume-button":"Definir volume","ba-videoplayer-controlbar.volume-mute":"Som silencioso","ba-videoplayer-controlbar.volume-unmute":"Aumentar Som","ba-videoplayer.video-error":"Ocorreu um erro. Por favor tente de novo mais tarde. Clique para tentar novamente.","ba-videorecorder-chooser.record-video":"Gravar V&#xED;deo","ba-videorecorder-chooser.upload-video":"Enviar V&#xED;deo","ba-videorecorder-controlbar.settings":"Configura&#xE7;&#xF5;es","ba-videorecorder-controlbar.camerahealthy":"A ilumina&#xE7;&#xE3;o &#xE9; boa","ba-videorecorder-controlbar.cameraunhealthy":"A ilumina&#xE7;&#xE3;o n&#xE3;o &#xE9; a ideal","ba-videorecorder-controlbar.microphonehealthy":"O som est&#xE1; bom","ba-videorecorder-controlbar.microphoneunhealthy":"N&#xE3;o foi poss&#xED;vel ouvir nenhum som","ba-videorecorder-controlbar.record":"Gravar","ba-videorecorder-controlbar.record-tooltip":"Clique aqui para gravar","ba-videorecorder-controlbar.rerecord":"Repetir","ba-videorecorder-controlbar.rerecord-tooltip":"Clique aqui para repetir","ba-videorecorder-controlbar.upload-covershot":"Enviar","ba-videorecorder-controlbar.upload-covershot-tooltip":"Clique aqui para enviar a captura de capa personalizada","ba-videorecorder-controlbar.stop":"Parar","ba-videorecorder-controlbar.stop-tooltip":"Clique aqui para parar","ba-videorecorder-controlbar.skip":"Ignorar","ba-videorecorder-controlbar.skip-tooltip":"Clique aqui para ignorar","ba-videorecorder.recorder-error":"Ocorreu um erro. Por favor tente novamente mais tarde. Clique para tentar novamente.","ba-videorecorder.attach-error":"N&#xE3;o conseguimos aceder &#xE0; c&#xE2;mara. Dependendo do dispositivo e do navegador, pode ser necess&#xE1;rio instalar o Flash ou aceder &#xE0; p&#xE1;gina via SSL.","ba-videorecorder.access-forbidden":"O acesso &#xE0; c&#xE2;mara foi pro&#xED;bido. Clique para tentar novamente.","ba-videorecorder.pick-covershot":"Escolha uma capa personalizada","ba-videorecorder.uploading":"A enviar","ba-videorecorder.uploading-failed":"O envio falhou - clique para tentar de novo","ba-videorecorder.verifying":"A verificar","ba-videorecorder.verifying-failed":"A verifica&#xE7;&#xE3;o falhou - clique para tentar de novo","ba-videorecorder.rerecord-confirm":"Quer mesmo repetir o seu v&#xED;deo?","ba-videorecorder.video_file_too_large":"O seu v&#xED;deo &#xE9; demasiado grande (%s) - clique para tentar de novo com um v&#xED;deo mais pequeno.","ba-videorecorder.unsupported_video_type":"Please upload: %s - clique para tentar de novo.","ba-videoplayer-controlbar.exit-fullscreen-video":"Sair do modo ecr&#xE3; inteiro","ba-videoplayer-share.share":"Partilhar a grava&#xE7;&#xE3;o","ba-videoplayer-controlbar.pause-video-disabled":"A pausa n&#xE3;o &#xE9; suportada","ba-videorecorder-chooser.record-audio":"Gravar Audio","ba-videorecorder-chooser.record-screen":"Tela de registro","ba-videorecorder-controlbar.stop-available-after":"O tempo m&#xED;nimo de grava&#xE7;&#xE3;o &#xE9; %d segundos","ba-videorecorder-controlbar.cancel":"Cancelar","ba-videorecorder-controlbar.cancel-tooltip":"Clique aqui para cancelar.","ba-videorecorder.cancel-confirm":"Voc&#xEA; deseja realmente cancelar o upload de seu v&#xED;deo?","ba-videoplayer-adslot.elapsed-time":"Tempo Elasped","ba-videoplayer-adslot.volume-button":"Definir volume","ba-videoplayer-adslot.volume-mute":"Som mudo","ba-videoplayer-adslot.volume-unmute":"Somar som","ba-videoplayer-adslot.ad-will-end-after":"O an&#xFA;ncio terminar&#xE1; ap&#xF3;s %s","ba-videoplayer-adslot.can-skip-after":"Ignorar ap&#xF3;s %d","ba-videoplayer-adslot.skip-ad":"Pular An&#xFA;ncio","ba-videorecorder.software-required":"Clique abaixo para instalar / ativar os seguintes requisitos para prosseguir.","ba-videorecorder.software-waiting":"Esperando que os requisitos sejam instalados / ativados. Talvez seja necess&#xE1;rio atualizar a p&#xE1;gina ap&#xF3;s a conclus&#xE3;o.","ba-videoplayer-controlbar.close-tracks":"Fechar CC","ba-videoplayer-controlbar.show-tracks":"Mostrar CC","ba-videoplayer-tracks.upload-text-tracks":"Carregar arquivos de texto da faixa","ba-videoplayer-tracks.select-text-track-language":"Idioma das legendas","ba-videoplayer-tracks.info-select-locale-first":"Primeiro selecione o local","ba-videoplayer-tracks.select-text-track-file":"Clique para selecionar o arquivo","ba-videoplayer-tracks.back":"costas","ba-videorecorder.framerate-warning":"A taxa de quadros do v&#xED;deo &#xE9; muito baixa. Recomendamos fechar todos os outros programas e guias do navegador ou usar um computador mais r&#xE1;pido.","ba-videorecorder.upload-error-duration":"A dura&#xE7;&#xE3;o do v&#xED;deo enviado n&#xE3;o atende aos requisitos. Clique aqui para tentar novamente.","ba-videorecorder.resolution-constraint-error":"O arquivo que voc&#xEA; selecionou n&#xE3;o corresponde &#xE0; resolu&#xE7;&#xE3;o necess&#xE1;ria - clique aqui para tentar novamente.","ba-videorecorder.orientation-portrait-required":"Por favor, gire seu dispositivo para gravar no modo retrato.","ba-videorecorder.orientation-landscape-required":"Por favor, gire seu dispositivo para gravar no modo paisagem.","ba-imageviewer-controlbar.rerecord-image":"Refazer","ba-imageviewer-controlbar.submit-image":"confirme","ba-imageviewer-controlbar.fullscreen-image":"Entrar em tela cheia","ba-imageviewer-controlbar.exit-fullscreen-image":"Sair da tela cheia","ba-imageviewer.image-error":"Ocorreu um erro. Por favor tente novamente mais tarde. Clique para tentar novamente.","ba-imagecapture-chooser.image-capture":"Capturar imagem","ba-imagecapture-chooser.upload-image":"Enviar Imagem","ba-imagecapture-controlbar.settings":"Configura&#xE7;&#xF5;es","ba-imagecapture-controlbar.camerahealthy":"Ilumina&#xE7;&#xE3;o &#xE9; boa","ba-imagecapture-controlbar.cameraunhealthy":"Ilumina&#xE7;&#xE3;o n&#xE3;o &#xE9; ideal","ba-imagecapture-controlbar.record":"Capturar","ba-imagecapture-controlbar.record-tooltip":"Clique aqui para capturar.","ba-imagecapture-controlbar.rerecord":"Refazer","ba-imagecapture-controlbar.rerecord-tooltip":"Clique aqui para refazer.","ba-imagecapture-controlbar.cancel":"Cancelar","ba-imagecapture-controlbar.cancel-tooltip":"Clique aqui para cancelar.","ba-audioplayer-controlbar.audio-progress":"Progresso","ba-audioplayer-controlbar.rerecord-audio":"Refazer","ba-audioplayer-controlbar.submit-audio":"confirme","ba-audioplayer-controlbar.play-audio":"Toque","ba-audioplayer-controlbar.pause-audio":"Pausa","ba-audioplayer-controlbar.pause-audio-disabled":"Pausa n&#xE3;o suportada","ba-audioplayer-controlbar.elapsed-time":"Tempo sa&#xED;do","ba-audioplayer-controlbar.total-time":"Comprimento total de","ba-audioplayer-controlbar.volume-button":"Definir volume","ba-audioplayer-controlbar.volume-mute":"Som mudo","ba-audioplayer-controlbar.volume-unmute":"Ativar som","ba-audioplayer-loader.tooltip":"Carregando...","ba-audioplayer.audio-error":"Ocorreu um erro. Por favor tente novamente mais tarde. Clique para tentar novamente.","ba-audiorecorder-chooser.record-audio":"Gravar audio","ba-audiorecorder-chooser.upload-audio":"Carregar &#xE1;udio","ba-audiorecorder-controlbar.settings":"Configura&#xE7;&#xF5;es","ba-audiorecorder-controlbar.microphonehealthy":"Som &#xE9; bom","ba-audiorecorder-controlbar.microphoneunhealthy":"N&#xE3;o &#xE9; poss&#xED;vel captar nenhum som","ba-audiorecorder-controlbar.record":"Registro","ba-audiorecorder-controlbar.record-tooltip":"Clique aqui para gravar.","ba-audiorecorder-controlbar.rerecord":"Refazer","ba-audiorecorder-controlbar.rerecord-tooltip":"Clique aqui para refazer.","ba-audiorecorder-controlbar.stop":"Pare","ba-audiorecorder-controlbar.stop-tooltip":"Clique aqui para parar.","ba-audiorecorder-controlbar.stop-available-after":"Tempo m&#xED;nimo de grava&#xE7;&#xE3;o &#xE9; de %d segundos","ba-audiorecorder-controlbar.cancel":"Cancelar","ba-audiorecorder-controlbar.cancel-tooltip":"Clique aqui para cancelar."},"language:ro":{"ba-videoplayer-playbutton.tooltip":"Click aici pentru a reda video.","ba-videoplayer-playbutton.rerecord":"Reface","ba-videoplayer-playbutton.submit-video":"confirm&#x103; film","ba-videoplayer-loader.tooltip":"Se &#xEE;ncarc&#x103; videoclipul ...","ba-videoplayer-controlbar.change-resolution":"Schimba&#x21B;i rezolu&#x21B;ia","ba-videoplayer-controlbar.video-progress":"progresul video","ba-videoplayer-controlbar.rerecord-video":"Reface&#x21B;i video?","ba-videoplayer-controlbar.submit-video":"confirm&#x103; film","ba-videoplayer-controlbar.play-video":"Ruleaz&#x103; video","ba-videoplayer-controlbar.pause-video":"video de pauz&#x103;","ba-videoplayer-controlbar.elapsed-time":"timp scurs","ba-videoplayer-controlbar.total-time":"Lungimea total&#x103; a videoclipului","ba-videoplayer-controlbar.fullscreen-video":"intra pe tot ecranul","ba-videoplayer-controlbar.volume-button":"set de volum","ba-videoplayer-controlbar.volume-mute":"sunet mut","ba-videoplayer-controlbar.volume-unmute":"repornirea sunetului","ba-videoplayer.video-error":"A ap&#x103;rut o eroare, v&#x103; rug&#x103;m s&#x103; &#xEE;ncerca&#x21B;i din nou mai t&#xE2;rziu. Click aici pentru a &#xEE;ncerca din nou.","ba-videorecorder-chooser.record-video":"&#xCE;nregistrarea imaginilor video dvs.","ba-videorecorder-chooser.upload-video":"&#xCE;ncarc&#x103; film","ba-videorecorder-controlbar.settings":"set&#x103;rile","ba-videorecorder-controlbar.camerahealthy":"De iluminat este bun","ba-videorecorder-controlbar.cameraunhealthy":"De iluminat nu este optim","ba-videorecorder-controlbar.microphonehealthy":"Sunetul este bun","ba-videorecorder-controlbar.microphoneunhealthy":"Nu se poate ridica nici un sunet","ba-videorecorder-controlbar.record":"Record","ba-videorecorder-controlbar.record-tooltip":"Apasa aici pentru a &#xEE;nregistra.","ba-videorecorder-controlbar.rerecord":"Reface","ba-videorecorder-controlbar.rerecord-tooltip":"Apasa aici pentru a reface.","ba-videorecorder-controlbar.upload-covershot":"&#xCE;nc&#x103;rca&#x21B;i","ba-videorecorder-controlbar.upload-covershot-tooltip":"Apasa aici pentru a &#xEE;nc&#x103;rca capac personalizat lovitur&#x103;","ba-videorecorder-controlbar.stop":"Stop","ba-videorecorder-controlbar.stop-tooltip":"Apasa aici pentru a opri.","ba-videorecorder-controlbar.skip":"s&#x103;ri","ba-videorecorder-controlbar.skip-tooltip":"Apasa aici pentru a s&#x103;ri peste.","ba-videorecorder.recorder-error":"A ap&#x103;rut o eroare, v&#x103; rug&#x103;m s&#x103; &#xEE;ncerca&#x21B;i din nou mai t&#xE2;rziu. Click aici pentru a &#xEE;ncerca din nou.","ba-videorecorder.attach-error":"Nu am putut accesa interfa&#x21B;a camerei. &#xCE;n func&#x21B;ie de dispozitiv &#x219;i browser-ul, poate fi necesar s&#x103; instala&#x21B;i Flash sau accesa pagina prin SSL.","ba-videorecorder.access-forbidden":"Accesul la camera a fost interzis&#x103;. Click aici pentru a &#xEE;ncerca din nou.","ba-videorecorder.pick-covershot":"Alege un covershot.","ba-videorecorder.uploading":"Se &#xEE;ncarc&#x103;","ba-videorecorder.uploading-failed":"Se &#xEE;ncarc&#x103; nu a reu&#x219;it - clic aici pentru a &#xEE;ncerca din nou.","ba-videorecorder.verifying":"Se verific&#x103;","ba-videorecorder.verifying-failed":"Care verific&#x103; dac&#x103; nu a reu&#x219;it - clic aici pentru a &#xEE;ncerca din nou.","ba-videorecorder.rerecord-confirm":"Chiar vrei s&#x103; reface&#x21B;i videoclipul?","ba-videorecorder.video_file_too_large":"Fi&#x219;ierul dvs. video este prea mare (%s) - click aici pentru a &#xEE;ncerca din nou cu un fi&#x219;ier video mai mic.","ba-videorecorder.unsupported_video_type":"V&#x103; rug&#x103;m s&#x103; &#xEE;nc&#x103;rca&#x21B;i: %s - clic aici pentru a &#xEE;ncerca din nou.","ba-videoplayer-controlbar.exit-fullscreen-video":"Ie&#x219;i&#x21B;i din ecranul complet","ba-videoplayer-share.share":"Distribui&#x21B;i videoclipul","ba-videorecorder-chooser.record-screen":"Ecranul de &#xEE;nregistrare","ba-videoplayer-controlbar.pause-video-disabled":"&#xCE;ntreruperea nu este acceptat&#x103;","ba-videorecorder-chooser.record-audio":"&#xCE;nregistreaz&#x103; audio","ba-videorecorder-controlbar.stop-available-after":"Durata minim&#x103; de &#xEE;nregistrare este %d secunde","ba-videorecorder-controlbar.cancel":"Anulare","ba-videorecorder-controlbar.cancel-tooltip":"Face&#x21B;i clic aici pentru a anula.","ba-videorecorder.cancel-confirm":"Chiar vrei s&#x103; anulezi &#xEE;nc&#x103;rcarea videoclipului?","ba-videoplayer-adslot.elapsed-time":"Elased timp","ba-videoplayer-adslot.volume-button":"Seta&#x21B;i volumul","ba-videoplayer-adslot.volume-mute":"Opri&#x21B;i sunetul","ba-videoplayer-adslot.volume-unmute":"Repeta&#x21B;i sunetul","ba-videoplayer-adslot.ad-will-end-after":"Anun&#x21B;ul se va &#xEE;ncheia dup&#x103; %s","ba-videoplayer-adslot.can-skip-after":"S&#x103;ri&#x21B;i dup&#x103; %d","ba-videoplayer-adslot.skip-ad":"&#x218;terge&#x21B;i anun&#x21B;ul","ba-videorecorder.software-required":"Face&#x21B;i clic mai jos pentru a instala / activa urm&#x103;toarele cerin&#x21B;e pentru a continua.","ba-videorecorder.software-waiting":"Se a&#x219;teapt&#x103; ca cerin&#x21B;ele s&#x103; fie instalate / activate. Poate fi necesar s&#x103; actualiza&#x21B;i pagina dup&#x103; finalizare.","ba-videoplayer-controlbar.close-tracks":"&#xCE;nchide&#x21B;i CC","ba-videoplayer-controlbar.show-tracks":"Ar&#x103;ta&#x21B;i CC","ba-videoplayer-tracks.upload-text-tracks":"&#xCE;nc&#x103;rca&#x21B;i fi&#x219;iere text","ba-videoplayer-tracks.select-text-track-language":"Limba pentru subtitrare","ba-videoplayer-tracks.info-select-locale-first":"Mai &#xEE;nt&#xE2;i selecta&#x21B;i localizarea","ba-videoplayer-tracks.select-text-track-file":"Face&#x21B;i clic pentru a selecta fi&#x219;ierul","ba-videoplayer-tracks.back":"&#xEE;napoi","ba-videorecorder.framerate-warning":"Rata cadrelor video este foarte sc&#x103;zut&#x103;. V&#x103; recomand&#x103;m s&#x103; &#xEE;nchide&#x21B;i toate celelalte programe &#x219;i filele browserului sau s&#x103; utiliza&#x21B;i un computer mai rapid.","ba-videorecorder.upload-error-duration":"Durata videoclipului &#xEE;nc&#x103;rcat nu &#xEE;ndepline&#x219;te cerin&#x21B;ele - face&#x21B;i clic aici pentru a &#xEE;ncerca din nou.","ba-videorecorder.resolution-constraint-error":"Fi&#x219;ierul pe care l-a&#x21B;i selectat nu corespunde rezolu&#x21B;iei cerute - face&#x21B;i clic aici pentru a &#xEE;ncerca din nou.","ba-videorecorder.orientation-portrait-required":"V&#x103; rote&#x219;te dispozitivul s&#x103; &#xEE;nregistreze &#xEE;n modul portret.","ba-videorecorder.orientation-landscape-required":"Rote&#x21B;i dispozitivul s&#x103; &#xEE;nregistreze &#xEE;n modul peisaj.","ba-imageviewer-controlbar.rerecord-image":"A reface?","ba-imageviewer-controlbar.submit-image":"A confirma","ba-imageviewer-controlbar.fullscreen-image":"Introduce&#x21B;i ecranul complet","ba-imageviewer-controlbar.exit-fullscreen-image":"Ie&#x219;i&#x21B;i de pe ecranul complet","ba-imageviewer.image-error":"A ap&#x103;rut o eroare, &#xEE;ncerca&#x21B;i din nou mai t&#xE2;rziu. Face&#x21B;i clic pentru a re&#xEE;ncerca.","ba-imagecapture-chooser.image-capture":"Captura&#x21B;i imaginea","ba-imagecapture-chooser.upload-image":"Incarca imaginea","ba-imagecapture-controlbar.settings":"Set&#x103;ri","ba-imagecapture-controlbar.camerahealthy":"Lumina este bun&#x103;","ba-imagecapture-controlbar.cameraunhealthy":"Lumina nu este optim&#x103;","ba-imagecapture-controlbar.record":"Captur&#x103;","ba-imagecapture-controlbar.record-tooltip":"Face&#x21B;i clic aici pentru a captura.","ba-imagecapture-controlbar.rerecord":"A reface","ba-imagecapture-controlbar.rerecord-tooltip":"Face&#x21B;i clic aici pentru a reveni.","ba-imagecapture-controlbar.cancel":"Anulare","ba-imagecapture-controlbar.cancel-tooltip":"Face&#x21B;i clic aici pentru a anula.","ba-audioplayer-controlbar.audio-progress":"progres","ba-audioplayer-controlbar.rerecord-audio":"A reface?","ba-audioplayer-controlbar.submit-audio":"A confirma","ba-audioplayer-controlbar.play-audio":"Joaca","ba-audioplayer-controlbar.pause-audio":"Pauz&#x103;","ba-audioplayer-controlbar.pause-audio-disabled":"&#xCE;ntreruperea nu este acceptat&#x103;","ba-audioplayer-controlbar.elapsed-time":"Elased timp","ba-audioplayer-controlbar.total-time":"Lungimea total&#x103;","ba-audioplayer-controlbar.volume-button":"Seta&#x21B;i volumul","ba-audioplayer-controlbar.volume-mute":"Opri&#x21B;i sunetul","ba-audioplayer-controlbar.volume-unmute":"Repeta&#x21B;i sunetul","ba-audioplayer-loader.tooltip":"Se incarca...","ba-audioplayer.audio-error":"A ap&#x103;rut o eroare, &#xEE;ncerca&#x21B;i din nou mai t&#xE2;rziu. Face&#x21B;i clic pentru a re&#xEE;ncerca.","ba-audiorecorder-chooser.record-audio":"&#xCE;nregistreaz&#x103; audio","ba-audiorecorder-chooser.upload-audio":"&#xCE;nc&#x103;rca&#x21B;i audio","ba-audiorecorder-controlbar.settings":"Set&#x103;ri","ba-audiorecorder-controlbar.microphonehealthy":"Sunetul este bun","ba-audiorecorder-controlbar.microphoneunhealthy":"Nu pot lua niciun sunet","ba-audiorecorder-controlbar.record":"Record","ba-audiorecorder-controlbar.record-tooltip":"Face&#x21B;i clic aici pentru a &#xEE;nregistra.","ba-audiorecorder-controlbar.rerecord":"A reface","ba-audiorecorder-controlbar.rerecord-tooltip":"Face&#x21B;i clic aici pentru a reveni.","ba-audiorecorder-controlbar.stop":"Stop","ba-audiorecorder-controlbar.stop-tooltip":"Face&#x21B;i clic aici pentru a opri.","ba-audiorecorder-controlbar.stop-available-after":"Durata minim&#x103; de &#xEE;nregistrare este %d secunde","ba-audiorecorder-controlbar.cancel":"Anulare","ba-audiorecorder-controlbar.cancel-tooltip":"Face&#x21B;i clic aici pentru a anula."},"language:ru":{"ba-videoplayer-playbutton.tooltip":"&#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x432;&#x43E;&#x441;&#x43F;&#x440;&#x43E;&#x438;&#x437;&#x432;&#x435;&#x441;&#x442;&#x438; &#x432;&#x438;&#x434;&#x435;&#x43E;.","ba-videoplayer-playbutton.rerecord":"&#x41F;&#x435;&#x440;&#x435;&#x437;&#x430;&#x43F;&#x438;&#x441;&#x430;&#x442;&#x44C;","ba-videoplayer-loader.tooltip":"&#x417;&#x430;&#x433;&#x440;&#x443;&#x437;&#x43A;&#x430; &#x432;&#x438;&#x434;&#x435;&#x43E; ...","ba-videoplayer-controlbar.change-resolution":"&#x418;&#x437;&#x43C;&#x435;&#x43D;&#x438;&#x442;&#x44C; &#x440;&#x430;&#x437;&#x440;&#x435;&#x448;&#x435;&#x43D;&#x438;&#x435;","ba-videoplayer-controlbar.video-progress":"&#x425;&#x43E;&#x434; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videoplayer-controlbar.rerecord-video":"&#x41F;&#x435;&#x440;&#x435;&#x437;&#x430;&#x43F;&#x438;&#x441;&#x430;&#x442;&#x44C; &#x432;&#x438;&#x434;&#x435;&#x43E;?","ba-videoplayer-controlbar.play-video":"&#x41F;&#x440;&#x43E;&#x438;&#x433;&#x440;&#x430;&#x442;&#x44C; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videoplayer-controlbar.pause-video":"&#x41F;&#x440;&#x438;&#x43E;&#x441;&#x442;&#x430;&#x43D;&#x43E;&#x432;&#x438;&#x442;&#x44C; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videoplayer-controlbar.elapsed-time":"&#x41F;&#x440;&#x43E;&#x439;&#x434;&#x435;&#x43D;&#x43D;&#x43E;&#x435; &#x432;&#x440;&#x435;&#x43C;&#x44F;","ba-videoplayer-controlbar.total-time":"&#x41E;&#x431;&#x449;&#x430;&#x44F; &#x434;&#x43B;&#x438;&#x43D;&#x430; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videoplayer-controlbar.fullscreen-video":"&#x41F;&#x43E;&#x43B;&#x43D;&#x43E;&#x44D;&#x43A;&#x440;&#x430;&#x43D;&#x43D;&#x44B;&#x439; &#x440;&#x435;&#x436;&#x438;&#x43C;","ba-videoplayer-controlbar.volume-button":"&#x413;&#x440;&#x43E;&#x43C;&#x43A;&#x43E;&#x441;&#x442;&#x44C;","ba-videoplayer-controlbar.volume-mute":"&#x41E;&#x442;&#x43A;&#x43B;&#x44E;&#x447;&#x438;&#x442;&#x44C; &#x437;&#x432;&#x443;&#x43A;","ba-videoplayer-controlbar.volume-unmute":"&#x412;&#x43A;&#x43B;&#x44E;&#x447;&#x438;&#x442;&#x44C; &#x437;&#x432;&#x443;&#x43A;","ba-videoplayer.video-error":"&#x41F;&#x440;&#x43E;&#x438;&#x437;&#x43E;&#x448;&#x43B;&#x430; &#x43E;&#x448;&#x438;&#x431;&#x43A;&#x430;. &#x41F;&#x43E;&#x436;&#x430;&#x43B;&#x443;&#x439;&#x441;&#x442;&#x430;, &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x435; &#x43F;&#x43E;&#x43F;&#x44B;&#x442;&#x43A;&#x443; &#x43F;&#x43E;&#x437;&#x436;&#x435;. &#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x44C; &#x43F;&#x43E;&#x43F;&#x44B;&#x442;&#x43A;&#x443;.","ba-videorecorder-chooser.record-video":"&#x417;&#x430;&#x43F;&#x438;&#x448;&#x438;&#x442;&#x435; &#x441;&#x432;&#x43E;&#x435; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videorecorder-chooser.upload-video":"&#x417;&#x430;&#x433;&#x440;&#x443;&#x437;&#x438;&#x442;&#x44C; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videorecorder-controlbar.settings":"&#x41D;&#x430;&#x441;&#x442;&#x440;&#x43E;&#x439;&#x43A;&#x438;","ba-videorecorder-controlbar.camerahealthy":"&#x41E;&#x441;&#x432;&#x435;&#x449;&#x435;&#x43D;&#x438;&#x435; &#x445;&#x43E;&#x440;&#x43E;&#x448;&#x435;&#x435;","ba-videorecorder-controlbar.cameraunhealthy":"&#x421;&#x43B;&#x430;&#x431;&#x43E;&#x435; &#x43E;&#x441;&#x432;&#x435;&#x449;&#x435;&#x43D;&#x438;&#x435;","ba-videorecorder-controlbar.microphonehealthy":"&#x417;&#x432;&#x443;&#x43A; &#x445;&#x43E;&#x440;&#x43E;&#x448;&#x438;&#x439;","ba-videorecorder-controlbar.microphoneunhealthy":"&#x41D;&#x435;&#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E; &#x43F;&#x43E;&#x43B;&#x443;&#x447;&#x438;&#x442;&#x44C; &#x437;&#x432;&#x443;&#x43A;","ba-videorecorder-controlbar.record":"&#x417;&#x430;&#x43F;&#x438;&#x441;&#x44C;","ba-videorecorder-controlbar.record-tooltip":"&#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x437;&#x434;&#x435;&#x441;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x437;&#x430;&#x43F;&#x438;&#x441;&#x430;&#x442;&#x44C;.","ba-videorecorder-controlbar.stop":"&#x421;&#x442;&#x43E;&#x43F;","ba-videorecorder-controlbar.stop-tooltip":"&#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x437;&#x434;&#x435;&#x441;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43E;&#x441;&#x442;&#x430;&#x43D;&#x43E;&#x432;&#x438;&#x442;&#x44C;.","ba-videorecorder-controlbar.skip":"&#x41F;&#x440;&#x43E;&#x43F;&#x443;&#x441;&#x442;&#x438;&#x442;&#x44C;","ba-videorecorder-controlbar.skip-tooltip":"&#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x437;&#x434;&#x435;&#x441;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43F;&#x440;&#x43E;&#x43F;&#x443;&#x441;&#x442;&#x438;&#x442;&#x44C;.","ba-videorecorder.recorder-error":"&#x41F;&#x440;&#x43E;&#x438;&#x437;&#x43E;&#x448;&#x43B;&#x430; &#x43E;&#x448;&#x438;&#x431;&#x43A;&#x430;. &#x41F;&#x43E;&#x436;&#x430;&#x43B;&#x443;&#x439;&#x441;&#x442;&#x430;, &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x435; &#x43F;&#x43E;&#x43F;&#x44B;&#x442;&#x43A;&#x443; &#x43F;&#x43E;&#x437;&#x436;&#x435;. &#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x44C; &#x43F;&#x43E;&#x43F;&#x44B;&#x442;&#x43A;&#x443;.","ba-videorecorder.access-forbidden":"&#x414;&#x43E;&#x441;&#x442;&#x443;&#x43F; &#x43A; &#x43A;&#x430;&#x43C;&#x435;&#x440;&#x435; &#x431;&#x44B;&#x43B; &#x437;&#x430;&#x43F;&#x440;&#x435;&#x449;&#x435;&#x43D;. &#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x44C; &#x43F;&#x43E;&#x43F;&#x44B;&#x442;&#x43A;&#x443;.","ba-videorecorder.pick-covershot":"&#x412;&#x44B;&#x431;&#x435;&#x440;&#x438;&#x442;&#x435; &#x441;&#x43D;&#x438;&#x43C;&#x43E;&#x43A;.","ba-videorecorder.uploading":"&#x417;&#x430;&#x433;&#x440;&#x443;&#x437;&#x43A;&#x430;","ba-videorecorder.uploading-failed":"&#x41E;&#x448;&#x438;&#x431;&#x43A;&#x430; &#x437;&#x430;&#x433;&#x440;&#x443;&#x437;&#x43A;&#x438;: &#x43D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x437;&#x434;&#x435;&#x441;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x44C; &#x43F;&#x43E;&#x43F;&#x44B;&#x442;&#x43A;&#x443;.","ba-videorecorder.verifying":"&#x41F;&#x440;&#x43E;&#x432;&#x435;&#x440;&#x43A;&#x430;","ba-videorecorder.verifying-failed":"&#x41E;&#x448;&#x438;&#x431;&#x43A;&#x430; &#x43F;&#x43E;&#x434;&#x442;&#x432;&#x435;&#x440;&#x436;&#x434;&#x435;&#x43D;&#x438;&#x44F;. &#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x437;&#x434;&#x435;&#x441;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x44C; &#x43F;&#x43E;&#x43F;&#x44B;&#x442;&#x43A;&#x443;.","ba-videorecorder.rerecord-confirm":"&#x412;&#x44B; &#x434;&#x435;&#x439;&#x441;&#x442;&#x432;&#x438;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x43E; &#x445;&#x43E;&#x442;&#x438;&#x442;&#x435; &#x43F;&#x435;&#x440;&#x435;&#x437;&#x430;&#x43F;&#x438;&#x441;&#x430;&#x442;&#x44C; &#x432;&#x438;&#x434;&#x435;&#x43E;?","ba-videorecorder.video_file_too_large":"&#x421;&#x43B;&#x438;&#x448;&#x43A;&#x43E;&#x43C; &#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x43E;&#x439; &#x432;&#x438;&#x434;&#x435;&#x43E;&#x444;&#x430;&#x439;&#x43B;. &#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x437;&#x434;&#x435;&#x441;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x44C; &#x43F;&#x43E;&#x43F;&#x44B;&#x442;&#x43A;&#x443; &#x441; &#x43C;&#x435;&#x43D;&#x44C;&#x448;&#x438;&#x43C; &#x432;&#x438;&#x434;&#x435;&#x43E;&#x444;&#x430;&#x439;&#x43B;&#x43E;&#x43C;.","ba-videorecorder.unsupported_video_type":"&#x41F;&#x43E;&#x436;&#x430;&#x43B;&#x443;&#x439;&#x441;&#x442;&#x430; &#x437;&#x430;&#x433;&#x440;&#x443;&#x437;&#x438;&#x442;&#x435;: %s - &#x43D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x437;&#x434;&#x435;&#x441;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x44C; &#x43F;&#x43E;&#x43F;&#x44B;&#x442;&#x43A;&#x443;.","ba-videoplayer-playbutton.submit-video":"&#x41F;&#x43E;&#x434;&#x442;&#x432;&#x435;&#x440;&#x434;&#x438;&#x442;&#x44C; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videoplayer-controlbar.submit-video":"&#x41F;&#x43E;&#x434;&#x442;&#x432;&#x435;&#x440;&#x434;&#x438;&#x442;&#x44C; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videorecorder-controlbar.rerecord":"&#x41F;&#x435;&#x440;&#x435;&#x434;&#x435;&#x43B;&#x430;&#x442;&#x44C;","ba-videorecorder-controlbar.rerecord-tooltip":"&#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43F;&#x435;&#x440;&#x435;&#x437;&#x430;&#x43F;&#x438;&#x441;&#x430;&#x442;&#x44C;","ba-videorecorder-controlbar.upload-covershot":"&#x417;&#x430;&#x433;&#x440;&#x443;&#x437;&#x438;&#x442;&#x44C;","ba-videorecorder-controlbar.upload-covershot-tooltip":"&#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x437;&#x434;&#x435;&#x441;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x437;&#x430;&#x433;&#x440;&#x443;&#x437;&#x438;&#x442;&#x44C; &#x43B;&#x438;&#x447;&#x43D;&#x443;&#x44E; &#x43E;&#x431;&#x43B;&#x43E;&#x436;&#x43A;&#x443;","ba-videorecorder.attach-error":"&#x22;&#x41D;&#x435; &#x443;&#x434;&#x430;&#x43B;&#x43E;&#x441;&#x44C; &#x43F;&#x43E;&#x43B;&#x443;&#x447;&#x438;&#x442;&#x44C; &#x434;&#x43E;&#x441;&#x442;&#x443;&#x43F; &#x43A; &#x43A;&#x430;&#x43C;&#x435;&#x440;&#x435;. &#x412; &#x437;&#x430;&#x432;&#x438;&#x441;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x438; &#x43E;&#x442; &#x443;&#x441;&#x442;&#x440;&#x43E;&#x439;&#x441;&#x442;&#x432;&#x430; &#x438;&#x43B;&#x438; &#x431;&#x440;&#x430;&#x443;&#x437;&#x435;&#x440;&#x430;, &#x432;&#x430;&#x43C; &#x43C;&#x43E;&#x436;&#x435;&#x442; &#x43F;&#x43E;&#x43D;&#x430;&#x434;&#x43E;&#x431;&#x438;&#x442;&#x44C;&#x441;&#x44F; &#x443;&#x441;&#x442;&#x430;&#x43D;&#x43E;&#x432;&#x438;&#x442;&#x44C; Flash &#x438;&#x43B;&#x438; &#x43F;&#x43E;&#x43B;&#x443;&#x447;&#x438;&#x442;&#x44C; &#x434;&#x43E;&#x441;&#x442;&#x443;&#x43F; &#x43A; &#x441;&#x430;&#x439;&#x442;&#x443; &#x447;&#x435;&#x440;&#x435;&#x437; SSL.&#x22;","ba-videoplayer-controlbar.exit-fullscreen-video":"&#x412;&#x44B;&#x439;&#x442;&#x438; &#x438;&#x437; &#x440;&#x435;&#x436;&#x438;&#x43C;&#x430; &#x43F;&#x43E;&#x43B;&#x43D;&#x43E;&#x433;&#x43E; &#x43E;&#x43A;&#x43D;&#x430;","ba-videoplayer-share.share":"&#x41F;&#x43E;&#x434;&#x435;&#x43B;&#x438;&#x442;&#x44C;&#x441;&#x44F; &#x441; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videorecorder-chooser.record-screen":"&#x42D;&#x43A;&#x440;&#x430;&#x43D; &#x437;&#x430;&#x43F;&#x438;&#x441;&#x438;","ba-videoplayer-controlbar.pause-video-disabled":"&#x41F;&#x430;&#x443;&#x437;&#x430; &#x43D;&#x435; &#x43F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x438;&#x432;&#x430;&#x435;&#x442;&#x441;&#x44F;","ba-videorecorder-chooser.record-audio":"&#x417;&#x430;&#x43F;&#x438;&#x441;&#x44C; &#x430;&#x443;&#x434;&#x438;&#x43E;","ba-videorecorder-controlbar.stop-available-after":"&#x41C;&#x438;&#x43D;&#x438;&#x43C;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;&#x435; &#x432;&#x440;&#x435;&#x43C;&#x44F; &#x437;&#x430;&#x43F;&#x438;&#x441;&#x438;: %d &#x441;&#x435;&#x43A;&#x443;&#x43D;&#x434;","ba-videorecorder-controlbar.cancel":"&#x41E;&#x442;&#x43C;&#x435;&#x43D;&#x430;","ba-videorecorder-controlbar.cancel-tooltip":"&#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x437;&#x434;&#x435;&#x441;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43E;&#x442;&#x43C;&#x435;&#x43D;&#x438;&#x442;&#x44C;.","ba-videorecorder.cancel-confirm":"&#x412;&#x44B; &#x434;&#x435;&#x439;&#x441;&#x442;&#x432;&#x438;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x43E; &#x445;&#x43E;&#x442;&#x438;&#x442;&#x435; &#x43E;&#x442;&#x43C;&#x435;&#x43D;&#x438;&#x442;&#x44C; &#x437;&#x430;&#x433;&#x440;&#x443;&#x437;&#x43A;&#x443; &#x432;&#x438;&#x434;&#x435;&#x43E;?","ba-videoplayer-adslot.elapsed-time":"&#x423;&#x43A;&#x43E;&#x440;&#x43E;&#x447;&#x435;&#x43D;&#x43D;&#x43E;&#x435; &#x432;&#x440;&#x435;&#x43C;&#x44F;","ba-videoplayer-adslot.volume-button":"&#x423;&#x441;&#x442;&#x430;&#x43D;&#x43E;&#x432;&#x438;&#x442;&#x44C; &#x433;&#x440;&#x43E;&#x43C;&#x43A;&#x43E;&#x441;&#x442;&#x44C;","ba-videoplayer-adslot.volume-mute":"&#x41E;&#x442;&#x43A;&#x43B;&#x44E;&#x447;&#x438;&#x442;&#x44C; &#x437;&#x432;&#x443;&#x43A;","ba-videoplayer-adslot.volume-unmute":"&#x412;&#x43A;&#x43B;&#x44E;&#x447;&#x438;&#x442;&#x44C; &#x437;&#x432;&#x443;&#x43A;","ba-videoplayer-adslot.ad-will-end-after":"&#x41E;&#x431;&#x44A;&#x44F;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x435; &#x431;&#x443;&#x434;&#x435;&#x442; &#x437;&#x430;&#x432;&#x435;&#x440;&#x448;&#x435;&#x43D;&#x43E; &#x43F;&#x43E;&#x441;&#x43B;&#x435; %s","ba-videoplayer-adslot.can-skip-after":"&#x41F;&#x440;&#x43E;&#x43F;&#x443;&#x441;&#x442;&#x438;&#x442;&#x44C; &#x43F;&#x43E;&#x441;&#x43B;&#x435; %d","ba-videoplayer-adslot.skip-ad":"&#x41F;&#x440;&#x43E;&#x43F;&#x443;&#x441;&#x442;&#x438;&#x442;&#x44C; &#x440;&#x435;&#x43A;&#x43B;&#x430;&#x43C;&#x443;","ba-videorecorder.software-required":"&#x41F;&#x43E;&#x436;&#x430;&#x43B;&#x443;&#x439;&#x441;&#x442;&#x430;, &#x43D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x43D;&#x438;&#x436;&#x435;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x443;&#x441;&#x442;&#x430;&#x43D;&#x43E;&#x432;&#x438;&#x442;&#x44C; / &#x430;&#x43A;&#x442;&#x438;&#x432;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x442;&#x44C; &#x441;&#x43B;&#x435;&#x434;&#x443;&#x44E;&#x449;&#x438;&#x435; &#x442;&#x440;&#x435;&#x431;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43F;&#x440;&#x43E;&#x434;&#x43E;&#x43B;&#x436;&#x438;&#x442;&#x44C;.","ba-videorecorder.software-waiting":"&#x41E;&#x436;&#x438;&#x434;&#x430;&#x43D;&#x438;&#x435; &#x442;&#x440;&#x435;&#x431;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x439; &#x43A; &#x443;&#x441;&#x442;&#x430;&#x43D;&#x43E;&#x432;&#x43A;&#x435; / &#x430;&#x43A;&#x442;&#x438;&#x432;&#x430;&#x446;&#x438;&#x438;. &#x412;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;, &#x432;&#x430;&#x43C; &#x43F;&#x440;&#x438;&#x434;&#x435;&#x442;&#x441;&#x44F; &#x43E;&#x431;&#x43D;&#x43E;&#x432;&#x438;&#x442;&#x44C; &#x441;&#x442;&#x440;&#x430;&#x43D;&#x438;&#x446;&#x443; &#x43F;&#x43E;&#x441;&#x43B;&#x435; &#x437;&#x430;&#x432;&#x435;&#x440;&#x448;&#x435;&#x43D;&#x438;&#x44F;.","ba-videoplayer-controlbar.close-tracks":"&#x417;&#x430;&#x43A;&#x440;&#x44B;&#x442;&#x44C; CC","ba-videoplayer-controlbar.show-tracks":"&#x41F;&#x43E;&#x43A;&#x430;&#x437;&#x430;&#x442;&#x44C; CC","ba-videoplayer-tracks.upload-text-tracks":"&#x417;&#x430;&#x433;&#x440;&#x443;&#x437;&#x438;&#x442;&#x44C; &#x434;&#x43E;&#x440;&#x43E;&#x436;&#x43A;&#x438;","ba-videoplayer-tracks.select-text-track-language":"&#x42F;&#x437;&#x44B;&#x43A; &#x441;&#x443;&#x431;&#x442;&#x438;&#x442;&#x440;&#x43E;&#x432;","ba-videoplayer-tracks.info-select-locale-first":"&#x421;&#x43D;&#x430;&#x447;&#x430;&#x43B;&#x430; &#x432;&#x44B;&#x431;&#x435;&#x440;&#x438;&#x442;&#x435; &#x44F;&#x437;&#x44B;&#x43A;","ba-videoplayer-tracks.select-text-track-file":"&#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x432;&#x44B;&#x431;&#x440;&#x430;&#x442;&#x44C; &#x444;&#x430;&#x439;&#x43B;","ba-videoplayer-tracks.back":"&#x43D;&#x430;&#x437;&#x430;&#x434;","ba-videorecorder.framerate-warning":"&#x427;&#x430;&#x441;&#x442;&#x43E;&#x442;&#x430; &#x43A;&#x430;&#x434;&#x440;&#x43E;&#x432; &#x432;&#x438;&#x434;&#x435;&#x43E; &#x43E;&#x447;&#x435;&#x43D;&#x44C; &#x43D;&#x438;&#x437;&#x43A;&#x430;&#x44F;. &#x41C;&#x44B; &#x440;&#x435;&#x43A;&#x43E;&#x43C;&#x435;&#x43D;&#x434;&#x443;&#x435;&#x43C; &#x437;&#x430;&#x43A;&#x440;&#x44B;&#x442;&#x44C; &#x432;&#x441;&#x435; &#x434;&#x440;&#x443;&#x433;&#x438;&#x435; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x43C;&#x44B; &#x438; &#x432;&#x43A;&#x43B;&#x430;&#x434;&#x43A;&#x438; &#x431;&#x440;&#x430;&#x443;&#x437;&#x435;&#x440;&#x430; &#x438;&#x43B;&#x438; &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x442;&#x44C; &#x431;&#x43E;&#x43B;&#x435;&#x435; &#x431;&#x44B;&#x441;&#x442;&#x440;&#x44B;&#x439; &#x43A;&#x43E;&#x43C;&#x43F;&#x44C;&#x44E;&#x442;&#x435;&#x440;.","ba-videorecorder.upload-error-duration":"&#x414;&#x43B;&#x438;&#x43D;&#x430; &#x437;&#x430;&#x433;&#x440;&#x443;&#x436;&#x435;&#x43D;&#x43D;&#x43E;&#x433;&#x43E; &#x432;&#x438;&#x434;&#x435;&#x43E; &#x43D;&#x435; &#x441;&#x43E;&#x43E;&#x442;&#x432;&#x435;&#x442;&#x441;&#x442;&#x432;&#x443;&#x435;&#x442; &#x442;&#x440;&#x435;&#x431;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F;&#x43C; - &#x43D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x437;&#x434;&#x435;&#x441;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x44C; &#x43F;&#x43E;&#x43F;&#x44B;&#x442;&#x43A;&#x443;.","ba-videorecorder.resolution-constraint-error":"&#x412;&#x44B;&#x431;&#x440;&#x430;&#x43D;&#x43D;&#x44B;&#x439; &#x444;&#x430;&#x439;&#x43B; &#x43D;&#x435; &#x441;&#x43E;&#x43E;&#x442;&#x432;&#x435;&#x442;&#x441;&#x442;&#x432;&#x443;&#x435;&#x442; &#x442;&#x440;&#x435;&#x431;&#x443;&#x435;&#x43C;&#x43E;&#x43C;&#x443; &#x440;&#x430;&#x437;&#x440;&#x435;&#x448;&#x435;&#x43D;&#x438;&#x44E; - &#x43D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x437;&#x434;&#x435;&#x441;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x44C; &#x43F;&#x43E;&#x43F;&#x44B;&#x442;&#x43A;&#x443;.","ba-videorecorder.orientation-portrait-required":"&#x41F;&#x43E;&#x432;&#x435;&#x440;&#x43D;&#x438;&#x442;&#x435; &#x443;&#x441;&#x442;&#x440;&#x43E;&#x439;&#x441;&#x442;&#x432;&#x43E; &#x434;&#x43B;&#x44F; &#x437;&#x430;&#x43F;&#x438;&#x441;&#x438; &#x432; &#x43F;&#x43E;&#x440;&#x442;&#x440;&#x435;&#x442;&#x43D;&#x43E;&#x43C; &#x440;&#x435;&#x436;&#x438;&#x43C;&#x435;.","ba-videorecorder.orientation-landscape-required":"&#x41F;&#x43E;&#x432;&#x435;&#x440;&#x43D;&#x438;&#x442;&#x435; &#x443;&#x441;&#x442;&#x440;&#x43E;&#x439;&#x441;&#x442;&#x432;&#x43E; &#x434;&#x43B;&#x44F; &#x437;&#x430;&#x43F;&#x438;&#x441;&#x438; &#x432; &#x430;&#x43B;&#x44C;&#x431;&#x43E;&#x43C;&#x43D;&#x43E;&#x43C; &#x440;&#x435;&#x436;&#x438;&#x43C;&#x435;.","ba-imageviewer-controlbar.rerecord-image":"&#x41F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x44C;?","ba-imageviewer-controlbar.submit-image":"&#x43F;&#x43E;&#x434;&#x442;&#x432;&#x435;&#x440;&#x434;&#x438;&#x442;&#x44C;","ba-imageviewer-controlbar.fullscreen-image":"&#x412;&#x43E;&#x439;&#x442;&#x438; &#x432; &#x43F;&#x43E;&#x43B;&#x43D;&#x43E;&#x44D;&#x43A;&#x440;&#x430;&#x43D;&#x43D;&#x44B;&#x439; &#x440;&#x435;&#x436;&#x438;&#x43C;","ba-imageviewer-controlbar.exit-fullscreen-image":"&#x412;&#x44B;&#x445;&#x43E;&#x434; &#x438;&#x437; &#x43F;&#x43E;&#x43B;&#x43D;&#x43E;&#x44D;&#x43A;&#x440;&#x430;&#x43D;&#x43D;&#x43E;&#x433;&#x43E; &#x440;&#x435;&#x436;&#x438;&#x43C;&#x430;","ba-imageviewer.image-error":"&#x41F;&#x440;&#x43E;&#x438;&#x437;&#x43E;&#x448;&#x43B;&#x430; &#x43E;&#x448;&#x438;&#x431;&#x43A;&#x430;. &#x41F;&#x43E;&#x436;&#x430;&#x43B;&#x443;&#x439;&#x441;&#x442;&#x430;, &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x435; &#x43F;&#x43E;&#x43F;&#x44B;&#x442;&#x43A;&#x443; &#x43F;&#x43E;&#x437;&#x436;&#x435;. &#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x44C; &#x43F;&#x43E;&#x43F;&#x44B;&#x442;&#x43A;&#x443;.","ba-imagecapture-chooser.image-capture":"&#x417;&#x430;&#x445;&#x432;&#x430;&#x442; &#x438;&#x437;&#x43E;&#x431;&#x440;&#x430;&#x436;&#x435;&#x43D;&#x438;&#x44F;","ba-imagecapture-chooser.upload-image":"&#x417;&#x430;&#x433;&#x440;&#x443;&#x437;&#x438;&#x442;&#x44C; &#x438;&#x437;&#x43E;&#x431;&#x440;&#x430;&#x436;&#x435;&#x43D;&#x438;&#x435;","ba-imagecapture-controlbar.settings":"&#x43D;&#x430;&#x441;&#x442;&#x440;&#x43E;&#x439;&#x43A;&#x438;","ba-imagecapture-controlbar.camerahealthy":"&#x41E;&#x441;&#x432;&#x435;&#x449;&#x435;&#x43D;&#x438;&#x435; &#x445;&#x43E;&#x440;&#x43E;&#x448;&#x435;&#x435;","ba-imagecapture-controlbar.cameraunhealthy":"&#x41E;&#x441;&#x432;&#x435;&#x449;&#x435;&#x43D;&#x438;&#x435; &#x43D;&#x435; &#x44F;&#x432;&#x43B;&#x44F;&#x435;&#x442;&#x441;&#x44F; &#x43E;&#x43F;&#x442;&#x438;&#x43C;&#x430;&#x43B;&#x44C;&#x43D;&#x44B;&#x43C;","ba-imagecapture-controlbar.record":"&#x417;&#x430;&#x445;&#x432;&#x430;&#x442;&#x438;&#x442;&#x44C;","ba-imagecapture-controlbar.record-tooltip":"&#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x437;&#x434;&#x435;&#x441;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x441;&#x434;&#x435;&#x43B;&#x430;&#x442;&#x44C; &#x441;&#x43D;&#x438;&#x43C;&#x43E;&#x43A;.","ba-imagecapture-controlbar.rerecord":"&#x43F;&#x435;&#x440;&#x435;&#x434;&#x435;&#x43B;&#x44B;&#x432;&#x430;&#x442;&#x44C;","ba-imagecapture-controlbar.rerecord-tooltip":"&#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x437;&#x434;&#x435;&#x441;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x44C;.","ba-imagecapture-controlbar.cancel":"&#x41E;&#x442;&#x43C;&#x435;&#x43D;&#x430;","ba-imagecapture-controlbar.cancel-tooltip":"&#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x437;&#x434;&#x435;&#x441;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43E;&#x442;&#x43C;&#x435;&#x43D;&#x438;&#x442;&#x44C;.","ba-audioplayer-controlbar.audio-progress":"&#x41F;&#x440;&#x43E;&#x433;&#x440;&#x435;&#x441;&#x441;","ba-audioplayer-controlbar.rerecord-audio":"&#x41F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x44C;?","ba-audioplayer-controlbar.submit-audio":"&#x43F;&#x43E;&#x434;&#x442;&#x432;&#x435;&#x440;&#x434;&#x438;&#x442;&#x44C;","ba-audioplayer-controlbar.play-audio":"&#x418;&#x433;&#x440;&#x430;&#x442;&#x44C;","ba-audioplayer-controlbar.pause-audio":"&#x41F;&#x430;&#x443;&#x437;&#x430;","ba-audioplayer-controlbar.pause-audio-disabled":"&#x41F;&#x430;&#x443;&#x437;&#x430; &#x43D;&#x435; &#x43F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x438;&#x432;&#x430;&#x435;&#x442;&#x441;&#x44F;","ba-audioplayer-controlbar.elapsed-time":"&#x423;&#x43A;&#x43E;&#x440;&#x43E;&#x447;&#x435;&#x43D;&#x43D;&#x43E;&#x435; &#x432;&#x440;&#x435;&#x43C;&#x44F;","ba-audioplayer-controlbar.total-time":"&#x41E;&#x431;&#x449;&#x430;&#x44F; &#x434;&#x43B;&#x438;&#x43D;&#x430;","ba-audioplayer-controlbar.volume-button":"&#x423;&#x441;&#x442;&#x430;&#x43D;&#x43E;&#x432;&#x438;&#x442;&#x44C; &#x433;&#x440;&#x43E;&#x43C;&#x43A;&#x43E;&#x441;&#x442;&#x44C;","ba-audioplayer-controlbar.volume-mute":"&#x41E;&#x442;&#x43A;&#x43B;&#x44E;&#x447;&#x438;&#x442;&#x44C; &#x437;&#x432;&#x443;&#x43A;","ba-audioplayer-controlbar.volume-unmute":"&#x412;&#x43A;&#x43B;&#x44E;&#x447;&#x438;&#x442;&#x44C; &#x437;&#x432;&#x443;&#x43A;","ba-audioplayer-loader.tooltip":"Loading ...","ba-audioplayer.audio-error":"&#x41F;&#x440;&#x43E;&#x438;&#x437;&#x43E;&#x448;&#x43B;&#x430; &#x43E;&#x448;&#x438;&#x431;&#x43A;&#x430;. &#x41F;&#x43E;&#x436;&#x430;&#x43B;&#x443;&#x439;&#x441;&#x442;&#x430;, &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x435; &#x43F;&#x43E;&#x43F;&#x44B;&#x442;&#x43A;&#x443; &#x43F;&#x43E;&#x437;&#x436;&#x435;. &#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x44C; &#x43F;&#x43E;&#x43F;&#x44B;&#x442;&#x43A;&#x443;.","ba-audiorecorder-chooser.record-audio":"&#x417;&#x430;&#x43F;&#x438;&#x441;&#x44C; &#x430;&#x443;&#x434;&#x438;&#x43E;","ba-audiorecorder-chooser.upload-audio":"&#x417;&#x430;&#x433;&#x440;&#x443;&#x437;&#x438;&#x442;&#x44C; &#x430;&#x443;&#x434;&#x438;&#x43E;","ba-audiorecorder-controlbar.settings":"&#x43D;&#x430;&#x441;&#x442;&#x440;&#x43E;&#x439;&#x43A;&#x438;","ba-audiorecorder-controlbar.microphonehealthy":"&#x417;&#x432;&#x443;&#x43A; &#x445;&#x43E;&#x440;&#x43E;&#x448;","ba-audiorecorder-controlbar.microphoneunhealthy":"&#x41D;&#x435;&#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E; &#x43F;&#x43E;&#x434;&#x43E;&#x431;&#x440;&#x430;&#x442;&#x44C; &#x437;&#x432;&#x443;&#x43A;","ba-audiorecorder-controlbar.record":"&#x437;&#x430;&#x43F;&#x438;&#x441;&#x44C;","ba-audiorecorder-controlbar.record-tooltip":"&#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x437;&#x434;&#x435;&#x441;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x437;&#x430;&#x43F;&#x438;&#x441;&#x430;&#x442;&#x44C;.","ba-audiorecorder-controlbar.rerecord":"&#x43F;&#x435;&#x440;&#x435;&#x434;&#x435;&#x43B;&#x44B;&#x432;&#x430;&#x442;&#x44C;","ba-audiorecorder-controlbar.rerecord-tooltip":"&#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x437;&#x434;&#x435;&#x441;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43F;&#x43E;&#x432;&#x442;&#x43E;&#x440;&#x438;&#x442;&#x44C;.","ba-audiorecorder-controlbar.stop":"&#x421;&#x442;&#x43E;&#x43F;","ba-audiorecorder-controlbar.stop-tooltip":"&#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x437;&#x434;&#x435;&#x441;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43E;&#x441;&#x442;&#x430;&#x43D;&#x43E;&#x432;&#x438;&#x442;&#x44C;&#x441;&#x44F;.","ba-audiorecorder-controlbar.stop-available-after":"&#x41C;&#x438;&#x43D;&#x438;&#x43C;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;&#x435; &#x432;&#x440;&#x435;&#x43C;&#x44F; &#x437;&#x430;&#x43F;&#x438;&#x441;&#x438;: %d &#x441;&#x435;&#x43A;&#x443;&#x43D;&#x434;","ba-audiorecorder-controlbar.cancel":"&#x41E;&#x442;&#x43C;&#x435;&#x43D;&#x430;","ba-audiorecorder-controlbar.cancel-tooltip":"&#x41D;&#x430;&#x436;&#x43C;&#x438;&#x442;&#x435; &#x437;&#x434;&#x435;&#x441;&#x44C;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43E;&#x442;&#x43C;&#x435;&#x43D;&#x438;&#x442;&#x44C;."},"language:sk":{"ba-videoplayer-playbutton.tooltip":"Pre prehratie videa kliknite.","ba-videoplayer-playbutton.rerecord":"Znovu nahra&#x165;","ba-videoplayer-playbutton.submit-video":"Potvr&#x10F;te video","ba-videoplayer-loader.tooltip":"Nahr&#xE1;vanie...","ba-videoplayer-controlbar.change-resolution":"Zme&#x148;te rozl&#xED;&#x161;enie","ba-videoplayer-controlbar.video-progress":"Progres","ba-videoplayer-controlbar.rerecord-video":"Nahra&#x165; znovu?","ba-videoplayer-controlbar.submit-video":"Potvrdi&#x165;","ba-videoplayer-controlbar.play-video":"Prehra&#x165;","ba-videoplayer-controlbar.pause-video":"Pozastavi&#x165;","ba-videoplayer-controlbar.elapsed-time":"Uplynut&#xFD; &#x10D;as","ba-videoplayer-controlbar.total-time":"Celkov&#xE1; d&#x13A;&#x17E;ka","ba-videoplayer-controlbar.fullscreen-video":"Zobrazi&#x165; na cel&#xFA; obrazovku","ba-videoplayer-controlbar.volume-button":"Nastavi&#x165; hlasitos&#x165;","ba-videoplayer-controlbar.volume-mute":"Vypn&#xFA;&#x165; zvuk","ba-videoplayer-controlbar.volume-unmute":"Zapn&#xFA;&#x165; zvuk","ba-videoplayer.video-error":"Vyskytla sa chyba. Sk&#xFA;ste to znova.","ba-videorecorder-chooser.record-video":"Nahra&#x165; nov&#xE9; video","ba-videorecorder-chooser.upload-video":"Prilo&#x17E;i&#x165; existuj&#xFA;ce video","ba-videorecorder-controlbar.settings":"Nastavenia","ba-videorecorder-controlbar.camerahealthy":"Osvetlenie vyzer&#xE1; dobre","ba-videorecorder-controlbar.cameraunhealthy":"Osvetlenie nie je optim&#xE1;lne","ba-videorecorder-controlbar.microphonehealthy":"Zvuk je v poriadku","ba-videorecorder-controlbar.microphoneunhealthy":"Nepodarilo sa zachyti&#x165; &#x17E;iaden zvuk","ba-videorecorder-controlbar.record":"Nahra&#x165;","ba-videorecorder-controlbar.record-tooltip":"Kliknite sem pre nahr&#xE1;vanie.","ba-videorecorder-controlbar.rerecord":"Znovu nahra&#x165;","ba-videorecorder-controlbar.rerecord-tooltip":"Kliknite sem pre zopakovanie nahr&#xE1;vania.","ba-videorecorder-controlbar.upload-covershot":"Prilo&#x17E;i&#x165;","ba-videorecorder-controlbar.upload-covershot-tooltip":"Kliknite sem pre nahratie vlastnej &#xFA;vodnej sn&#xED;mky","ba-videorecorder-controlbar.stop":"Zastavi&#x165;","ba-videorecorder-controlbar.stop-tooltip":"Kliknite sem pre zastavenie.","ba-videorecorder-controlbar.skip":"Presko&#x10D;i&#x165;","ba-videorecorder-controlbar.skip-tooltip":"Kliknite sem pre presko&#x10D;enie.","ba-videorecorder.recorder-error":"Vyskytla sa chyba. Kliknut&#xED;m sk&#xFA;ste znova.","ba-videorecorder.attach-error":"Nepodarilo sa n&#xE1;m z&#xED;ska&#x165; pr&#xED;stup k rozhraniu fotoapar&#xE1;tu. V z&#xE1;vislosti od zariadenia a prehliada&#x10D;a budete mo&#x17E;no musie&#x165; nain&#x161;talova&#x165; Flash alebo pristupova&#x165; na str&#xE1;nku cez protokol SSL.","ba-videorecorder.access-forbidden":"Pr&#xED;stup ku kamere bol zak&#xE1;zan&#xFD;. Kliknut&#xED;m sk&#xFA;ste znova.","ba-videorecorder.pick-covershot":"Vyberte si &#xFA;vodn&#xFA; sn&#xED;mku.","ba-videorecorder.uploading":"Nahr&#xE1;vanie","ba-videorecorder.uploading-failed":"Nahr&#xE1;vanie zlyhalo - kliknite sem pre zopakovanie.","ba-videorecorder.verifying":"Overovanie","ba-videorecorder.verifying-failed":"Overovanie zlyhalo - kliknite sem pre zopakovanie.","ba-videorecorder.rerecord-confirm":"Skuto&#x10D;ne chcete toto video prerobi&#x165;?","ba-videorecorder.video_file_too_large":"Va&#x161;e video je pr&#xED;li&#x161; dlh&#xE9; (%s) - kliknite sem pre zopakovanie s men&#x161;&#xED;m videos&#xFA;borom.","ba-videorecorder.unsupported_video_type":"Pros&#xED;m nahrajte: %s - kliknite sem pre zopakovanie.","ba-videoplayer-controlbar.exit-fullscreen-video":"Zru&#x161;i&#x165; zobrazenie na cel&#xFA; obrazovku","ba-videoplayer-share.share":"Zdie&#x13E;a&#x165;","ba-videoplayer-controlbar.pause-video-disabled":"Pozastavenie nie je mo&#x17E;n&#xE9;","ba-videorecorder-chooser.record-audio":"Nahra&#x165; zvuk","ba-videorecorder-controlbar.stop-available-after":"Minimum nahr&#xE1;vacieho &#x10D;asu je %d sek&#xFA;nd","ba-videorecorder-controlbar.cancel":"Zru&#x161;i&#x165;","ba-videorecorder-controlbar.cancel-tooltip":"Kliknite sem pre zru&#x161;enie.","ba-videorecorder.cancel-confirm":"Naozaj chcete zru&#x161;i&#x165; nahr&#xE1;vanie videa?","ba-videorecorder-chooser.record-screen":"Obrazovka nahr&#xE1;vania","ba-videoplayer-adslot.elapsed-time":"Elasped &#x10D;as","ba-videoplayer-adslot.volume-button":"Nastavte hlasitos&#x165;","ba-videoplayer-adslot.volume-mute":"Stlmenie zvuku","ba-videoplayer-adslot.volume-unmute":"Zru&#x161;i&#x165; zvuk","ba-videoplayer-adslot.ad-will-end-after":"Reklama sa skon&#x10D;&#xED; po %s","ba-videoplayer-adslot.can-skip-after":"Presko&#x10D;i&#x165; za %d","ba-videoplayer-adslot.skip-ad":"Presko&#x10D;i&#x165; reklamu","ba-videorecorder.software-required":"Ak chcete pokra&#x10D;ova&#x165;, kliknite na ni&#x17E;&#x161;ie a nain&#x161;talujte / aktivujte nasleduj&#xFA;ce po&#x17E;iadavky.","ba-videorecorder.software-waiting":"&#x10C;ak&#xE1; sa na po&#x17E;iadavky na in&#x161;tal&#xE1;ciu / aktiv&#xE1;ciu. Po skon&#x10D;en&#xED; str&#xE1;nky mo&#x17E;no budete musie&#x165; obnovi&#x165; str&#xE1;nku.","ba-videoplayer-controlbar.close-tracks":"Zatvorte CC","ba-videoplayer-controlbar.show-tracks":"Zobrazi&#x165; CC","ba-videoplayer-tracks.upload-text-tracks":"Nahrajte textov&#xE9; s&#xFA;bory skladieb","ba-videoplayer-tracks.select-text-track-language":"Jazyk titulkov","ba-videoplayer-tracks.info-select-locale-first":"Najprv vyberte lokaliz&#xE1;ciu","ba-videoplayer-tracks.select-text-track-file":"Kliknut&#xED;m vyberte s&#xFA;bor","ba-videoplayer-tracks.back":"sp&#xE4;&#x165;","ba-videorecorder.framerate-warning":"R&#xFD;chlos&#x165; videoz&#xE1;znamu je ve&#x13E;mi n&#xED;zka. Odpor&#xFA;&#x10D;ame uzavrie&#x165; v&#x161;etky ostatn&#xE9; programy a karty prehliada&#x10D;a alebo pou&#x17E;i&#x165; r&#xFD;chlej&#x161;&#xED; po&#x10D;&#xED;ta&#x10D;.","ba-videorecorder.upload-error-duration":"D&#x13A;&#x17E;ka odovzdan&#xE9;ho videa nesp&#x13A;&#x148;a po&#x17E;iadavky - kliknite sem a sk&#xFA;ste to znova.","ba-videorecorder.resolution-constraint-error":"Zvolen&#xFD; s&#xFA;bor nezodpoved&#xE1; po&#x17E;adovan&#xE9;mu rozl&#xED;&#x161;eniu - kliknite sem a sk&#xFA;ste to znova.","ba-videorecorder.orientation-portrait-required":"Zariadenie m&#xF4;&#x17E;ete nat&#xE1;&#x10D;a&#x165; nat&#xE1;&#x10D;an&#xED;m v re&#x17E;ime na v&#xFD;&#x161;ku.","ba-videorecorder.orientation-landscape-required":"Nat&#xE1;&#x10D;ajte zariadenie tak, aby sa nahral v re&#x17E;ime na &#x161;&#xED;rku.","ba-imageviewer-controlbar.rerecord-image":"Prerobi&#x165;?","ba-imageviewer-controlbar.submit-image":"potvrdi&#x165;","ba-imageviewer-controlbar.fullscreen-image":"Zadajte cel&#xFA; obrazovku","ba-imageviewer-controlbar.exit-fullscreen-image":"Ukon&#x10D;ite cel&#xFA; obrazovku","ba-imageviewer.image-error":"Vyskytla sa chyba. Sk&#xFA;ste to znovu nesk&#xF4;r pros&#xED;m. Kliknut&#xED;m sk&#xFA;ste znova.","ba-imagecapture-chooser.image-capture":"Zachy&#x165;te obr&#xE1;zok","ba-imagecapture-chooser.upload-image":"Nahra&#x165; obr&#xE1;zok","ba-imagecapture-controlbar.settings":"nastavenie","ba-imagecapture-controlbar.camerahealthy":"Osvetlenie je dobr&#xE9;","ba-imagecapture-controlbar.cameraunhealthy":"Osvetlenie nie je optim&#xE1;lne","ba-imagecapture-controlbar.record":"zajat&#xED;","ba-imagecapture-controlbar.record-tooltip":"Kliknite tu pre zachytenie.","ba-imagecapture-controlbar.rerecord":"prerobi&#x165;","ba-imagecapture-controlbar.rerecord-tooltip":"Kliknite tu pre op&#xE4;tovn&#xE9; spracovanie.","ba-imagecapture-controlbar.cancel":"Zru&#x161;i&#x165;","ba-imagecapture-controlbar.cancel-tooltip":"Kliknut&#xED;m tu zru&#x161;&#xED;te.","ba-audioplayer-controlbar.audio-progress":"pokrok","ba-audioplayer-controlbar.rerecord-audio":"Prerobi&#x165;?","ba-audioplayer-controlbar.submit-audio":"potvrdi&#x165;","ba-audioplayer-controlbar.play-audio":"hra&#x165;","ba-audioplayer-controlbar.pause-audio":"Pauza","ba-audioplayer-controlbar.pause-audio-disabled":"Pozastavenie nie je podporovan&#xE9;","ba-audioplayer-controlbar.elapsed-time":"Elasped &#x10D;as","ba-audioplayer-controlbar.total-time":"Celkov&#xE1; d&#x13A;&#x17E;ka","ba-audioplayer-controlbar.volume-button":"Nastavte hlasitos&#x165;","ba-audioplayer-controlbar.volume-mute":"Stlmenie zvuku","ba-audioplayer-controlbar.volume-unmute":"Zru&#x161;i&#x165; zvuk","ba-audioplayer-loader.tooltip":"Na&#x10D;&#xED;tava...","ba-audioplayer.audio-error":"Vyskytla sa chyba. Sk&#xFA;ste to znovu nesk&#xF4;r pros&#xED;m. Kliknut&#xED;m sk&#xFA;ste znova.","ba-audiorecorder-chooser.record-audio":"Z&#xE1;znam zvuku","ba-audiorecorder-chooser.upload-audio":"Nahra&#x165; zvuk","ba-audiorecorder-controlbar.settings":"nastavenie","ba-audiorecorder-controlbar.microphonehealthy":"Zvuk je dobr&#xFD;","ba-audiorecorder-controlbar.microphoneunhealthy":"Nepodar&#xED; sa zdvihn&#xFA;&#x165; &#x17E;iaden zvuk","ba-audiorecorder-controlbar.record":"rekord","ba-audiorecorder-controlbar.record-tooltip":"Kliknite tu pre nahr&#xE1;vanie.","ba-audiorecorder-controlbar.rerecord":"prerobi&#x165;","ba-audiorecorder-controlbar.rerecord-tooltip":"Kliknite tu pre op&#xE4;tovn&#xE9; spracovanie.","ba-audiorecorder-controlbar.stop":"presta&#x165;","ba-audiorecorder-controlbar.stop-tooltip":"Kliknut&#xED;m sem zastav&#xED;te.","ba-audiorecorder-controlbar.stop-available-after":"Minim&#xE1;lny &#x10D;as nahr&#xE1;vania je %d sekundy","ba-audiorecorder-controlbar.cancel":"Zru&#x161;i&#x165;","ba-audiorecorder-controlbar.cancel-tooltip":"Kliknut&#xED;m tu zru&#x161;&#xED;te."},"language:sr":{"ba-videoplayer-playbutton.tooltip":"&#x426;&#x43B;&#x438;&#x446;&#x43A; &#x442;&#x43E; &#x43F;&#x43B;&#x430;&#x438; &#x432;&#x438;&#x434;&#x435;&#x43E;.","ba-videoplayer-playbutton.rerecord":"&#x43F;&#x440;&#x435;&#x43F;&#x440;&#x430;&#x432;&#x438;&#x442;&#x438;","ba-videoplayer-playbutton.submit-video":"&#x43F;&#x43E;&#x442;&#x432;&#x440;&#x434;&#x438;&#x442;&#x438; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videoplayer-loader.tooltip":"&#x41B;&#x43E;&#x430;&#x434;&#x438;&#x43D;&#x433; &#x432;&#x438;&#x434;&#x435;&#x43E; ...","ba-videoplayer-controlbar.change-resolution":"&#x41F;&#x440;&#x43E;&#x43C;&#x435;&#x43D;&#x430; &#x440;&#x435;&#x437;&#x43E;&#x43B;&#x443;&#x446;&#x438;&#x458;&#x435;","ba-videoplayer-controlbar.video-progress":"&#x432;&#x438;&#x434;&#x435;&#x43E; &#x43D;&#x430;&#x43F;&#x440;&#x435;&#x434;&#x430;&#x43A;","ba-videoplayer-controlbar.rerecord-video":"&#x420;&#x435;&#x434;&#x43E; &#x432;&#x438;&#x434;&#x435;&#x43E;?","ba-videoplayer-controlbar.submit-video":"&#x43F;&#x43E;&#x442;&#x432;&#x440;&#x434;&#x438;&#x442;&#x438; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videoplayer-controlbar.play-video":"&#x43F;&#x43B;&#x430;&#x438; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videoplayer-controlbar.pause-video":"&#x43F;&#x430;&#x443;&#x437;&#x430; video","ba-videoplayer-controlbar.elapsed-time":"&#x415;&#x43B;&#x430;&#x441;&#x43F;&#x435;&#x434; &#x432;&#x440;&#x435;&#x43C;&#x435;","ba-videoplayer-controlbar.total-time":"&#x423;&#x43A;&#x443;&#x43F;&#x43D;&#x430; &#x434;&#x443;&#x436;&#x438;&#x43D;&#x430; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videoplayer-controlbar.fullscreen-video":"&#x415;&#x43D;&#x442;&#x435;&#x440; &#x444;&#x443;&#x43B;&#x43B;&#x441;&#x446;&#x440;&#x435;&#x435;&#x43D;","ba-videoplayer-controlbar.volume-button":"&#x41F;&#x43E;&#x434;&#x435;&#x448;&#x430;&#x432;&#x430;&#x45A;&#x435; &#x458;&#x430;&#x447;&#x438;&#x43D;&#x435; &#x437;&#x432;&#x443;&#x43A;&#x430;","ba-videoplayer-controlbar.volume-mute":"&#x43C;&#x443;&#x442;&#x435; &#x441;&#x43E;&#x443;&#x43D;&#x434;","ba-videoplayer-controlbar.volume-unmute":"&#x423;&#x43A;&#x459;&#x443;&#x447;&#x438; &#x437;&#x432;&#x443;&#x43A; &#x437;&#x432;&#x443;&#x43A;","ba-videoplayer.video-error":"&#x414;&#x43E;&#x448;&#x43B;&#x43E; &#x458;&#x435; &#x434;&#x43E; &#x433;&#x440;&#x435;&#x448;&#x43A;&#x435;. &#x41C;&#x43E;&#x43B;&#x438;&#x43C;&#x43E;, &#x43F;&#x43E;&#x43A;&#x443;&#x448;&#x430;&#x458;&#x442;&#x435; &#x43A;&#x430;&#x441;&#x43D;&#x438;&#x458;&#x435;. &#x426;&#x43B;&#x438;&#x446;&#x43A; &#x442;&#x43E; &#x43F;&#x43E;&#x43D;&#x43E;&#x432;&#x438;.","ba-videorecorder-chooser.record-video":"&#x421;&#x43D;&#x438;&#x43C;&#x438;&#x442;&#x435; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videorecorder-chooser.upload-video":"&#x414;&#x43E;&#x434;&#x430;&#x458; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videorecorder-controlbar.settings":"&#x41F;&#x43E;&#x434;&#x435;&#x448;&#x430;&#x432;&#x430;&#x45A;&#x430;","ba-videorecorder-controlbar.camerahealthy":"&#x41E;&#x441;&#x432;&#x435;&#x442;&#x459;&#x435;&#x45A;&#x435; &#x458;&#x435; &#x434;&#x43E;&#x431;&#x440;&#x43E;","ba-videorecorder-controlbar.cameraunhealthy":"&#x41E;&#x441;&#x432;&#x435;&#x442;&#x459;&#x435;&#x45A;&#x435; &#x43D;&#x438;&#x458;&#x435; &#x43E;&#x43F;&#x442;&#x438;&#x43C;&#x430;&#x43B;&#x43D;&#x430;","ba-videorecorder-controlbar.microphonehealthy":"&#x417;&#x432;&#x443;&#x43A; &#x458;&#x435; &#x434;&#x43E;&#x431;&#x430;&#x440;","ba-videorecorder-controlbar.microphoneunhealthy":"&#x41D;&#x435; &#x43C;&#x43E;&#x433;&#x443; &#x443;&#x437;&#x435;&#x442;&#x438; &#x431;&#x438;&#x43B;&#x43E; &#x43A;&#x43E;&#x458;&#x438; &#x437;&#x432;&#x443;&#x43A;","ba-videorecorder-controlbar.record":"&#x437;&#x430;&#x43F;&#x438;&#x441;","ba-videorecorder-controlbar.record-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x437;&#x430; &#x441;&#x43D;&#x438;&#x43C;&#x430;&#x45A;&#x435;.","ba-videorecorder-controlbar.rerecord":"&#x43F;&#x440;&#x435;&#x43F;&#x440;&#x430;&#x432;&#x438;&#x442;&#x438;","ba-videorecorder-controlbar.rerecord-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x437;&#x430; &#x43F;&#x43E;&#x43D;&#x430;&#x432;&#x459;&#x430;&#x45A;&#x435;.","ba-videorecorder-controlbar.upload-covershot":"&#x43E;&#x442;&#x43F;&#x440;&#x435;&#x43C;&#x430;&#x45A;&#x435;","ba-videorecorder-controlbar.upload-covershot-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x434;&#x430; &#x431;&#x438;&#x441;&#x442;&#x435; &#x43F;&#x440;&#x438;&#x43B;&#x430;&#x433;&#x43E;&#x452;&#x435;&#x43D;&#x443; &#x43D;&#x430;&#x441;&#x43B;&#x43E;&#x432;&#x43D;&#x443; &#x43C;&#x435;&#x442;&#x430;&#x43A;","ba-videorecorder-controlbar.stop":"&#x417;&#x430;&#x443;&#x441;&#x442;&#x430;&#x432;&#x438;&#x442;&#x438;","ba-videorecorder-controlbar.stop-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x434;&#x430; &#x441;&#x435; &#x437;&#x430;&#x443;&#x441;&#x442;&#x430;&#x432;&#x438;.","ba-videorecorder-controlbar.skip":"&#x43F;&#x440;&#x435;&#x441;&#x43A;&#x43E;&#x447;&#x438;&#x442;&#x438;","ba-videorecorder-controlbar.skip-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x434;&#x430; &#x43F;&#x440;&#x435;&#x441;&#x43A;&#x43E;&#x447;&#x438;&#x442;&#x435;.","ba-videorecorder.recorder-error":"&#x414;&#x43E;&#x448;&#x43B;&#x43E; &#x458;&#x435; &#x434;&#x43E; &#x433;&#x440;&#x435;&#x448;&#x43A;&#x435;. &#x41C;&#x43E;&#x43B;&#x438;&#x43C;&#x43E;, &#x43F;&#x43E;&#x43A;&#x443;&#x448;&#x430;&#x458;&#x442;&#x435; &#x43A;&#x430;&#x441;&#x43D;&#x438;&#x458;&#x435;. &#x426;&#x43B;&#x438;&#x446;&#x43A; &#x442;&#x43E; &#x43F;&#x43E;&#x43D;&#x43E;&#x432;&#x438;.","ba-videorecorder.attach-error":"&#x41C;&#x438; &#x43D;&#x435; &#x43C;&#x43E;&#x436;&#x435; &#x434;&#x430; &#x43F;&#x440;&#x438;&#x441;&#x442;&#x443;&#x43F;&#x438; &#x438;&#x43D;&#x442;&#x435;&#x440;&#x444;&#x435;&#x458;&#x441; &#x43A;&#x430;&#x43C;&#x435;&#x440;&#x435;. &#x423; &#x437;&#x430;&#x432;&#x438;&#x441;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x43E;&#x434; &#x443;&#x440;&#x435;&#x452;&#x430;&#x458;&#x430; &#x438; &#x43F;&#x440;&#x435;&#x442;&#x440;&#x430;&#x436;&#x438;&#x432;&#x430;&#x447;&#x430;, &#x43C;&#x43E;&#x436;&#x434;&#x430; &#x45B;&#x435;&#x442;&#x435; &#x43C;&#x43E;&#x440;&#x430;&#x442;&#x438; &#x434;&#x430; &#x438;&#x43D;&#x441;&#x442;&#x430;&#x43B;&#x438;&#x440;&#x430;&#x442;&#x435; &#x424;&#x43B;&#x430;&#x441;&#x445; &#x438;&#x43B;&#x438; &#x43F;&#x440;&#x438;&#x441;&#x442;&#x443;&#x43F;&#x438;&#x43B;&#x438; &#x441;&#x442;&#x440;&#x430;&#x43D;&#x438;&#x446;&#x438; &#x43F;&#x440;&#x435;&#x43A;&#x43E; &#x421;&#x421;&#x41B;.","ba-videorecorder.access-forbidden":"&#x41F;&#x440;&#x438;&#x441;&#x442;&#x443;&#x43F; &#x43A;&#x430;&#x43C;&#x435;&#x440;&#x43E;&#x43C; &#x458;&#x435; &#x437;&#x430;&#x431;&#x440;&#x430;&#x45A;&#x435;&#x43D;&#x43E;. &#x426;&#x43B;&#x438;&#x446;&#x43A; &#x442;&#x43E; &#x43F;&#x43E;&#x43D;&#x43E;&#x432;&#x438;.","ba-videorecorder.pick-covershot":"&#x418;&#x437;&#x430;&#x431;&#x435;&#x440;&#x438;&#x442;&#x435; &#x446;&#x43E;&#x432;&#x435;&#x440;&#x441;&#x445;&#x43E;&#x442;.","ba-videorecorder.uploading":"&#x443;&#x43F;&#x43B;&#x43E;&#x430;&#x434;&#x438;&#x43D;&#x433;","ba-videorecorder.uploading-failed":"&#x423;&#x43F;&#x43B;&#x43E;&#x430;&#x434;&#x438;&#x43D;&#x433; &#x444;&#x430;&#x438;&#x43B;&#x435;&#x434; - &#x43A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x434;&#x430; &#x43F;&#x43E;&#x43A;&#x443;&#x448;&#x430; &#x43F;&#x43E;&#x43D;&#x43E;&#x432;&#x43E;.","ba-videorecorder.verifying":"&#x432;&#x435;&#x440;&#x438;&#x444;&#x438;&#x43A;&#x430;&#x446;&#x438;&#x458;&#x443;","ba-videorecorder.verifying-failed":"&#x41F;&#x440;&#x43E;&#x432;&#x435;&#x440;&#x430; &#x43D;&#x438;&#x458;&#x435; &#x443;&#x441;&#x43F;&#x435;&#x43B;&#x430; - &#x43A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x434;&#x430; &#x43F;&#x43E;&#x43A;&#x443;&#x448;&#x430; &#x43F;&#x43E;&#x43D;&#x43E;&#x432;&#x43E;.","ba-videorecorder.rerecord-confirm":"&#x414;&#x430; &#x43B;&#x438; &#x437;&#x430;&#x438;&#x441;&#x442;&#x430; &#x436;&#x435;&#x43B;&#x438;&#x442;&#x435; &#x434;&#x430; &#x43F;&#x43E;&#x43D;&#x43E;&#x432;&#x438;&#x442;&#x435; &#x441;&#x432;&#x43E;&#x458; &#x432;&#x438;&#x434;&#x435;&#x43E;?","ba-videorecorder.video_file_too_large":"&#x412;&#x430;&#x448; &#x432;&#x438;&#x434;&#x435;&#x43E; &#x434;&#x430;&#x442;&#x43E;&#x442;&#x435;&#x43A;&#x430; &#x458;&#x435; &#x43F;&#x440;&#x435;&#x432;&#x435;&#x43B;&#x438;&#x43A;&#x430; (%s) - &#x43A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x434;&#x430; &#x43F;&#x43E;&#x43D;&#x43E;&#x432;&#x43E; &#x441;&#x430; &#x43C;&#x430;&#x45A;&#x43E;&#x43C; &#x432;&#x438;&#x434;&#x435;&#x43E; &#x444;&#x430;&#x458;&#x43B;.","ba-videorecorder.unsupported_video_type":"&#x41C;&#x43E;&#x43B;&#x438;&#x43C;&#x43E; &#x412;&#x430;&#x441; &#x434;&#x430; &#x443;&#x43F;&#x43B;&#x43E;&#x430;&#x434;: %&#x441; - &#x43A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x434;&#x430; &#x43F;&#x43E;&#x43A;&#x443;&#x448;&#x430; &#x43F;&#x43E;&#x43D;&#x43E;&#x432;&#x43E;.","ba-videoplayer-controlbar.exit-fullscreen-video":"&#x418;&#x437;&#x43B;&#x430;&#x437; &#x438;&#x437; &#x446;&#x435;&#x43B;&#x43E;&#x433; &#x435;&#x43A;&#x440;&#x430;&#x43D;&#x430;","ba-videoplayer-share.share":"&#x41F;&#x43E;&#x434;&#x435;&#x43B;&#x438; &#x432;&#x438;&#x434;&#x435;&#x43E;","ba-videorecorder-chooser.record-screen":"&#x421;&#x43D;&#x438;&#x43C;&#x430;&#x43A; &#x435;&#x43A;&#x440;&#x430;&#x43D;&#x430;","ba-videoplayer-controlbar.pause-video-disabled":"&#x41F;&#x430;&#x443;&#x437;&#x430; &#x43D;&#x438;&#x458;&#x435; &#x43F;&#x43E;&#x434;&#x440;&#x436;&#x430;&#x43D;&#x430;","ba-videorecorder-chooser.record-audio":"&#x421;&#x43D;&#x438;&#x43C;&#x438;&#x442;&#x438; &#x437;&#x432;&#x443;&#x43A;","ba-videorecorder-controlbar.stop-available-after":"&#x41C;&#x438;&#x43D;&#x438;&#x43C;&#x430;&#x43B;&#x43D;&#x43E; &#x432;&#x440;&#x435;&#x43C;&#x435; &#x441;&#x43D;&#x438;&#x43C;&#x430;&#x45A;&#x430; &#x458;&#x435; %&#x434; &#x441;&#x435;&#x43A;&#x443;&#x43D;&#x434;&#x438;","ba-videorecorder-controlbar.cancel":"&#x41F;&#x43E;&#x43D;&#x438;&#x448;&#x442;&#x438;&#x442;&#x438;, &#x43E;&#x442;&#x43A;&#x430;&#x437;&#x430;&#x442;&#x438;","ba-videorecorder-controlbar.cancel-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x434;&#x430; &#x431;&#x438;&#x441;&#x442;&#x435; &#x43E;&#x442;&#x43A;&#x430;&#x437;&#x430;&#x43B;&#x438;.","ba-videorecorder.cancel-confirm":"&#x414;&#x430; &#x43B;&#x438; &#x437;&#x430;&#x438;&#x441;&#x442;&#x430; &#x436;&#x435;&#x43B;&#x438;&#x442;&#x435; &#x434;&#x430; &#x43E;&#x442;&#x43A;&#x430;&#x436;&#x435;&#x442;&#x435; &#x432;&#x438;&#x434;&#x435;&#x43E; &#x43E;&#x442;&#x43F;&#x440;&#x435;&#x43C;&#x430;&#x45A;&#x435;?","ba-videoplayer-adslot.elapsed-time":"&#x415;&#x43B;&#x430;&#x441;&#x43F;&#x435;&#x434; &#x442;&#x438;&#x43C;&#x435;","ba-videoplayer-adslot.volume-button":"&#x41F;&#x43E;&#x434;&#x435;&#x441;&#x438;&#x442;&#x435; &#x458;&#x430;&#x447;&#x438;&#x43D;&#x443; &#x437;&#x432;&#x443;&#x43A;&#x430;","ba-videoplayer-adslot.volume-mute":"&#x418;&#x441;&#x43A;&#x459;&#x443;&#x447;&#x438; &#x437;&#x432;&#x443;&#x43A;","ba-videoplayer-adslot.volume-unmute":"&#x423;&#x43A;&#x459;&#x443;&#x447;&#x438; &#x437;&#x432;&#x443;&#x43A;","ba-videoplayer-adslot.ad-will-end-after":"&#x41E;&#x433;&#x43B;&#x430;&#x441; &#x45B;&#x435; &#x441;&#x435; &#x437;&#x430;&#x432;&#x440;&#x448;&#x438;&#x442;&#x438; &#x43D;&#x430;&#x43A;&#x43E;&#x43D; %&#x441;","ba-videoplayer-adslot.can-skip-after":"&#x41F;&#x440;&#x435;&#x441;&#x43A;&#x43E;&#x447;&#x438; &#x43F;&#x43E;&#x441;&#x43B;&#x435; %&#x434;","ba-videoplayer-adslot.skip-ad":"&#x41F;&#x440;&#x435;&#x441;&#x43A;&#x43E;&#x447;&#x438;&#x442;&#x435; &#x43E;&#x433;&#x43B;&#x430;&#x441;","ba-videorecorder.software-required":"&#x41C;&#x43E;&#x43B;&#x438;&#x43C;&#x43E; &#x434;&#x430; &#x43A;&#x43B;&#x438;&#x43A;&#x43D;&#x435;&#x442;&#x435; &#x438;&#x441;&#x43F;&#x43E;&#x434; &#x434;&#x430; &#x431;&#x438;&#x441;&#x442;&#x435; &#x438;&#x43D;&#x441;&#x442;&#x430;&#x43B;&#x438;&#x440;&#x430;&#x43B;&#x438; / &#x430;&#x43A;&#x442;&#x438;&#x432;&#x438;&#x440;&#x430;&#x43B;&#x438; &#x441;&#x43B;&#x435;&#x434;&#x435;&#x45B;&#x435; &#x437;&#x430;&#x445;&#x442;&#x435;&#x432;&#x435; &#x43A;&#x430;&#x43A;&#x43E; &#x431;&#x438;&#x441;&#x442;&#x435; &#x43D;&#x430;&#x441;&#x442;&#x430;&#x432;&#x438;&#x43B;&#x438;.","ba-videorecorder.software-waiting":"&#x427;&#x435;&#x43A;&#x430; &#x441;&#x435; &#x437;&#x430;&#x445;&#x442;&#x435;&#x432; &#x43A;&#x43E;&#x458;&#x438; &#x442;&#x440;&#x435;&#x431;&#x430; &#x438;&#x43D;&#x441;&#x442;&#x430;&#x43B;&#x438;&#x440;&#x430;&#x442;&#x438; / &#x430;&#x43A;&#x442;&#x438;&#x432;&#x438;&#x440;&#x430;&#x442;&#x438;. &#x41C;&#x43E;&#x436;&#x434;&#x430; &#x45B;&#x435;&#x442;&#x435; &#x43C;&#x43E;&#x440;&#x430;&#x442;&#x438; &#x43E;&#x441;&#x432;&#x435;&#x436;&#x438;&#x442;&#x438; &#x441;&#x442;&#x440;&#x430;&#x43D;&#x438;&#x446;&#x443; &#x43D;&#x430;&#x43A;&#x43E;&#x43D; &#x437;&#x430;&#x432;&#x440;&#x448;&#x435;&#x442;&#x43A;&#x430;.","ba-videoplayer-controlbar.close-tracks":"&#x417;&#x430;&#x442;&#x432;&#x43E;&#x440;&#x438; &#x426;&#x426;","ba-videoplayer-controlbar.show-tracks":"&#x41F;&#x440;&#x438;&#x43A;&#x430;&#x436;&#x438; &#x426;&#x426;","ba-videoplayer-tracks.upload-text-tracks":"&#x414;&#x43E;&#x434;&#x430;&#x458; &#x442;&#x435;&#x43A;&#x441;&#x442;&#x443;&#x430;&#x43B;&#x43D;&#x435; &#x434;&#x430;&#x442;&#x43E;&#x442;&#x435;&#x43A;&#x435;","ba-videoplayer-tracks.select-text-track-language":"&#x408;&#x435;&#x437;&#x438;&#x43A; &#x442;&#x438;&#x442;&#x43B;&#x430;","ba-videoplayer-tracks.info-select-locale-first":"&#x41F;&#x440;&#x432;&#x43E; &#x438;&#x437;&#x430;&#x431;&#x435;&#x440;&#x438;&#x442;&#x435; &#x43B;&#x43E;&#x43A;&#x430;&#x43B;","ba-videoplayer-tracks.select-text-track-file":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x434;&#x430; &#x431;&#x438;&#x441;&#x442;&#x435; &#x438;&#x437;&#x430;&#x431;&#x440;&#x430;&#x43B;&#x438; &#x434;&#x430;&#x442;&#x43E;&#x442;&#x435;&#x43A;&#x443;","ba-videoplayer-tracks.back":"&#x43D;&#x430;&#x437;&#x430;&#x434;","ba-videorecorder.framerate-warning":"&#x421;&#x442;&#x43E;&#x43F;&#x430; &#x432;&#x438;&#x434;&#x435;&#x43E; &#x43A;&#x430;&#x434;&#x440;&#x430; &#x458;&#x435; &#x432;&#x440;&#x43B;&#x43E; &#x43D;&#x438;&#x441;&#x43A;&#x430;. &#x41F;&#x440;&#x435;&#x43F;&#x43E;&#x440;&#x443;&#x447;&#x443;&#x458;&#x435;&#x43C;&#x43E; &#x434;&#x430; &#x437;&#x430;&#x442;&#x432;&#x430;&#x440;&#x430;&#x442;&#x435; &#x441;&#x432;&#x435; &#x434;&#x440;&#x443;&#x433;&#x435; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x435; &#x438; &#x43A;&#x430;&#x440;&#x442;&#x438;&#x446;&#x435; &#x43F;&#x440;&#x435;&#x433;&#x43B;&#x435;&#x434;&#x430;&#x447;&#x430; &#x438;&#x43B;&#x438; &#x434;&#x430; &#x43A;&#x43E;&#x440;&#x438;&#x441;&#x442;&#x438;&#x442;&#x435; &#x431;&#x440;&#x436;&#x438; &#x440;&#x430;&#x447;&#x443;&#x43D;&#x430;&#x440;.","ba-videorecorder.upload-error-duration":"&#x414;&#x443;&#x436;&#x438;&#x43D;&#x430; &#x432;&#x438;&#x434;&#x435;&#x43E; &#x441;&#x43D;&#x438;&#x43C;&#x43A;&#x430; &#x43D;&#x435; &#x438;&#x441;&#x43F;&#x443;&#x45A;&#x430;&#x432;&#x430; &#x443;&#x441;&#x43B;&#x43E;&#x432;&#x435; - &#x43A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x434;&#x430; &#x431;&#x438;&#x441;&#x442;&#x435; &#x43F;&#x43E;&#x43D;&#x43E;&#x432;&#x43E; &#x43F;&#x43E;&#x43A;&#x443;&#x448;&#x430;&#x43B;&#x438;.","ba-videorecorder.resolution-constraint-error":"&#x414;&#x430;&#x442;&#x43E;&#x442;&#x435;&#x43A;&#x430; &#x43A;&#x43E;&#x458;&#x443; &#x441;&#x442;&#x435; &#x43E;&#x434;&#x430;&#x431;&#x440;&#x430;&#x43B;&#x438; &#x43D;&#x435; &#x43E;&#x434;&#x433;&#x43E;&#x432;&#x430;&#x440;&#x430; &#x442;&#x440;&#x430;&#x436;&#x435;&#x43D;&#x43E;&#x458; &#x440;&#x435;&#x437;&#x43E;&#x43B;&#x443;&#x446;&#x438;&#x458;&#x438; - &#x43A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x434;&#x430; &#x431;&#x438;&#x441;&#x442;&#x435; &#x43F;&#x43E;&#x43D;&#x43E;&#x432;&#x43E; &#x43F;&#x43E;&#x43A;&#x443;&#x448;&#x430;&#x43B;&#x438;.","ba-videorecorder.orientation-portrait-required":"&#x420;&#x43E;&#x442;&#x438;&#x440;&#x430;&#x458;&#x442;&#x435; &#x443;&#x440;&#x435;&#x452;&#x430;&#x458; &#x437;&#x430; &#x441;&#x43D;&#x438;&#x43C;&#x430;&#x45A;&#x435; &#x443; &#x43F;&#x43E;&#x440;&#x442;&#x440;&#x435;&#x442;&#x43D;&#x43E;&#x43C; &#x440;&#x435;&#x436;&#x438;&#x43C;&#x443;.","ba-videorecorder.orientation-landscape-required":"&#x420;&#x43E;&#x442;&#x438;&#x440;&#x430;&#x458;&#x442;&#x435; &#x443;&#x440;&#x435;&#x452;&#x430;&#x458; &#x43A;&#x430;&#x43A;&#x43E; &#x431;&#x438;&#x441;&#x442;&#x435; &#x441;&#x43D;&#x438;&#x43C;&#x438;&#x43B;&#x438; &#x443; &#x43F;&#x435;&#x458;&#x437;&#x430;&#x436;&#x43D;&#x43E;&#x43C; &#x440;&#x435;&#x436;&#x438;&#x43C;&#x443;.","ba-imageviewer-controlbar.rerecord-image":"&#x41F;&#x43E;&#x43D;&#x43E;&#x432;&#x43E;?","ba-imageviewer-controlbar.submit-image":"&#x41F;&#x43E;&#x442;&#x432;&#x440;&#x434;&#x438;","ba-imageviewer-controlbar.fullscreen-image":"&#x423;&#x43D;&#x435;&#x441;&#x438;&#x442;&#x435; &#x446;&#x435;&#x43E; &#x435;&#x43A;&#x440;&#x430;&#x43D;","ba-imageviewer-controlbar.exit-fullscreen-image":"&#x418;&#x437;&#x430;&#x45B;&#x438; &#x438;&#x437; &#x446;&#x435;&#x43B;&#x43E;&#x433; &#x435;&#x43A;&#x440;&#x430;&#x43D;&#x430;","ba-imageviewer.image-error":"&#x414;&#x43E;&#x448;&#x43B;&#x43E; &#x458;&#x435; &#x434;&#x43E; &#x433;&#x440;&#x435;&#x448;&#x43A;&#x435;. &#x41C;&#x43E;&#x43B;&#x438;&#x43C;&#x43E;, &#x43F;&#x43E;&#x43A;&#x443;&#x448;&#x430;&#x458;&#x442;&#x435; &#x43A;&#x430;&#x441;&#x43D;&#x438;&#x458;&#x435;. &#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x434;&#x430; &#x431;&#x438;&#x441;&#x442;&#x435; &#x43F;&#x43E;&#x43D;&#x43E;&#x432;&#x43E; &#x43F;&#x43E;&#x43A;&#x443;&#x448;&#x430;&#x43B;&#x438;.","ba-imagecapture-chooser.image-capture":"&#x426;&#x430;&#x43F;&#x442;&#x443;&#x440;&#x435; &#x418;&#x43C;&#x430;&#x433;&#x435;","ba-imagecapture-chooser.upload-image":"&#x423;&#x447;&#x438;&#x442;&#x430;&#x458; &#x441;&#x43B;&#x438;&#x43A;&#x443;","ba-imagecapture-controlbar.settings":"&#x41F;&#x43E;&#x434;&#x435;&#x448;&#x430;&#x432;&#x430;&#x45A;&#x430;","ba-imagecapture-controlbar.camerahealthy":"&#x41E;&#x441;&#x432;&#x435;&#x442;&#x459;&#x435;&#x45A;&#x435; &#x458;&#x435; &#x434;&#x43E;&#x431;&#x440;&#x43E;","ba-imagecapture-controlbar.cameraunhealthy":"&#x41E;&#x441;&#x432;&#x435;&#x442;&#x459;&#x435;&#x45A;&#x435; &#x43D;&#x438;&#x458;&#x435; &#x43E;&#x43F;&#x442;&#x438;&#x43C;&#x430;&#x43B;&#x43D;&#x43E;","ba-imagecapture-controlbar.record":"&#x421;&#x43D;&#x438;&#x43C;&#x430;&#x458;&#x442;&#x435;","ba-imagecapture-controlbar.record-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x434;&#x430; &#x431;&#x438;&#x441;&#x442;&#x435; &#x441;&#x43D;&#x438;&#x43C;&#x438;&#x43B;&#x438;.","ba-imagecapture-controlbar.rerecord":"&#x41F;&#x43E;&#x43D;&#x43E;&#x432;&#x43E;","ba-imagecapture-controlbar.rerecord-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x434;&#x430; &#x431;&#x438;&#x441;&#x442;&#x435; &#x43F;&#x43E;&#x43D;&#x43E;&#x432;&#x438;&#x43B;&#x438;.","ba-imagecapture-controlbar.cancel":"&#x41F;&#x43E;&#x43D;&#x438;&#x448;&#x442;&#x438;&#x442;&#x438;, &#x43E;&#x442;&#x43A;&#x430;&#x437;&#x430;&#x442;&#x438;","ba-imagecapture-controlbar.cancel-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x434;&#x430; &#x431;&#x438;&#x441;&#x442;&#x435; &#x43E;&#x442;&#x43A;&#x430;&#x437;&#x430;&#x43B;&#x438;.","ba-audioplayer-controlbar.audio-progress":"&#x41D;&#x430;&#x43F;&#x440;&#x435;&#x434;&#x430;&#x43A;","ba-audioplayer-controlbar.rerecord-audio":"&#x41F;&#x43E;&#x43D;&#x43E;&#x432;&#x43E;?","ba-audioplayer-controlbar.submit-audio":"&#x41F;&#x43E;&#x442;&#x432;&#x440;&#x434;&#x438;","ba-audioplayer-controlbar.play-audio":"&#x418;&#x433;&#x440;&#x430;","ba-audioplayer-controlbar.pause-audio":"&#x41F;&#x430;&#x443;&#x437;&#x438;&#x440;&#x430;&#x458;","ba-audioplayer-controlbar.pause-audio-disabled":"&#x41F;&#x430;&#x443;&#x437;&#x430; &#x43D;&#x438;&#x458;&#x435; &#x43F;&#x43E;&#x434;&#x440;&#x436;&#x430;&#x43D;&#x430;","ba-audioplayer-controlbar.elapsed-time":"&#x415;&#x43B;&#x430;&#x441;&#x43F;&#x435;&#x434; &#x442;&#x438;&#x43C;&#x435;","ba-audioplayer-controlbar.total-time":"&#x423;&#x43A;&#x443;&#x43F;&#x43D;&#x430; &#x434;&#x443;&#x436;&#x438;&#x43D;&#x430;","ba-audioplayer-controlbar.volume-button":"&#x41F;&#x43E;&#x434;&#x435;&#x441;&#x438;&#x442;&#x435; &#x458;&#x430;&#x447;&#x438;&#x43D;&#x443; &#x437;&#x432;&#x443;&#x43A;&#x430;","ba-audioplayer-controlbar.volume-mute":"&#x418;&#x441;&#x43A;&#x459;&#x443;&#x447;&#x438; &#x437;&#x432;&#x443;&#x43A;","ba-audioplayer-controlbar.volume-unmute":"&#x423;&#x43A;&#x459;&#x443;&#x447;&#x438; &#x437;&#x432;&#x443;&#x43A;","ba-audioplayer-loader.tooltip":"&#x423;&#x447;&#x438;&#x442;&#x430;&#x432;&#x430;&#x45A;&#x435; ...","ba-audioplayer.audio-error":"&#x414;&#x43E;&#x448;&#x43B;&#x43E; &#x458;&#x435; &#x434;&#x43E; &#x433;&#x440;&#x435;&#x448;&#x43A;&#x435;. &#x41C;&#x43E;&#x43B;&#x438;&#x43C;&#x43E;, &#x43F;&#x43E;&#x43A;&#x443;&#x448;&#x430;&#x458;&#x442;&#x435; &#x43A;&#x430;&#x441;&#x43D;&#x438;&#x458;&#x435;. &#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x434;&#x430; &#x431;&#x438;&#x441;&#x442;&#x435; &#x43F;&#x43E;&#x43D;&#x43E;&#x432;&#x43E; &#x43F;&#x43E;&#x43A;&#x443;&#x448;&#x430;&#x43B;&#x438;.","ba-audiorecorder-chooser.record-audio":"&#x421;&#x43D;&#x438;&#x43C;&#x438;&#x442;&#x438; &#x437;&#x432;&#x443;&#x43A;","ba-audiorecorder-chooser.upload-audio":"&#x423;&#x43F;&#x43B;&#x43E;&#x430;&#x434; &#x410;&#x443;&#x434;&#x438;&#x43E;","ba-audiorecorder-controlbar.settings":"&#x41F;&#x43E;&#x434;&#x435;&#x448;&#x430;&#x432;&#x430;&#x45A;&#x430;","ba-audiorecorder-controlbar.microphonehealthy":"&#x417;&#x432;&#x443;&#x43A; &#x458;&#x435; &#x434;&#x43E;&#x431;&#x430;&#x440;","ba-audiorecorder-controlbar.microphoneunhealthy":"&#x41D;&#x435; &#x43C;&#x43E;&#x433;&#x443; &#x43F;&#x43E;&#x434;&#x438;&#x45B;&#x438; &#x437;&#x432;&#x443;&#x43A;","ba-audiorecorder-controlbar.record":"&#x417;&#x430;&#x43F;&#x438;&#x441;","ba-audiorecorder-controlbar.record-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x437;&#x430; &#x441;&#x43D;&#x438;&#x43C;&#x430;&#x45A;&#x435;.","ba-audiorecorder-controlbar.rerecord":"&#x41F;&#x43E;&#x43D;&#x43E;&#x432;&#x43E;","ba-audiorecorder-controlbar.rerecord-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x434;&#x430; &#x431;&#x438;&#x441;&#x442;&#x435; &#x43F;&#x43E;&#x43D;&#x43E;&#x432;&#x438;&#x43B;&#x438;.","ba-audiorecorder-controlbar.stop":"&#x417;&#x430;&#x443;&#x441;&#x442;&#x430;&#x432;&#x438;&#x442;&#x438;","ba-audiorecorder-controlbar.stop-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x434;&#x430; &#x431;&#x438;&#x441;&#x442;&#x435; &#x437;&#x430;&#x443;&#x441;&#x442;&#x430;&#x432;&#x438;&#x43B;&#x438;.","ba-audiorecorder-controlbar.stop-available-after":"&#x41C;&#x438;&#x43D;&#x438;&#x43C;&#x430;&#x43B;&#x43D;&#x43E; &#x432;&#x440;&#x435;&#x43C;&#x435; &#x441;&#x43D;&#x438;&#x43C;&#x430;&#x45A;&#x430; &#x458;&#x435; %&#x434; &#x441;&#x435;&#x43A;&#x443;&#x43D;&#x434;&#x438;","ba-audiorecorder-controlbar.cancel":"&#x41F;&#x43E;&#x43D;&#x438;&#x448;&#x442;&#x438;&#x442;&#x438;, &#x43E;&#x442;&#x43A;&#x430;&#x437;&#x430;&#x442;&#x438;","ba-audiorecorder-controlbar.cancel-tooltip":"&#x41A;&#x43B;&#x438;&#x43A;&#x43D;&#x438;&#x442;&#x435; &#x43E;&#x432;&#x434;&#x435; &#x434;&#x430; &#x431;&#x438;&#x441;&#x442;&#x435; &#x43E;&#x442;&#x43A;&#x430;&#x437;&#x430;&#x43B;&#x438;."},"language:sv":{"ba-videoplayer-playbutton.tooltip":"Klicka f&#xF6;r att spela upp video.","ba-videoplayer-playbutton.rerecord":"G&#xF6;ra om","ba-videoplayer-playbutton.submit-video":"bekr&#xE4;fta video","ba-videoplayer-loader.tooltip":"Laddar video ...","ba-videoplayer-controlbar.change-resolution":"&#xE4;ndra uppl&#xF6;sning","ba-videoplayer-controlbar.video-progress":"video framsteg","ba-videoplayer-controlbar.rerecord-video":"G&#xF6;r video?","ba-videoplayer-controlbar.submit-video":"bekr&#xE4;fta video","ba-videoplayer-controlbar.play-video":"Spela video","ba-videoplayer-controlbar.pause-video":"pause video","ba-videoplayer-controlbar.elapsed-time":"f&#xF6;rfluten tid","ba-videoplayer-controlbar.total-time":"Totala l&#xE4;ngden av video","ba-videoplayer-controlbar.fullscreen-video":"Ange fullscreen","ba-videoplayer-controlbar.volume-button":"inst&#xE4;llda volymen","ba-videoplayer-controlbar.volume-mute":"st&#xE4;nga av ljudet","ba-videoplayer-controlbar.volume-unmute":"s&#xE4;tta p&#xE5; ljudet","ba-videoplayer.video-error":"Ett fel har intr&#xE4;ffat. V&#xE4;nligen f&#xF6;rs&#xF6;k igen senare. Klicka f&#xF6;r att f&#xF6;rs&#xF6;ka igen.","ba-videorecorder-chooser.record-video":"Spela din video","ba-videorecorder-chooser.upload-video":"Ladda upp video","ba-videorecorder-controlbar.settings":"inst&#xE4;llningar","ba-videorecorder-controlbar.camerahealthy":"Belysning &#xE4;r bra","ba-videorecorder-controlbar.cameraunhealthy":"Belysning &#xE4;r inte optimal","ba-videorecorder-controlbar.microphonehealthy":"Ljudet &#xE4;r bra","ba-videorecorder-controlbar.microphoneunhealthy":"Det g&#xE5;r inte att plocka upp n&#xE5;got ljud","ba-videorecorder-controlbar.record":"Spela in","ba-videorecorder-controlbar.record-tooltip":"Klicka h&#xE4;r f&#xF6;r att spela in.","ba-videorecorder-controlbar.rerecord":"G&#xF6;ra om","ba-videorecorder-controlbar.rerecord-tooltip":"Klicka h&#xE4;r f&#xF6;r att g&#xF6;ra om.","ba-videorecorder-controlbar.upload-covershot":"Ladda upp","ba-videorecorder-controlbar.upload-covershot-tooltip":"Klicka h&#xE4;r f&#xF6;r att ladda upp anpassade t&#xE4;cka skott","ba-videorecorder-controlbar.stop":"Sluta","ba-videorecorder-controlbar.stop-tooltip":"Klicka h&#xE4;r f&#xF6;r att stanna.","ba-videorecorder-controlbar.skip":"Hoppa","ba-videorecorder-controlbar.skip-tooltip":"Klicka h&#xE4;r f&#xF6;r att hoppa.","ba-videorecorder.recorder-error":"Ett fel har intr&#xE4;ffat. V&#xE4;nligen f&#xF6;rs&#xF6;k igen senare. Klicka f&#xF6;r att f&#xF6;rs&#xF6;ka igen.","ba-videorecorder.attach-error":"Vi kunde inte komma &#xE5;t kameragr&#xE4;nssnittet. Beroende p&#xE5; vilken enhet och webbl&#xE4;sare, kan du beh&#xF6;va installera Flash eller &#xF6;ppna sidan via SSL.","ba-videorecorder.access-forbidden":"&#xC5;tkomst till kameran var f&#xF6;rbjudet. Klicka f&#xF6;r att f&#xF6;rs&#xF6;ka igen.","ba-videorecorder.pick-covershot":"V&#xE4;lj en covershot.","ba-videorecorder.uploading":"uppladdning","ba-videorecorder.uploading-failed":"Uppladdning misslyckades - klicka h&#xE4;r f&#xF6;r att f&#xF6;rs&#xF6;ka igen.","ba-videorecorder.verifying":"verifiera","ba-videorecorder.verifying-failed":"Verifiera misslyckades - klicka h&#xE4;r f&#xF6;r att f&#xF6;rs&#xF6;ka igen.","ba-videorecorder.rerecord-confirm":"Vill du verkligen vill g&#xF6;ra om din video?","ba-videorecorder.video_file_too_large":"Videofilen &#xE4;r f&#xF6;r stor (%s) - klicka h&#xE4;r f&#xF6;r att f&#xF6;rs&#xF6;ka igen med en mindre videofil.","ba-videorecorder.unsupported_video_type":"Ladda upp: %s - klicka h&#xE4;r f&#xF6;r att f&#xF6;rs&#xF6;ka igen.","ba-videoplayer-controlbar.exit-fullscreen-video":"Avsluta fullsk&#xE4;rmen","ba-videoplayer-share.share":"Dela video","ba-videorecorder-chooser.record-screen":"Inspelningssk&#xE4;rm","ba-videoplayer-controlbar.pause-video-disabled":"Paus st&#xF6;ds inte","ba-videorecorder-chooser.record-audio":"Spela in ljud","ba-videorecorder-controlbar.stop-available-after":"Minsta inspelningstid &#xE4;r %d sekunder","ba-videorecorder-controlbar.cancel":"Annullera","ba-videorecorder-controlbar.cancel-tooltip":"Klicka h&#xE4;r f&#xF6;r att avbryta.","ba-videorecorder.cancel-confirm":"Vill du verkligen avbryta din videouppladdning?","ba-videoplayer-adslot.elapsed-time":"Elasped tid","ba-videoplayer-adslot.volume-button":"Ange volym","ba-videoplayer-adslot.volume-mute":"St&#xE4;ng ljudet","ba-videoplayer-adslot.volume-unmute":"Sl&#xE5; av ljudet","ba-videoplayer-adslot.ad-will-end-after":"Annonsen slutar efter %s","ba-videoplayer-adslot.can-skip-after":"Hoppa &#xF6;ver efter %d","ba-videoplayer-adslot.skip-ad":"Hoppa &#xF6;ver annonsen","ba-videorecorder.software-required":"V&#xE4;nligen klicka nedan f&#xF6;r att installera / aktivera f&#xF6;ljande krav f&#xF6;r att forts&#xE4;tta.","ba-videorecorder.software-waiting":"V&#xE4;ntar p&#xE5; att kraven ska installeras / aktiveras. Det kan h&#xE4;nda att du beh&#xF6;ver uppdatera sidan efter slutf&#xF6;randet.","ba-videoplayer-controlbar.close-tracks":"St&#xE4;ng CC","ba-videoplayer-controlbar.show-tracks":"Visa CC","ba-videoplayer-tracks.upload-text-tracks":"Ladda upp sp&#xE5;r textfiler","ba-videoplayer-tracks.select-text-track-language":"Textningsspr&#xE5;k","ba-videoplayer-tracks.info-select-locale-first":"V&#xE4;lj f&#xF6;rst platsen","ba-videoplayer-tracks.select-text-track-file":"Klicka f&#xF6;r att v&#xE4;lja fil","ba-videoplayer-tracks.back":"tillbaka","ba-videorecorder.framerate-warning":"Videorammen &#xE4;r mycket l&#xE5;ga. Vi rekommenderar att du st&#xE4;nger alla andra program och webbl&#xE4;sarflikar eller anv&#xE4;nder en snabbare dator.","ba-videorecorder.upload-error-duration":"L&#xE4;ngd p&#xE5; den uppladdade videon uppfyller inte kraven - klicka h&#xE4;r f&#xF6;r att f&#xF6;rs&#xF6;ka igen.","ba-videorecorder.resolution-constraint-error":"Filen du har valt matchar inte den &#xF6;nskade uppl&#xF6;sningen - klicka h&#xE4;r f&#xF6;r att f&#xF6;rs&#xF6;ka igen.","ba-videorecorder.orientation-portrait-required":"V&#xE4;nligen rotera enheten f&#xF6;r att spela in i st&#xE5;ende l&#xE4;ge.","ba-videorecorder.orientation-landscape-required":"V&#xE4;nligen rotera enheten f&#xF6;r att spela in i liggande l&#xE4;ge.","ba-imageviewer-controlbar.rerecord-image":"G&#xF6;ra om?","ba-imageviewer-controlbar.submit-image":"Bekr&#xE4;fta","ba-imageviewer-controlbar.fullscreen-image":"Ange fullsk&#xE4;rm","ba-imageviewer-controlbar.exit-fullscreen-image":"Avsluta fullsk&#xE4;rmen","ba-imageviewer.image-error":"Ett fel har intr&#xE4;ffat. V&#xE4;nligen f&#xF6;rs&#xF6;k igen senare. Klicka f&#xF6;r att f&#xF6;rs&#xF6;ka igen.","ba-imagecapture-chooser.image-capture":"Capture Image","ba-imagecapture-chooser.upload-image":"Ladda upp bild","ba-imagecapture-controlbar.settings":"inst&#xE4;llningar","ba-imagecapture-controlbar.camerahealthy":"Belysning &#xE4;r bra","ba-imagecapture-controlbar.cameraunhealthy":"Belysning &#xE4;r inte optimal","ba-imagecapture-controlbar.record":"F&#xE5;nga","ba-imagecapture-controlbar.record-tooltip":"Klicka h&#xE4;r f&#xF6;r att f&#xE5;nga.","ba-imagecapture-controlbar.rerecord":"G&#xF6;ra om","ba-imagecapture-controlbar.rerecord-tooltip":"Klicka h&#xE4;r f&#xF6;r att g&#xF6;ra om.","ba-imagecapture-controlbar.cancel":"Annullera","ba-imagecapture-controlbar.cancel-tooltip":"Klicka h&#xE4;r f&#xF6;r att avbryta.","ba-audioplayer-controlbar.audio-progress":"Framsteg","ba-audioplayer-controlbar.rerecord-audio":"G&#xF6;ra om?","ba-audioplayer-controlbar.submit-audio":"Bekr&#xE4;fta","ba-audioplayer-controlbar.play-audio":"Spela","ba-audioplayer-controlbar.pause-audio":"Paus","ba-audioplayer-controlbar.pause-audio-disabled":"Paus st&#xF6;ds inte","ba-audioplayer-controlbar.elapsed-time":"Elasped tid","ba-audioplayer-controlbar.total-time":"Total l&#xE4;ngd p&#xE5;","ba-audioplayer-controlbar.volume-button":"Ange volym","ba-audioplayer-controlbar.volume-mute":"St&#xE4;ng ljudet","ba-audioplayer-controlbar.volume-unmute":"Sl&#xE5; av ljudet","ba-audioplayer-loader.tooltip":"L&#xE4;ser in...","ba-audioplayer.audio-error":"Ett fel har intr&#xE4;ffat. V&#xE4;nligen f&#xF6;rs&#xF6;k igen senare. Klicka f&#xF6;r att f&#xF6;rs&#xF6;ka igen.","ba-audiorecorder-chooser.record-audio":"Spela in ljud","ba-audiorecorder-chooser.upload-audio":"Ladda upp ljud","ba-audiorecorder-controlbar.settings":"inst&#xE4;llningar","ba-audiorecorder-controlbar.microphonehealthy":"Ljudet &#xE4;r bra","ba-audiorecorder-controlbar.microphoneunhealthy":"Kan inte h&#xE4;mta n&#xE5;got ljud","ba-audiorecorder-controlbar.record":"Spela in","ba-audiorecorder-controlbar.record-tooltip":"Klicka h&#xE4;r f&#xF6;r att spela in.","ba-audiorecorder-controlbar.rerecord":"G&#xF6;ra om","ba-audiorecorder-controlbar.rerecord-tooltip":"Klicka h&#xE4;r f&#xF6;r att g&#xF6;ra om.","ba-audiorecorder-controlbar.stop":"Sluta","ba-audiorecorder-controlbar.stop-tooltip":"Klicka h&#xE4;r f&#xF6;r att sluta.","ba-audiorecorder-controlbar.stop-available-after":"Minsta inspelningstid &#xE4;r %d sekunder","ba-audiorecorder-controlbar.cancel":"Annullera","ba-audiorecorder-controlbar.cancel-tooltip":"Klicka h&#xE4;r f&#xF6;r att avbryta."},"language:tl":{"ba-videoplayer-playbutton.tooltip":"I-click upang i-play ang video.","ba-videoplayer-playbutton.rerecord":"I-redo","ba-videoplayer-playbutton.submit-video":"Kumpirmahin ang video","ba-videoplayer-loader.tooltip":"Nilo-load ang video ...","ba-videoplayer-controlbar.change-resolution":"Baguhin ang resolution","ba-videoplayer-controlbar.video-progress":"pag-usad Video","ba-videoplayer-controlbar.rerecord-video":"Gawing muli ang video?","ba-videoplayer-controlbar.submit-video":"Kumpirmahin ang video","ba-videoplayer-controlbar.play-video":"I-Play ang video","ba-videoplayer-controlbar.pause-video":"I-pause ang video","ba-videoplayer-controlbar.elapsed-time":"Elasped oras","ba-videoplayer-controlbar.total-time":"Kabuuang haba ng video","ba-videoplayer-controlbar.fullscreen-video":"Ipasok fullscreen","ba-videoplayer-controlbar.volume-button":"Itakda ang lakas ng tunog","ba-videoplayer-controlbar.volume-mute":"I-mute ang tunog","ba-videoplayer-controlbar.volume-unmute":"I-unmute ang tunog","ba-videoplayer.video-error":"May naganap na error. Mangyaring subukan muli sa ibang pagkakataon. I-click upang subukang muli.","ba-videorecorder-chooser.record-video":"Kumuha ng video","ba-videorecorder-chooser.upload-video":"Mag-upload ng Video","ba-videorecorder-controlbar.settings":"Mga Setting","ba-videorecorder-controlbar.camerahealthy":"Pag-iilaw ay mabuti","ba-videorecorder-controlbar.cameraunhealthy":"Pag-iilaw ay hindi optimal","ba-videorecorder-controlbar.microphonehealthy":"Sound ay mabuti","ba-videorecorder-controlbar.microphoneunhealthy":"Hindi kunin ang anumang tunog","ba-videorecorder-controlbar.record":"Rekord","ba-videorecorder-controlbar.record-tooltip":"Mag-click dito upang i-record.","ba-videorecorder-controlbar.rerecord":"I-redo","ba-videorecorder-controlbar.rerecord-tooltip":"Mag-click dito upang gawing muli.","ba-videorecorder-controlbar.upload-covershot":"Upload","ba-videorecorder-controlbar.upload-covershot-tooltip":"Mag-click dito upang mag-upload ng mga pasadyang pabalat shot","ba-videorecorder-controlbar.stop":"Itigil","ba-videorecorder-controlbar.stop-tooltip":"Mag-click dito upang itigil.","ba-videorecorder-controlbar.skip":"Laktawan","ba-videorecorder-controlbar.skip-tooltip":"Mag-click dito upang laktawan.","ba-videorecorder.recorder-error":"May naganap na error. Mangyaring subukan muli sa ibang pagkakataon. I-click upang subukang muli.","ba-videorecorder.attach-error":"Hindi namin mai-access ang interface ng camera. Depende sa device at browser, maaaring kailangan mong i-install ng Flash o ma-access ang pahina sa pamamagitan ng SSL.","ba-videorecorder.access-forbidden":"Access sa camera ay ipinagbabawal. I-click upang subukang muli.","ba-videorecorder.pick-covershot":"Pumili ng isang covershot.","ba-videorecorder.uploading":"Pag-upload","ba-videorecorder.uploading-failed":"Ina-upload ang mali - i-click dito upang subukang muli.","ba-videorecorder.verifying":"Bine-verify","ba-videorecorder.verifying-failed":"Ang pag-verify nabigo - i-click dito upang subukang muli.","ba-videorecorder.rerecord-confirm":"Nais mo ba talagang nais na gawing muli ang iyong video?","ba-videorecorder.video_file_too_large":"Ang iyong video file ay masyadong malaki (%s) - i-click dito upang subukang muli gamit ang mas maliit na file na video.","ba-videorecorder.unsupported_video_type":"Mangyaring i-upload: %s - i-click dito upang subukang muli.","ba-videoplayer-controlbar.exit-fullscreen-video":"Lumabas sa fullscreen","ba-videoplayer-share.share":"Ibahagi ang video","ba-videorecorder-chooser.record-screen":"Mag-record ng Screen","ba-videoplayer-controlbar.pause-video-disabled":"I-pause ang hindi suportado","ba-videorecorder-chooser.record-audio":"Mag-record Audio","ba-videorecorder-controlbar.stop-available-after":"Ang minimum na oras ng pag-record ay %d segundo","ba-videorecorder-controlbar.cancel":"Kanselahin","ba-videorecorder-controlbar.cancel-tooltip":"Mag-click dito upang kanselahin.","ba-videorecorder.cancel-confirm":"Nais mo bang kanselahin ang iyong pag-upload ng video?","ba-videoplayer-adslot.elapsed-time":"Tiyak na oras","ba-videoplayer-adslot.volume-button":"Itakda ang lakas ng tunog","ba-videoplayer-adslot.volume-mute":"I-mute ang tunog","ba-videoplayer-adslot.volume-unmute":"I-unmute ang tunog","ba-videoplayer-adslot.ad-will-end-after":"Magwawakas ang ad matapos ang %s","ba-videoplayer-adslot.can-skip-after":"Laktawan pagkatapos %d","ba-videoplayer-adslot.skip-ad":"Laktawan ang ad","ba-videorecorder.software-required":"Mangyaring mag-click sa ibaba upang i-install / i-activate ang mga sumusunod na kinakailangan upang magpatuloy.","ba-videorecorder.software-waiting":"Naghihintay ng mga kinakailangan na mai-install / isinaaktibo. Maaaring kailanganin mong i-refresh ang pahina pagkatapos makumpleto.","ba-videoplayer-controlbar.close-tracks":"Isara CC","ba-videoplayer-controlbar.show-tracks":"Ipakita ang CC","ba-videoplayer-tracks.upload-text-tracks":"Mag-upload ng mga track text file","ba-videoplayer-tracks.select-text-track-language":"Wika ng Subtitle","ba-videoplayer-tracks.info-select-locale-first":"Unang piliin ang locale","ba-videoplayer-tracks.select-text-track-file":"I-click upang piliin ang file","ba-videoplayer-tracks.back":"bumalik","ba-videorecorder.framerate-warning":"Napakababa ang rate ng video frame. Inirerekumenda namin ang pagsasara ng lahat ng iba pang mga programa at mga tab ng browser o upang gumamit ng mas mabilis na computer.","ba-videorecorder.upload-error-duration":"Ang haba ng na-upload na video ay hindi nakakatugon sa mga kinakailangan - mag-click dito upang subukang muli.","ba-videorecorder.resolution-constraint-error":"Ang file na napili mo ay hindi tumutugma sa kinakailangang resolution - mag-click dito upang subukang muli.","ba-videorecorder.orientation-portrait-required":"Mangyaring i-rotate ang iyong aparato upang i-record sa portrait mode.","ba-videorecorder.orientation-landscape-required":"Mangyaring i-rotate ang iyong device upang i-record sa landscape mode.","ba-imageviewer-controlbar.rerecord-image":"I-redo?","ba-imageviewer-controlbar.submit-image":"Kumpirmahin","ba-imageviewer-controlbar.fullscreen-image":"Ipasok ang fullscreen","ba-imageviewer-controlbar.exit-fullscreen-image":"Lumabas sa fullscreen","ba-imageviewer.image-error":"May naganap na error. Mangyaring subukan muli sa ibang pagkakataon. I-click upang muling subukan.","ba-imagecapture-chooser.image-capture":"Makunan ang Imahe","ba-imagecapture-chooser.upload-image":"Mag-upload ng Larawan","ba-imagecapture-controlbar.settings":"Mga Setting","ba-imagecapture-controlbar.camerahealthy":"Ang pag-iilaw ay mabuti","ba-imagecapture-controlbar.cameraunhealthy":"Ang pag-iilaw ay hindi sulit","ba-imagecapture-controlbar.record":"Kumuha","ba-imagecapture-controlbar.record-tooltip":"Mag-click dito upang makuha.","ba-imagecapture-controlbar.rerecord":"I-redo","ba-imagecapture-controlbar.rerecord-tooltip":"Mag-click dito upang gawing muli.","ba-imagecapture-controlbar.cancel":"Kanselahin","ba-imagecapture-controlbar.cancel-tooltip":"Mag-click dito upang kanselahin.","ba-audioplayer-controlbar.audio-progress":"Isinasagawa","ba-audioplayer-controlbar.rerecord-audio":"I-redo?","ba-audioplayer-controlbar.submit-audio":"Kumpirmahin","ba-audioplayer-controlbar.play-audio":"Maglaro","ba-audioplayer-controlbar.pause-audio":"I-pause","ba-audioplayer-controlbar.pause-audio-disabled":"I-pause ang hindi suportado","ba-audioplayer-controlbar.elapsed-time":"Tiyak na oras","ba-audioplayer-controlbar.total-time":"Kabuuang haba ng","ba-audioplayer-controlbar.volume-button":"Itakda ang lakas ng tunog","ba-audioplayer-controlbar.volume-mute":"I-mute ang tunog","ba-audioplayer-controlbar.volume-unmute":"I-unmute ang tunog","ba-audioplayer-loader.tooltip":"Naglo-load ...","ba-audioplayer.audio-error":"May naganap na error. Mangyaring subukan muli sa ibang pagkakataon. I-click upang muling subukan.","ba-audiorecorder-chooser.record-audio":"Mag-record Audio","ba-audiorecorder-chooser.upload-audio":"Mag-upload ng Audio","ba-audiorecorder-controlbar.settings":"Mga Setting","ba-audiorecorder-controlbar.microphonehealthy":"Ang tunog ay mabuti","ba-audiorecorder-controlbar.microphoneunhealthy":"Hindi makukuha ang anumang tunog","ba-audiorecorder-controlbar.record":"Mag-record","ba-audiorecorder-controlbar.record-tooltip":"Mag-click dito upang mag-record.","ba-audiorecorder-controlbar.rerecord":"I-redo","ba-audiorecorder-controlbar.rerecord-tooltip":"Mag-click dito upang gawing muli.","ba-audiorecorder-controlbar.stop":"Itigil","ba-audiorecorder-controlbar.stop-tooltip":"Mag-click dito upang huminto.","ba-audiorecorder-controlbar.stop-available-after":"Ang minimum na oras ng pag-record ay %d segundo","ba-audiorecorder-controlbar.cancel":"Kanselahin","ba-audiorecorder-controlbar.cancel-tooltip":"Mag-click dito upang kanselahin."},"language:tr":{"ba-videoplayer-playbutton.tooltip":"video oynatmak i&#xE7;in t&#x131;klay&#x131;n&#x131;z.","ba-videoplayer-playbutton.rerecord":"yeniden yapmak","ba-videoplayer-playbutton.submit-video":"videoyu onayla","ba-videoplayer-loader.tooltip":"Video y&#xFC;kleniyor ...","ba-videoplayer-controlbar.change-resolution":"De&#x11F;i&#x15F;im &#xE7;&#xF6;z&#xFC;n&#xFC;rl&#xFC;&#x11F;&#xFC;","ba-videoplayer-controlbar.video-progress":"Video ilerleme","ba-videoplayer-controlbar.rerecord-video":"Videoyu Redo?","ba-videoplayer-controlbar.submit-video":"videoyu onayla","ba-videoplayer-controlbar.play-video":"Video oynatmak","ba-videoplayer-controlbar.pause-video":"Pause Video","ba-videoplayer-controlbar.elapsed-time":"Ge&#xE7;en s&#xFC;re","ba-videoplayer-controlbar.total-time":"videonun toplam uzunlu&#x11F;u","ba-videoplayer-controlbar.fullscreen-video":"Tam ekran yap","ba-videoplayer-controlbar.volume-button":"Set hacmi","ba-videoplayer-controlbar.volume-mute":"sesi","ba-videoplayer-controlbar.volume-unmute":"sesi a&#xE7;","ba-videoplayer.video-error":"Bir hata, l&#xFC;tfen tekrar deneyiniz olu&#x15F;tu. Tekrar denemek i&#xE7;in t&#x131;klay&#x131;n.","ba-videorecorder-chooser.record-video":"Ki&#x15F;isel Video kay&#x131;t","ba-videorecorder-chooser.upload-video":"video","ba-videorecorder-controlbar.settings":"Ayarlar","ba-videorecorder-controlbar.camerahealthy":"Ayd&#x131;nlatma iyidir","ba-videorecorder-controlbar.cameraunhealthy":"Ayd&#x131;nlatma optimum de&#x11F;il","ba-videorecorder-controlbar.microphonehealthy":"Ses iyidir","ba-videorecorder-controlbar.microphoneunhealthy":"herhangi bir ses pick up olamaz","ba-videorecorder-controlbar.record":"Kay&#x131;t","ba-videorecorder-controlbar.record-tooltip":"kaydetmek i&#xE7;in buraya t&#x131;klay&#x131;n.","ba-videorecorder-controlbar.rerecord":"yeniden yapmak","ba-videorecorder-controlbar.rerecord-tooltip":"yinelemek i&#xE7;in buraya t&#x131;klay&#x131;n.","ba-videorecorder-controlbar.upload-covershot":"y&#xFC;kleme","ba-videorecorder-controlbar.upload-covershot-tooltip":"&#xF6;zel kapak &#xE7;ekimi y&#xFC;klemek i&#xE7;in buraya t&#x131;klay&#x131;n","ba-videorecorder-controlbar.stop":"Dur","ba-videorecorder-controlbar.stop-tooltip":"durdurmak i&#xE7;in buray&#x131; t&#x131;klay&#x131;n.","ba-videorecorder-controlbar.skip":"atlamak","ba-videorecorder-controlbar.skip-tooltip":"atlamak i&#xE7;in buraya t&#x131;klay&#x131;n.","ba-videorecorder.recorder-error":"Bir hata, l&#xFC;tfen tekrar deneyiniz olu&#x15F;tu. Tekrar denemek i&#xE7;in t&#x131;klay&#x131;n.","ba-videorecorder.attach-error":"Biz kamera aray&#xFC;z&#xFC; eri&#x15F;emedi. cihaz ve taray&#x131;c&#x131;ya ba&#x11F;l&#x131; olarak, Flash y&#xFC;klemek veya SSL ile sayfaya eri&#x15F;mek i&#xE7;in gerekebilir.","ba-videorecorder.access-forbidden":"Kameraya eri&#x15F;im yasakland&#x131;. Tekrar denemek i&#xE7;in t&#x131;klay&#x131;n.","ba-videorecorder.pick-covershot":"Bir covershot se&#xE7;in.","ba-videorecorder.uploading":"Y&#xFC;kleme","ba-videorecorder.uploading-failed":"Y&#xFC;kleme ba&#x15F;ar&#x131;s&#x131;z - yeniden denemek i&#xE7;in buray&#x131; t&#x131;klay&#x131;n.","ba-videorecorder.verifying":"Do&#x11F;rulama","ba-videorecorder.verifying-failed":"Ba&#x15F;ar&#x131;s&#x131;z kullan&#x131;ld&#x131;&#x11F;&#x131;n&#x131; do&#x11F;rulamak - yeniden denemek i&#xE7;in buray&#x131; t&#x131;klay&#x131;n.","ba-videorecorder.rerecord-confirm":"E&#x11F;er ger&#xE7;ekten video yinelemek istiyor musunuz?","ba-videorecorder.video_file_too_large":"Videonuz dosyas&#x131; &#xE7;ok b&#xFC;y&#xFC;k (%s) - k&#xFC;&#xE7;&#xFC;k bir video dosyas&#x131; ile tekrar denemek i&#xE7;in buray&#x131; t&#x131;klay&#x131;n.","ba-videorecorder.unsupported_video_type":"y&#xFC;kleyin: %s - yeniden denemek i&#xE7;in buray&#x131; t&#x131;klay&#x131;n.","ba-videoplayer-controlbar.exit-fullscreen-video":"Tam ekrandan &#xE7;&#x131;k","ba-videoplayer-share.share":"Video payla&#x15F;","ba-videorecorder-chooser.record-screen":"Kay&#x131;t Ekran&#x131;","ba-videoplayer-controlbar.pause-video-disabled":"Duraklat desteklenmiyor","ba-videorecorder-chooser.record-audio":"Ses kayd&#x131;","ba-videorecorder-controlbar.stop-available-after":"Minimum kay&#x131;t s&#xFC;resi %d saniye","ba-videorecorder-controlbar.cancel":"&#x130;ptal etmek","ba-videorecorder-controlbar.cancel-tooltip":"&#x130;ptal etmek i&#xE7;in buraya t&#x131;klay&#x131;n.","ba-videorecorder.cancel-confirm":"Video y&#xFC;klemenizi ger&#xE7;ekten iptal etmek istiyor musunuz?","ba-videoplayer-adslot.elapsed-time":"Kazan&#x131;lan zaman","ba-videoplayer-adslot.volume-button":"Sesi ayarla","ba-videoplayer-adslot.volume-mute":"Sesi kapat","ba-videoplayer-adslot.volume-unmute":"Sesi a&#xE7;ma","ba-videoplayer-adslot.ad-will-end-after":"Reklam, %s sonra sona erecek","ba-videoplayer-adslot.can-skip-after":" %D sonra atla","ba-videoplayer-adslot.skip-ad":"Reklam&#x131; ge&#xE7;","ba-videorecorder.software-required":"Devam etmek i&#xE7;in a&#x15F;a&#x11F;&#x131;daki gereksinimleri y&#xFC;klemek / etkinle&#x15F;tirmek i&#xE7;in l&#xFC;tfen a&#x15F;a&#x11F;&#x131;ya t&#x131;klay&#x131;n.","ba-videorecorder.software-waiting":"Gereksinimlerin kurulmas&#x131; / etkinle&#x15F;tirilmesi i&#xE7;in bekleniyor. Tamamland&#x131;ktan sonra sayfay&#x131; yenilemeniz gerekebilir.","ba-videoplayer-controlbar.close-tracks":"CC&#x27;yi kapat","ba-videoplayer-controlbar.show-tracks":"CC g&#xF6;ster","ba-videoplayer-tracks.upload-text-tracks":"Par&#xE7;a metni dosyalar&#x131;n&#x131; y&#xFC;kle","ba-videoplayer-tracks.select-text-track-language":"Altyaz&#x131; Dili","ba-videoplayer-tracks.info-select-locale-first":"&#x130;lk yerel se&#xE7;","ba-videoplayer-tracks.select-text-track-file":"Dosya se&#xE7;mek i&#xE7;in t&#x131;klay&#x131;n","ba-videoplayer-tracks.back":"geri","ba-videorecorder.framerate-warning":"Video kare h&#x131;z&#x131; &#xE7;ok d&#xFC;&#x15F;&#xFC;k. Di&#x11F;er t&#xFC;m programlar&#x131; ve taray&#x131;c&#x131; sekmelerini kapatman&#x131;z&#x131; veya daha h&#x131;zl&#x131; bir bilgisayar kullanman&#x131;z&#x131; &#xF6;neririz.","ba-videorecorder.upload-error-duration":"Y&#xFC;klenen videonun uzunlu&#x11F;u gereksinimleri kar&#x15F;&#x131;lam&#x131;yor. Yeniden denemek i&#xE7;in buray&#x131; t&#x131;klay&#x131;n.","ba-videorecorder.resolution-constraint-error":"Se&#xE7;ti&#x11F;iniz dosya gerekli &#xE7;&#xF6;z&#xFC;n&#xFC;rl&#xFC;kle e&#x15F;le&#x15F;miyor. Yeniden denemek i&#xE7;in buray&#x131; t&#x131;klay&#x131;n.","ba-videorecorder.orientation-portrait-required":"L&#xFC;tfen portre modunda kay&#x131;t yapmak i&#xE7;in cihaz&#x131;n&#x131;z&#x131; d&#xF6;nd&#xFC;r&#xFC;n.","ba-videorecorder.orientation-landscape-required":"L&#xFC;tfen yatay modda kay&#x131;t yapmak i&#xE7;in cihaz&#x131;n&#x131;z&#x131; d&#xF6;nd&#xFC;r&#xFC;n.","ba-imageviewer-controlbar.rerecord-image":"Yeniden yap?","ba-imageviewer-controlbar.submit-image":"Onaylamak","ba-imageviewer-controlbar.fullscreen-image":"Tam ekran yap","ba-imageviewer-controlbar.exit-fullscreen-image":"Tam ekrandan &#xE7;&#x131;k","ba-imageviewer.image-error":"Bir hata olu&#x15F;tu, daha sonra tekrar deneyin. Yeniden denemek i&#xE7;in t&#x131;klay&#x131;n.","ba-imagecapture-chooser.image-capture":"G&#xF6;r&#xFC;nt&#xFC;y&#xFC; yakala","ba-imagecapture-chooser.upload-image":"Foto&#x11F;raf y&#xFC;kleniyor","ba-imagecapture-controlbar.settings":"Ayarlar","ba-imagecapture-controlbar.camerahealthy":"Ayd&#x131;nlatma iyidir","ba-imagecapture-controlbar.cameraunhealthy":"Ayd&#x131;nlatma optimal de&#x11F;il","ba-imagecapture-controlbar.record":"Ele ge&#xE7;irmek","ba-imagecapture-controlbar.record-tooltip":"Yakalamak i&#xE7;in buraya t&#x131;klay&#x131;n.","ba-imagecapture-controlbar.rerecord":"yeniden yapmak","ba-imagecapture-controlbar.rerecord-tooltip":"Yeniden yapmak i&#xE7;in buraya t&#x131;klay&#x131;n.","ba-imagecapture-controlbar.cancel":"&#x130;ptal etmek","ba-imagecapture-controlbar.cancel-tooltip":"&#x130;ptal etmek i&#xE7;in buraya t&#x131;klay&#x131;n.","ba-audioplayer-controlbar.audio-progress":"&#x130;lerleme","ba-audioplayer-controlbar.rerecord-audio":"Yeniden yap?","ba-audioplayer-controlbar.submit-audio":"Onaylamak","ba-audioplayer-controlbar.play-audio":"Oyun","ba-audioplayer-controlbar.pause-audio":"Duraklat","ba-audioplayer-controlbar.pause-audio-disabled":"Duraklat desteklenmiyor","ba-audioplayer-controlbar.elapsed-time":"Elasped zaman","ba-audioplayer-controlbar.total-time":"Toplam uzunlu&#x11F;u","ba-audioplayer-controlbar.volume-button":"Sesi ayarla","ba-audioplayer-controlbar.volume-mute":"Sesi kapat","ba-audioplayer-controlbar.volume-unmute":"Sesi a&#xE7; ses","ba-audioplayer-loader.tooltip":"Y&#xFC;kleniyor...","ba-audioplayer.audio-error":"Bir hata olu&#x15F;tu, daha sonra tekrar deneyin. Yeniden denemek i&#xE7;in t&#x131;klay&#x131;n.","ba-audiorecorder-chooser.record-audio":"Ses kayd&#x131;","ba-audiorecorder-chooser.upload-audio":"Ses y&#xFC;kle","ba-audiorecorder-controlbar.settings":"Ayarlar","ba-audiorecorder-controlbar.microphonehealthy":"Ses iyi","ba-audiorecorder-controlbar.microphoneunhealthy":"Ses al&#x131;nam&#x131;yor","ba-audiorecorder-controlbar.record":"Kay&#x131;t","ba-audiorecorder-controlbar.record-tooltip":"Kay&#x131;t i&#xE7;in buraya t&#x131;klay&#x131;n.","ba-audiorecorder-controlbar.rerecord":"yeniden yapmak","ba-audiorecorder-controlbar.rerecord-tooltip":"Yeniden yapmak i&#xE7;in buraya t&#x131;klay&#x131;n.","ba-audiorecorder-controlbar.stop":"durdurmak","ba-audiorecorder-controlbar.stop-tooltip":"Durdurmak i&#xE7;in buraya t&#x131;klay&#x131;n.","ba-audiorecorder-controlbar.stop-available-after":"Minimum kay&#x131;t s&#xFC;resi %d saniyedir","ba-audiorecorder-controlbar.cancel":"&#x130;ptal etmek","ba-audiorecorder-controlbar.cancel-tooltip":"&#x130;ptal etmek i&#xE7;in buraya t&#x131;klay&#x131;n."},"language:zh-cn":{"ba-videoplayer-playbutton.tooltip":"&#x70B9;&#x51FB;&#x64AD;&#x653E;","ba-videoplayer-playbutton.rerecord":"&#x91CD;&#x8BD5;","ba-videoplayer-playbutton.submit-video":"&#x786E;&#x5B9A;","ba-videoplayer-loader.tooltip":"&#x8BFB;&#x53D6;&#x4E2D;...","ba-videoplayer-controlbar.change-resolution":"&#x53D8;&#x66F4;&#x5206;&#x8FA8;&#x7387;","ba-videoplayer-controlbar.video-progress":"&#x8FDB;&#x5EA6;","ba-videoplayer-controlbar.rerecord-video":"&#x91CD;&#x8BD5;?","ba-videoplayer-controlbar.submit-video":"&#x786E;&#x8BA4;","ba-videoplayer-controlbar.play-video":"&#x64AD;&#x653E;","ba-videoplayer-controlbar.pause-video":"&#x6682;&#x505C;","ba-videoplayer-controlbar.elapsed-time":"&#x7ECF;&#x8FC7;&#x65F6;&#x95F4;","ba-videoplayer-controlbar.total-time":"&#x603B;&#x957F;&#x5EA6;","ba-videoplayer-controlbar.fullscreen-video":"&#x8FDB;&#x5165;&#x5168;&#x5C4F;","ba-videoplayer-controlbar.volume-button":"&#x8C03;&#x6574;&#x97F3;&#x91CF;","ba-videoplayer-controlbar.volume-mute":"&#x9759;&#x97F3;","ba-videoplayer-controlbar.volume-unmute":"&#x89E3;&#x9664;&#x9759;&#x97F3;","ba-videoplayer.video-error":"&#x9519;&#x8BEF;&#x53D1;&#x751F;&#xFF0C;&#x8BF7;&#x7A0D;&#x540E;&#x518D;&#x8BD5;(&#x70B9;&#x6211;)","ba-videorecorder-chooser.record-video":"&#x5F55;&#x5236;&#x5F71;&#x7247;","ba-videorecorder-chooser.upload-video":"&#x4E0A;&#x4F20;&#x5F71;&#x7247;","ba-videorecorder-controlbar.settings":"&#x8BBE;&#x7F6E;","ba-videorecorder-controlbar.camerahealthy":"&#x5149;&#x7EBF;&#x826F;&#x597D;","ba-videorecorder-controlbar.cameraunhealthy":"&#x5149;&#x6E90;&#x4E0D;&#x4F73;","ba-videorecorder-controlbar.microphonehealthy":"&#x6536;&#x97F3;&#x826F;&#x597D;","ba-videorecorder-controlbar.microphoneunhealthy":"&#x6536;&#x97F3;&#x4E0D;&#x826F;","ba-videorecorder-controlbar.record":"&#x5F55;&#x5F71;","ba-videorecorder-controlbar.record-tooltip":"&#x70B9;&#x6211;&#x5F55;&#x5F71;","ba-videorecorder-controlbar.rerecord":"&#x91CD;&#x8BD5;","ba-videorecorder-controlbar.rerecord-tooltip":"&#x70B9;&#x6211;&#x91CD;&#x8BD5;","ba-videorecorder-controlbar.upload-covershot":"&#x4E0A;&#x4F20;","ba-videorecorder-controlbar.upload-covershot-tooltip":"&#x70B9;&#x6211;&#x4E0A;&#x4F20;&#x81EA;&#x8BA2;&#x7684;&#x5C01;&#x9762;","ba-videorecorder-controlbar.stop":"&#x505C;&#x6B62;","ba-videorecorder-controlbar.stop-tooltip":"&#x70B9;&#x6211;&#x505C;&#x6B62;","ba-videorecorder-controlbar.skip":"&#x7565;&#x8FC7;","ba-videorecorder-controlbar.skip-tooltip":"&#x70B9;&#x6211;&#x7565;&#x8FC7;","ba-videorecorder.recorder-error":"&#x9519;&#x8BEF;&#x53D1;&#x751F;&#xFF0C;&#x8BF7;&#x7A0D;&#x540E;&#x518D;&#x8BD5;(&#x70B9;&#x6211;)","ba-videorecorder.attach-error":"&#x65E0;&#x6CD5;&#x5B58;&#x53D6;&#x6444;&#x50CF;&#x5934;&#xFF0C;&#x53EF;&#x80FD;&#x662F;&#x6D4F;&#x89C8;&#x5668;&#x6216;&#x662F;&#x8BBE;&#x5907;&#x7684;&#x9650;&#x5236;&#xFF0C;&#x8BF7;&#x5C1D;&#x8BD5;&#x5B89;&#x88C5; Flash &#x5916;&#x6302;&#x7A0B;&#x5E8F;&#x6216;&#x900F;&#x8FC7;&#x5B89;&#x5168;&#x8FDE;&#x7EBF;&#x6765;&#x4F7F;&#x7528;&#x3002;","ba-videorecorder.access-forbidden":"&#x65E0;&#x6CD5;&#x5B58;&#x53D6;&#x6444;&#x50CF;&#x5934;&#xFF0C;&#x8BF7;&#x70B9;&#x6211;&#x91CD;&#x8BD5;&#x3002;","ba-videorecorder.pick-covershot":"&#x8BF7;&#x6311;&#x9009;&#x4E00;&#x5F20;&#x5C01;&#x9762;","ba-videorecorder.uploading":"&#x4E0A;&#x4F20;&#x4E2D;","ba-videorecorder.uploading-failed":"&#x4E0A;&#x4F20;&#x5931;&#x8D25;&#xFF0C;&#x8BF7;&#x70B9;&#x6211;&#x91CD;&#x8BD5;","ba-videorecorder.verifying":"&#x9A8C;&#x8BC1;&#x4E2D;","ba-videorecorder.verifying-failed":"&#x9A8C;&#x8BC1;&#x5931;&#x8D25;&#xFF0C;&#x8BF7;&#x70B9;&#x6211;&#x91CD;&#x8BD5;","ba-videorecorder.rerecord-confirm":"&#x786E;&#x5B9A;&#x8981;&#x91CD;&#x65B0;&#x5F55;&#x5236;&#x60A8;&#x7684;&#x5F71;&#x7247;?","ba-videorecorder.video_file_too_large":"&#x60A8;&#x7684;&#x5F71;&#x7247;&#x8FC7;&#x5927; (%s) &#x8BF7;&#x70B9;&#x6211;&#x91CD;&#x65B0;&#x9009;&#x62E9;&#x5C0F;&#x4E00;&#x70B9;&#x5F71;&#x7247;&#x518D;&#x8BD5;&#x4E00;&#x6B21;&#x3002;","ba-videorecorder.unsupported_video_type":"&#x8BF7;&#x4F7F;&#x7528;&#x5F71;&#x7247;&#x683C;&#x5F0F;: %s - &#x70B9;&#x6211;&#x91CD;&#x8BD5;","ba-videoplayer-controlbar.exit-fullscreen-video":"&#x7ED3;&#x675F;&#x5168;&#x5C4F;&#x64AD;&#x653E;","ba-videoplayer-share.share":"&#x5206;&#x4EAB;","ba-videoplayer-controlbar.pause-video-disabled":"&#x65E0;&#x6CD5;&#x6682;&#x505C;","ba-videorecorder-chooser.record-audio":"&#x5F55;&#x97F3;","ba-videorecorder-chooser.record-screen":"&#x8BB0;&#x5F55;&#x5C4F;&#x5E55;","ba-videorecorder-controlbar.stop-available-after":"&#x6700;&#x77ED;&#x8BB0;&#x5F55;&#x65F6;&#x95F4;&#x662F;&#xFF05;d&#x79D2;","ba-videorecorder-controlbar.cancel":"&#x53D6;&#x6D88;","ba-videorecorder-controlbar.cancel-tooltip":"&#x70B9;&#x51FB;&#x8FD9;&#x91CC;&#x53D6;&#x6D88;&#x3002;","ba-videorecorder.cancel-confirm":"&#x4F60;&#x771F;&#x7684;&#x60F3;&#x53D6;&#x6D88;&#x4F60;&#x7684;&#x89C6;&#x9891;&#x4E0A;&#x4F20;&#xFF1F;","ba-videoplayer-adslot.elapsed-time":"&#x5443;&#x65F6;&#x95F4;","ba-videoplayer-adslot.volume-button":"&#x8BBE;&#x7F6E;&#x97F3;&#x91CF;","ba-videoplayer-adslot.volume-mute":"&#x9759;&#x97F3;","ba-videoplayer-adslot.volume-unmute":"&#x53D6;&#x6D88;&#x9759;&#x97F3;","ba-videoplayer-adslot.ad-will-end-after":"&#x5E7F;&#x544A;&#x5C06;&#x5728;&#xFF05;s&#x4E4B;&#x540E;&#x7ED3;&#x675F;","ba-videoplayer-adslot.can-skip-after":"&#x5728;&#xFF05;d&#x4E4B;&#x540E;&#x8DF3;&#x8FC7;","ba-videoplayer-adslot.skip-ad":"&#x8DF3;&#x8FC7;&#x5E7F;&#x544A;","ba-videorecorder.software-required":"&#x8BF7;&#x70B9;&#x51FB;&#x4E0B;&#x9762;&#x7684;&#x5B89;&#x88C5;/&#x6FC0;&#x6D3B;&#x4EE5;&#x4E0B;&#x8981;&#x6C42;&#x624D;&#x80FD;&#x7EE7;&#x7EED;&#x3002;","ba-videorecorder.software-waiting":"&#x7B49;&#x5F85;&#x8981;&#x6C42;&#x5B89;&#x88C5;/&#x6FC0;&#x6D3B;&#x3002;&#x5B8C;&#x6210;&#x540E;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x5237;&#x65B0;&#x9875;&#x9762;&#x3002;","ba-videoplayer-controlbar.close-tracks":"&#x5173;&#x95ED;CC","ba-videoplayer-controlbar.show-tracks":"&#x663E;&#x793A;CC","ba-videoplayer-tracks.upload-text-tracks":"&#x4E0A;&#x4F20;&#x66F2;&#x76EE;&#x6587;&#x672C;&#x6587;&#x4EF6;","ba-videoplayer-tracks.select-text-track-language":"&#x5B57;&#x5E55;&#x8BED;&#x8A00;","ba-videoplayer-tracks.info-select-locale-first":"&#x9996;&#x5148;&#x9009;&#x62E9;&#x533A;&#x57DF;&#x8BBE;&#x7F6E;","ba-videoplayer-tracks.select-text-track-file":"&#x5355;&#x51FB;&#x4EE5;&#x9009;&#x4E2D;&#x6587;&#x4EF6;","ba-videoplayer-tracks.back":"&#x80CC;&#x90E8;","ba-videorecorder.framerate-warning":"&#x89C6;&#x9891;&#x5E27;&#x7387;&#x975E;&#x5E38;&#x4F4E;&#x3002;&#x6211;&#x4EEC;&#x5EFA;&#x8BAE;&#x5173;&#x95ED;&#x6240;&#x6709;&#x5176;&#x4ED6;&#x7A0B;&#x5E8F;&#x548C;&#x6D4F;&#x89C8;&#x5668;&#x9009;&#x9879;&#x5361;&#x6216;&#x4F7F;&#x7528;&#x66F4;&#x5FEB;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x3002;","ba-videorecorder.upload-error-duration":"&#x4E0A;&#x4F20;&#x89C6;&#x9891;&#x7684;&#x957F;&#x5EA6;&#x4E0D;&#x7B26;&#x5408;&#x8981;&#x6C42; - &#x70B9;&#x51FB;&#x6B64;&#x5904;&#x91CD;&#x8BD5;&#x3002;","ba-videorecorder.resolution-constraint-error":"&#x60A8;&#x9009;&#x62E9;&#x7684;&#x6587;&#x4EF6;&#x4E0E;&#x6240;&#x9700;&#x7684;&#x5206;&#x8FA8;&#x7387;&#x4E0D;&#x5339;&#x914D; - &#x5355;&#x51FB;&#x6B64;&#x5904;&#x91CD;&#x8BD5;&#x3002;","ba-videorecorder.orientation-portrait-required":"&#x8BF7;&#x65CB;&#x8F6C;&#x8BBE;&#x5907;&#x4EE5;&#x7EB5;&#x5411;&#x6A21;&#x5F0F;&#x5F55;&#x5236;&#x3002;","ba-videorecorder.orientation-landscape-required":"&#x8BF7;&#x65CB;&#x8F6C;&#x8BBE;&#x5907;&#x4EE5;&#x6A2A;&#x5411;&#x6A21;&#x5F0F;&#x5F55;&#x5236;&#x3002;","ba-imageviewer-controlbar.rerecord-image":"&#x91CD;&#x505A;&#xFF1F;","ba-imageviewer-controlbar.submit-image":"&#x786E;&#x8BA4;","ba-imageviewer-controlbar.fullscreen-image":"&#x8F93;&#x5165;&#x5168;&#x5C4F;","ba-imageviewer-controlbar.exit-fullscreen-image":"&#x9000;&#x51FA;&#x5168;&#x5C4F;","ba-imageviewer.image-error":"&#x53D1;&#x751F;&#x4E86;&#x4E00;&#x4E2A;&#x9519;&#x8BEF;&#x3002;&#x8BF7;&#x7A0D;&#x540E;&#x91CD;&#x8BD5;&#x3002;&#x70B9;&#x51FB;&#x91CD;&#x8BD5;&#x3002;","ba-imagecapture-chooser.image-capture":"&#x6355;&#x83B7;&#x56FE;&#x50CF;","ba-imagecapture-chooser.upload-image":"&#x4E0A;&#x4F20;&#x56FE;&#x7247;","ba-imagecapture-controlbar.settings":"&#x8BBE;&#x7F6E;","ba-imagecapture-controlbar.camerahealthy":"&#x7167;&#x660E;&#x5F88;&#x597D;","ba-imagecapture-controlbar.cameraunhealthy":"&#x7167;&#x660E;&#x4E0D;&#x662F;&#x6700;&#x4F73;&#x7684;","ba-imagecapture-controlbar.record":"&#x6355;&#x83B7;","ba-imagecapture-controlbar.record-tooltip":"&#x70B9;&#x51FB;&#x6B64;&#x5904;&#x6355;&#x6349;&#x3002;","ba-imagecapture-controlbar.rerecord":"&#x91CD;&#x505A;","ba-imagecapture-controlbar.rerecord-tooltip":"&#x70B9;&#x51FB;&#x8FD9;&#x91CC;&#x91CD;&#x505A;&#x3002;","ba-imagecapture-controlbar.cancel":"&#x53D6;&#x6D88;","ba-imagecapture-controlbar.cancel-tooltip":"&#x70B9;&#x51FB;&#x8FD9;&#x91CC;&#x53D6;&#x6D88;&#x3002;","ba-audioplayer-controlbar.audio-progress":"&#x8FDB;&#x5C55;","ba-audioplayer-controlbar.rerecord-audio":"&#x91CD;&#x505A;&#xFF1F;","ba-audioplayer-controlbar.submit-audio":"&#x786E;&#x8BA4;","ba-audioplayer-controlbar.play-audio":"&#x73A9;","ba-audioplayer-controlbar.pause-audio":"&#x6682;&#x505C;","ba-audioplayer-controlbar.pause-audio-disabled":"&#x6682;&#x505C;&#x4E0D;&#x53D7;&#x652F;&#x6301;","ba-audioplayer-controlbar.elapsed-time":"&#x8282;&#x7701;&#x65F6;&#x95F4;","ba-audioplayer-controlbar.total-time":"&#x603B;&#x957F;&#x5EA6;","ba-audioplayer-controlbar.volume-button":"&#x8BBE;&#x5B9A;&#x97F3;&#x91CF;","ba-audioplayer-controlbar.volume-mute":"&#x9759;&#x97F3;","ba-audioplayer-controlbar.volume-unmute":"&#x53D6;&#x6D88;&#x9759;&#x97F3;","ba-audioplayer-loader.tooltip":"&#x8F7D;&#x5165;&#x4E2D;...","ba-audioplayer.audio-error":"&#x53D1;&#x751F;&#x4E86;&#x4E00;&#x4E2A;&#x9519;&#x8BEF;&#x3002;&#x8BF7;&#x7A0D;&#x540E;&#x91CD;&#x8BD5;&#x3002;&#x70B9;&#x51FB;&#x91CD;&#x8BD5;&#x3002;","ba-audiorecorder-chooser.record-audio":"&#x5F55;&#x5236;&#x97F3;&#x9891;","ba-audiorecorder-chooser.upload-audio":"&#x4E0A;&#x4F20;&#x97F3;&#x9891;","ba-audiorecorder-controlbar.settings":"&#x8BBE;&#x7F6E;","ba-audiorecorder-controlbar.microphonehealthy":"&#x58F0;&#x97F3;&#x5F88;&#x597D;","ba-audiorecorder-controlbar.microphoneunhealthy":"&#x65E0;&#x6CD5;&#x63A5;&#x542C;&#x4EFB;&#x4F55;&#x58F0;&#x97F3;","ba-audiorecorder-controlbar.record":"&#x8BB0;&#x5F55;","ba-audiorecorder-controlbar.record-tooltip":"&#x70B9;&#x51FB;&#x8FD9;&#x91CC;&#x8BB0;&#x5F55;&#x3002;","ba-audiorecorder-controlbar.rerecord":"&#x91CD;&#x505A;","ba-audiorecorder-controlbar.rerecord-tooltip":"&#x70B9;&#x51FB;&#x8FD9;&#x91CC;&#x91CD;&#x505A;&#x3002;","ba-audiorecorder-controlbar.stop":"&#x505C;&#x6B62;","ba-audiorecorder-controlbar.stop-tooltip":"&#x70B9;&#x51FB;&#x6B64;&#x5904;&#x505C;&#x6B62;&#x3002;","ba-audiorecorder-controlbar.stop-available-after":"&#x6700;&#x77ED;&#x5F55;&#x5236;&#x65F6;&#x95F4;&#x4E3A;&#xFF05;d&#x79D2;","ba-audiorecorder-controlbar.cancel":"&#x53D6;&#x6D88;","ba-audiorecorder-controlbar.cancel-tooltip":"&#x70B9;&#x51FB;&#x8FD9;&#x91CC;&#x53D6;&#x6D88;&#x3002;"},"language:zh-tw":{"ba-videoplayer-playbutton.tooltip":"&#x9EDE;&#x9078;&#x64AD;&#x653E;","ba-videoplayer-playbutton.rerecord":"&#x91CD;&#x8A66;","ba-videoplayer-playbutton.submit-video":"&#x78BA;&#x8A8D;","ba-videoplayer-loader.tooltip":"&#x8B80;&#x53D6;&#x4E2D;...","ba-videoplayer-controlbar.change-resolution":"&#x8B8A;&#x66F4;&#x89E3;&#x6790;&#x5EA6;","ba-videoplayer-controlbar.video-progress":"&#x9032;&#x5EA6;","ba-videoplayer-controlbar.rerecord-video":"&#x91CD;&#x8A66;?","ba-videoplayer-controlbar.submit-video":"&#x78BA;&#x8A8D;","ba-videoplayer-controlbar.play-video":"&#x64AD;&#x653E;","ba-videoplayer-controlbar.pause-video":"&#x66AB;&#x505C;","ba-videoplayer-controlbar.elapsed-time":"&#x7D93;&#x904E;&#x6642;&#x9593;","ba-videoplayer-controlbar.total-time":"&#x7E3D;&#x9577;&#x5EA6;","ba-videoplayer-controlbar.fullscreen-video":"&#x9032;&#x5165;&#x5168;&#x87A2;&#x5E55;","ba-videoplayer-controlbar.volume-button":"&#x8ABF;&#x6574;&#x97F3;&#x91CF;","ba-videoplayer-controlbar.volume-mute":"&#x975C;&#x97F3;","ba-videoplayer-controlbar.volume-unmute":"&#x89E3;&#x9664;&#x975C;&#x97F3;","ba-videoplayer.video-error":"&#x932F;&#x8AA4;&#x767C;&#x751F;&#xFF0C;&#x8ACB;&#x7A0D;&#x5F8C;&#x518D;&#x8A66;(&#x9EDE;&#x6211;)","ba-videorecorder-chooser.record-video":"&#x9304;&#x88FD;&#x5F71;&#x7247;","ba-videorecorder-chooser.upload-video":"&#x4E0A;&#x50B3;&#x5F71;&#x7247;","ba-videorecorder-controlbar.settings":"&#x8A2D;&#x5B9A;&#x503C;","ba-videorecorder-controlbar.camerahealthy":"&#x5149;&#x7DDA;&#x826F;&#x597D;","ba-videorecorder-controlbar.cameraunhealthy":"&#x5149;&#x6E90;&#x4E0D;&#x4F73;","ba-videorecorder-controlbar.microphonehealthy":"&#x6536;&#x97F3;&#x826F;&#x597D;","ba-videorecorder-controlbar.microphoneunhealthy":"&#x6536;&#x97F3;&#x4E0D;&#x826F;","ba-videorecorder-controlbar.record":"&#x9304;&#x5F71;","ba-videorecorder-controlbar.record-tooltip":"&#x9EDE;&#x6211;&#x9304;&#x5F71;","ba-videorecorder-controlbar.rerecord":"&#x91CD;&#x8A66;","ba-videorecorder-controlbar.rerecord-tooltip":"&#x9EDE;&#x6211;&#x91CD;&#x8A66;","ba-videorecorder-controlbar.upload-covershot":"&#x4E0A;&#x50B3;","ba-videorecorder-controlbar.upload-covershot-tooltip":"&#x9EDE;&#x6211;&#x4E0A;&#x50B3;&#x81EA;&#x8A02;&#x7684;&#x5C01;&#x9762;","ba-videorecorder-controlbar.stop":"&#x505C;&#x6B62;","ba-videorecorder-controlbar.stop-tooltip":"&#x9EDE;&#x6211;&#x505C;&#x6B62;","ba-videorecorder-controlbar.skip":"&#x7565;&#x904E;","ba-videorecorder-controlbar.skip-tooltip":"&#x9EDE;&#x6211;&#x7565;&#x904E;","ba-videorecorder.recorder-error":"&#x932F;&#x8AA4;&#x767C;&#x751F;&#xFF0C;&#x8ACB;&#x7A0D;&#x5F8C;&#x518D;&#x8A66;(&#x9EDE;&#x6211;)","ba-videorecorder.attach-error":"&#x7121;&#x6CD5;&#x5B58;&#x53D6;&#x651D;&#x5F71;&#x6A5F;&#xFF0C;&#x53EF;&#x80FD;&#x662F;&#x700F;&#x89BD;&#x5668;&#x6216;&#x662F;&#x88DD;&#x7F6E;&#x7684;&#x9650;&#x5236;&#xFF0C;&#x8ACB;&#x5617;&#x8A66;&#x5B89;&#x88DD; Flash &#x5916;&#x639B;&#x7A0B;&#x5F0F;&#x6216;&#x900F;&#x904E;&#x5B89;&#x5168;&#x9023;&#x7DDA;&#x4F86;&#x4F7F;&#x7528;&#x3002;","ba-videorecorder.access-forbidden":"&#x7121;&#x6CD5;&#x5B58;&#x53D6;&#x651D;&#x5F71;&#x6A5F;&#xFF0C;&#x8ACB;&#x9EDE;&#x6211;&#x91CD;&#x8A66;&#x3002;","ba-videorecorder.pick-covershot":"&#x8ACB;&#x6311;&#x9078;&#x4E00;&#x5F35;&#x5C01;&#x9762;","ba-videorecorder.uploading":"&#x4E0A;&#x50B3;&#x4E2D;","ba-videorecorder.uploading-failed":"&#x4E0A;&#x50B3;&#x5931;&#x6557;&#xFF0C;&#x8ACB;&#x9EDE;&#x6211;&#x91CD;&#x8A66;","ba-videorecorder.verifying":"&#x9A57;&#x8B49;&#x4E2D;","ba-videorecorder.verifying-failed":"&#x9A57;&#x8B49;&#x5931;&#x6557;&#xFF0C;&#x8ACB;&#x9EDE;&#x6211;&#x91CD;&#x8A66;","ba-videorecorder.rerecord-confirm":"&#x78BA;&#x5B9A;&#x8981;&#x91CD;&#x65B0;&#x9304;&#x88FD;&#x60A8;&#x7684;&#x5F71;&#x7247;?","ba-videorecorder.video_file_too_large":"&#x60A8;&#x7684;&#x5F71;&#x7247;&#x904E;&#x5927; (%s) &#x8ACB;&#x9EDE;&#x6211;&#x91CD;&#x65B0;&#x9078;&#x64C7;&#x5C0F;&#x4E00;&#x9EDE;&#x5F71;&#x7247;&#x518D;&#x8A66;&#x4E00;&#x6B21;&#x3002;","ba-videorecorder.unsupported_video_type":"&#x8ACB;&#x4F7F;&#x7528;&#x5F71;&#x7247;&#x683C;&#x5F0F;: %s - &#x9EDE;&#x6211;&#x91CD;&#x8A66;","ba-videoplayer-controlbar.exit-fullscreen-video":"&#x7D50;&#x675F;&#x5168;&#x87A2;&#x5E55;","ba-videoplayer-share.share":"&#x5206;&#x4EAB;","ba-videoplayer-controlbar.pause-video-disabled":"&#x7121;&#x6CD5;&#x66AB;&#x505C;","ba-videorecorder-chooser.record-audio":"&#x9304;&#x97F3;","ba-videorecorder-chooser.record-screen":"&#x8A18;&#x9304;&#x5C4F;&#x5E55;","ba-videorecorder-controlbar.stop-available-after":"&#x6700;&#x77ED;&#x8A18;&#x9304;&#x6642;&#x9593;&#x662F;&#xFF05;d&#x79D2;","ba-videorecorder-controlbar.cancel":"&#x53D6;&#x6D88;","ba-videorecorder-controlbar.cancel-tooltip":"&#x9EDE;&#x64CA;&#x9019;&#x88E1;&#x53D6;&#x6D88;&#x3002;","ba-videorecorder.cancel-confirm":"&#x4F60;&#x771F;&#x7684;&#x60F3;&#x53D6;&#x6D88;&#x4F60;&#x7684;&#x8996;&#x983B;&#x4E0A;&#x50B3;&#xFF1F;","ba-videoplayer-adslot.elapsed-time":"&#x5443;&#x6642;&#x9593;","ba-videoplayer-adslot.volume-button":"&#x8A2D;&#x7F6E;&#x97F3;&#x91CF;","ba-videoplayer-adslot.volume-mute":"&#x975C;&#x97F3;","ba-videoplayer-adslot.volume-unmute":"&#x53D6;&#x6D88;&#x975C;&#x97F3;","ba-videoplayer-adslot.ad-will-end-after":"&#x5EE3;&#x544A;&#x5C07;&#x5728;&#xFF05;s&#x4E4B;&#x5F8C;&#x7D50;&#x675F;","ba-videoplayer-adslot.can-skip-after":"&#x5728;&#xFF05;d&#x4E4B;&#x5F8C;&#x8DF3;&#x904E;","ba-videoplayer-adslot.skip-ad":"&#x8DF3;&#x904E;&#x5EE3;&#x544A;","ba-videorecorder.software-required":"&#x8ACB;&#x9EDE;&#x64CA;&#x4E0B;&#x9762;&#x7684;&#x5B89;&#x88DD;/&#x6FC0;&#x6D3B;&#x4EE5;&#x4E0B;&#x8981;&#x6C42;&#x624D;&#x80FD;&#x7E7C;&#x7E8C;&#x3002;","ba-videorecorder.software-waiting":"&#x7B49;&#x5F85;&#x8981;&#x6C42;&#x5B89;&#x88DD;/&#x6FC0;&#x6D3B;&#x3002;&#x5B8C;&#x6210;&#x5F8C;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x5237;&#x65B0;&#x9801;&#x9762;&#x3002;","ba-videoplayer-controlbar.close-tracks":"&#x95DC;&#x9589;CC","ba-videoplayer-controlbar.show-tracks":"&#x986F;&#x793A;CC","ba-videoplayer-tracks.upload-text-tracks":"&#x4E0A;&#x50B3;&#x66F2;&#x76EE;&#x6587;&#x672C;&#x6587;&#x4EF6;","ba-videoplayer-tracks.select-text-track-language":"&#x5B57;&#x5E55;&#x8A9E;&#x8A00;","ba-videoplayer-tracks.info-select-locale-first":"&#x9996;&#x5148;&#x9078;&#x64C7;&#x5340;&#x57DF;&#x8A2D;&#x7F6E;","ba-videoplayer-tracks.select-text-track-file":"&#x55AE;&#x64CA;&#x4EE5;&#x9078;&#x4E2D;&#x6587;&#x4EF6;","ba-videoplayer-tracks.back":"&#x80CC;&#x90E8;","ba-videorecorder.framerate-warning":"&#x8996;&#x983B;&#x5E40;&#x7387;&#x975E;&#x5E38;&#x4F4E;&#x3002;&#x6211;&#x5011;&#x5EFA;&#x8B70;&#x95DC;&#x9589;&#x6240;&#x6709;&#x5176;&#x4ED6;&#x7A0B;&#x5E8F;&#x548C;&#x700F;&#x89BD;&#x5668;&#x9078;&#x9805;&#x5361;&#x6216;&#x4F7F;&#x7528;&#x66F4;&#x5FEB;&#x7684;&#x8A08;&#x7B97;&#x6A5F;&#x3002;","ba-videorecorder.upload-error-duration":"&#x4E0A;&#x50B3;&#x8996;&#x983B;&#x7684;&#x9577;&#x5EA6;&#x4E0D;&#x7B26;&#x5408;&#x8981;&#x6C42; - &#x9EDE;&#x64CA;&#x6B64;&#x8655;&#x91CD;&#x8A66;&#x3002;","ba-videorecorder.resolution-constraint-error":"&#x60A8;&#x9078;&#x64C7;&#x7684;&#x6587;&#x4EF6;&#x8207;&#x6240;&#x9700;&#x7684;&#x5206;&#x8FA8;&#x7387;&#x4E0D;&#x5339;&#x914D; - &#x55AE;&#x64CA;&#x6B64;&#x8655;&#x91CD;&#x8A66;&#x3002;","ba-videorecorder.orientation-portrait-required":"&#x8ACB;&#x65CB;&#x8F49;&#x8A2D;&#x5099;&#x4EE5;&#x7E31;&#x5411;&#x6A21;&#x5F0F;&#x9304;&#x88FD;&#x3002;","ba-videorecorder.orientation-landscape-required":"&#x8ACB;&#x65CB;&#x8F49;&#x8A2D;&#x5099;&#x4EE5;&#x6A6B;&#x5411;&#x6A21;&#x5F0F;&#x9304;&#x88FD;&#x3002;","ba-imageviewer-controlbar.rerecord-image":"&#x91CD;&#x505A;&#xFF1F;","ba-imageviewer-controlbar.submit-image":"&#x78BA;&#x8A8D;","ba-imageviewer-controlbar.fullscreen-image":"&#x8F38;&#x5165;&#x5168;&#x5C4F;","ba-imageviewer-controlbar.exit-fullscreen-image":"&#x9000;&#x51FA;&#x5168;&#x5C4F;","ba-imageviewer.image-error":"&#x767C;&#x751F;&#x4E86;&#x4E00;&#x500B;&#x932F;&#x8AA4;&#x3002;&#x8ACB;&#x7A0D;&#x5F8C;&#x91CD;&#x8A66;&#x3002;&#x9EDE;&#x64CA;&#x91CD;&#x8A66;&#x3002;","ba-imagecapture-chooser.image-capture":"&#x6355;&#x7372;&#x5716;&#x50CF;","ba-imagecapture-chooser.upload-image":"&#x4E0A;&#x50B3;&#x5716;&#x7247;","ba-imagecapture-controlbar.settings":"&#x8A2D;&#x7F6E;","ba-imagecapture-controlbar.camerahealthy":"&#x7167;&#x660E;&#x5F88;&#x597D;","ba-imagecapture-controlbar.cameraunhealthy":"&#x7167;&#x660E;&#x4E0D;&#x662F;&#x6700;&#x4F73;&#x7684;","ba-imagecapture-controlbar.record":"&#x6355;&#x7372;","ba-imagecapture-controlbar.record-tooltip":"&#x9EDE;&#x64CA;&#x6B64;&#x8655;&#x6355;&#x6349;&#x3002;","ba-imagecapture-controlbar.rerecord":"&#x91CD;&#x505A;","ba-imagecapture-controlbar.rerecord-tooltip":"&#x9EDE;&#x64CA;&#x9019;&#x88E1;&#x91CD;&#x505A;&#x3002;","ba-imagecapture-controlbar.cancel":"&#x53D6;&#x6D88;","ba-imagecapture-controlbar.cancel-tooltip":"&#x9EDE;&#x64CA;&#x9019;&#x88E1;&#x53D6;&#x6D88;&#x3002;","ba-audioplayer-controlbar.audio-progress":"&#x9032;&#x5C55;","ba-audioplayer-controlbar.rerecord-audio":"&#x91CD;&#x505A;&#xFF1F;","ba-audioplayer-controlbar.submit-audio":"&#x78BA;&#x8A8D;","ba-audioplayer-controlbar.play-audio":"&#x73A9;","ba-audioplayer-controlbar.pause-audio":"&#x66AB;&#x505C;","ba-audioplayer-controlbar.pause-audio-disabled":"&#x66AB;&#x505C;&#x4E0D;&#x53D7;&#x652F;&#x6301;","ba-audioplayer-controlbar.elapsed-time":"&#x7BC0;&#x7701;&#x6642;&#x9593;","ba-audioplayer-controlbar.total-time":"&#x7E3D;&#x9577;&#x5EA6;","ba-audioplayer-controlbar.volume-button":"&#x8A2D;&#x5B9A;&#x97F3;&#x91CF;","ba-audioplayer-controlbar.volume-mute":"&#x975C;&#x97F3;","ba-audioplayer-controlbar.volume-unmute":"&#x53D6;&#x6D88;&#x975C;&#x97F3;","ba-audioplayer-loader.tooltip":"&#x8F09;&#x5165;&#x4E2D;...","ba-audioplayer.audio-error":"&#x767C;&#x751F;&#x4E86;&#x4E00;&#x500B;&#x932F;&#x8AA4;&#x3002;&#x8ACB;&#x7A0D;&#x5F8C;&#x91CD;&#x8A66;&#x3002;&#x9EDE;&#x64CA;&#x91CD;&#x8A66;&#x3002;","ba-audiorecorder-chooser.record-audio":"&#x9304;&#x88FD;&#x97F3;&#x983B;","ba-audiorecorder-chooser.upload-audio":"&#x4E0A;&#x50B3;&#x97F3;&#x983B;","ba-audiorecorder-controlbar.settings":"&#x8A2D;&#x7F6E;","ba-audiorecorder-controlbar.microphonehealthy":"&#x8072;&#x97F3;&#x5F88;&#x597D;","ba-audiorecorder-controlbar.microphoneunhealthy":"&#x7121;&#x6CD5;&#x63A5;&#x807D;&#x4EFB;&#x4F55;&#x8072;&#x97F3;","ba-audiorecorder-controlbar.record":"&#x8A18;&#x9304;","ba-audiorecorder-controlbar.record-tooltip":"&#x9EDE;&#x64CA;&#x9019;&#x88E1;&#x8A18;&#x9304;&#x3002;","ba-audiorecorder-controlbar.rerecord":"&#x91CD;&#x505A;","ba-audiorecorder-controlbar.rerecord-tooltip":"&#x9EDE;&#x64CA;&#x9019;&#x88E1;&#x91CD;&#x505A;&#x3002;","ba-audiorecorder-controlbar.stop":"&#x505C;&#x6B62;","ba-audiorecorder-controlbar.stop-tooltip":"&#x9EDE;&#x64CA;&#x6B64;&#x8655;&#x505C;&#x6B62;&#x3002;","ba-audiorecorder-controlbar.stop-available-after":"&#x6700;&#x77ED;&#x9304;&#x88FD;&#x6642;&#x9593;&#x70BA;&#xFF05;d&#x79D2;","ba-audiorecorder-controlbar.cancel":"&#x53D6;&#x6D88;","ba-audiorecorder-controlbar.cancel-tooltip":"&#x9EDE;&#x64CA;&#x9019;&#x88E1;&#x53D6;&#x6D88;&#x3002;"}};
    for (var language in languages)
        Assets.strings.register(languages[language], [language]);
    return {};
});

Scoped.define("module:Ads.AdSenseVideoAdProvider", [
        "module:Ads.AbstractVideoAdProvider",
        "module:Ads.AdSensePrerollAd"
    ],
    function(AbstractVideoAdProvider, AdSensePrerollAd, scoped) {
        return AbstractVideoAdProvider.extend({
            scoped: scoped
        }, {

            _newPrerollAd: function(options) {
                return new AdSensePrerollAd(this, options);
            }

        });
    });


Scoped.define("module:Ads.AdSensePrerollAd", [
    "module:Ads.AbstractPrerollAd"
], function(AbstractVideoPrerollAd, scoped) {
    return AbstractVideoPrerollAd.extend({
        scoped: scoped
    }, function(inherited) {
        return {

            constructor: function(provider, options) {
                inherited.constructor.call(this, provider, options);
                this._adDisplayContainer = new google.ima.AdDisplayContainer(this._options.adElement, this._options.videoElement);
                // Must be done as the result of a user action on mobile
                this._adDisplayContainer.initialize();
                //Re-use this AdsLoader instance for the entire lifecycle of your page.
                this._adsLoader = new google.ima.AdsLoader(this._adDisplayContainer);

                var self = this;
                this._adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, function() {
                    self._adError();
                }, false);
                this._adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, function() {
                    self._adLoaded.apply(self, arguments);
                }, false);

                this._adsRequest = new google.ima.AdsRequest();
                this._adsRequest.adTagUrl = this._provider.options().adTagUrl;
            },

            _executeAd: function(options) {
                // Specify the linear and nonlinear slot sizes. This helps the SDK to
                // select the correct creative if multiple are returned.
                this._adsRequest.linearAdSlotWidth = options.width;
                this._adsRequest.linearAdSlotHeight = options.height;
                // adsRequest.nonLinearAdSlotWidth = 640;
                // adsRequest.nonLinearAdSlotHeight = 150;

                this._adsLoader.requestAds(this._adsRequest);
            },

            _adError: function() {
                if (this._adsManager)
                    this._adsManager.destroy();
                this._adFinished();
            },

            _adLoaded: function(adsManagerLoadedEvent) {
                // Get the ads manager.
                this._adsManager = adsManagerLoadedEvent.getAdsManager(this._options.videoElement);
                // See API reference for contentPlayback

                try {
                    // Initialize the ads manager. Ad rules playlist will start at this time.
                    this._adsManager.init(this._adsRequest.linearAdSlotWidth, this._adsRequest.linearAdSlotHeight, google.ima.ViewMode.NORMAL);
                    // Call start to show ads. Single video and overlay ads will
                    // start at this time; this call will be ignored for ad rules, as ad rules
                    // ads start when the adsManager is initialized.
                    this._adsManager.start();
                } catch (adError) {
                    // An error may be thrown if there was a problem with the VAST response.
                }

                var self = this;
                // Add listeners to the required events.
                this._adsManager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, function() {
                    self._adError();
                }, false);

                //this._adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, function () {});
                this._adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED, function() {
                    self._adFinished();
                });

                //this._adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, function () {});
                this._adsManager.addEventListener(google.ima.AdEvent.Type.SKIPPED, function() {
                    self._adSkipped();
                });
            }

        };
    });
});
Scoped.define("module:Ads.AbstractVideoAdProvider", ["base:Class"], function(
    Class, scoped) {
    return Class.extend({
        scoped: scoped
    }, function(inherited) {
        return {

            constructor: function(options) {
                inherited.constructor.call(this);
                this._options = options;
            },

            options: function() {
                return this._options;
            },

            _newPrerollAd: function(options) {},

            newPrerollAd: function(options) {
                return this._newPrerollAd(options);
            },

            register: function(name) {
                this.cls.registry[name] = this;
            }

        };
    }, {

        registry: {}

    });
});


Scoped.define("module:Ads.AbstractPrerollAd", ["base:Class", "base:Events.EventsMixin"], function(Class, EventsMixin, scoped) {
    return Class.extend({
        scoped: scoped
    }, [EventsMixin, function(inherited) {
        return {

            constructor: function(provider, options) {
                inherited.constructor.call(this);
                this._provider = provider;
                this._options = options;
            },

            executeAd: function(options) {
                this._options.adElement.style.display = "";
                this._executeAd(options);
            },

            _adFinished: function() {
                this._options.adElement.style.display = "none";
                this.trigger("finished");
            },

            _adSkipped: function() {
                this._options.adElement.style.display = "none";
                this.trigger("adskipped");
            }

        };
    }]);
});
/**
 * This software may include modified and unmodified portions of:
 *
 * VAST Client
 *
 * Copyright (c) 2013 Olivier Poitrey <rs@dailymotion.com>
 *
 * Repository: https://github.com/dailymotion/vast-client-js
 *
 * MIT License: https://github.com/dailymotion/vast-client-js/blob/master/LICENSE
 *
 */

Scoped.define("module:Ads.VAST.Ad", ["base:Class", "base:Objs", "base:Events.EventsMixin"], function(Class, Objs, EventsMixin, scoped) {
    return Class.extend({
        scoped: scoped
    }, [EventsMixin, function(inherited) {
        return {
            constructor: function() {
                inherited.constructor.call(this);
                this.id = null;
                this.sequence = null;
                this.system = null;
                this.title = null;
                this.description = null;
                this.advertiser = null;
                this.pricing = null;
                this.survey = null;
                this.errorURLTemplates = [];
                this.impressionURLTemplates = [];
                this.creatives = [];
                this.extensions = [];

                this.trackingEvents = {};
                this.availableTrackingEvents = ['creativeView', 'start', 'firstQuartile', 'midpoint', 'thirdQuartile', 'complete', 'rewind', 'skip', 'closeLinear', 'close', 'mute', 'unmute', 'pause', 'resume', 'playerExpand', 'playerCollapse', 'acceptInvitationLinear', 'timeSpentViewing', 'otherAdInteraction', 'progress', 'acceptInvitation', 'adExpand', 'adCollapse', 'minimize', 'overlayViewDuration', 'fullscreen', 'exitFullscreen', 'clickthrough'];

                Objs.iter(this.availableTrackingEvents, function(_event) {
                    this.trackingEvents[_event] = null;
                }, this);

            }
        };
    }], {
        isNumeric: function(n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
        },

        trackAd: function(URLTemplates, variables) {
            var URL, URLs, i, j, len, results;
            URLs = this.resolveURLTemplates(URLTemplates, variables);
            results = [];
            for (j = 0, len = URLs.length; j < len; j++) {
                URL = URLs[j];
                if (typeof window !== "undefined" && window !== null) {
                    i = new Image();
                    results.push(i.src = URL);
                } else {

                }
            }
            return results;
        },

        resolveURLTemplates: function(URLTemplates, variables) {
            var URLTemplate, URLs, j, key, len, macro1, macro2, resolveURL, value;
            if (!variables) {
                variables = {};
            }
            URLs = [];
            if (variables.ASSETURI) {
                variables.ASSETURI = this.encodeURIComponentRFC3986(variables.ASSETURI);
            }
            if (variables.CONTENTPLAYHEAD) {
                variables.CONTENTPLAYHEAD = this.encodeURIComponentRFC3986(variables.CONTENTPLAYHEAD);
            }
            if ((variables.ERRORCODE) && !/^[0-9]{3}$/.test(variables.ERRORCODE)) {
                variables.ERRORCODE = 900;
            }
            variables.CACHEBUSTING = this.leftpad(Math.round(Math.random() * 1.0e+8).toString());
            variables.TIMESTAMP = this.encodeURIComponentRFC3986((new Date()).toISOString());
            variables.RANDOM = variables.random = variables.CACHEBUSTING;
            for (j = 0, len = URLTemplates.length; j < len; j++) {
                URLTemplate = URLTemplates[j];
                resolveURL = URLTemplate;
                if (!resolveURL) {
                    continue;
                }
                for (key in variables) {
                    value = variables[key];
                    macro1 = "[" + key + "]";
                    macro2 = "%%" + key + "%%";
                    resolveURL = resolveURL.replace(macro1, value);
                    resolveURL = resolveURL.replace(macro2, value);
                }
                URLs.push(resolveURL);
            }
            return URLs;
        },

        leftpad: function(str) {
            if (str.length < 8) {
                return ((function() {
                    var j, ref, results;
                    results = [];
                    for (j = 0, ref = 8 - str.length; 0 <= ref ? j < ref : j > ref; 0 <= ref ? j++ : j--) {
                        results.push('0');
                    }
                    return results;
                })()).join('') + str;
            } else {
                return str;
            }
        },

        encodeURIComponentRFC3986: function(str) {
            return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
                return '%' + c.charCodeAt(0).toString(16);
            });
        },

        storage: (function() {
            var data, isDisabled, storage, storageError;
            try {
                storage = typeof window !== "undefined" && window !== null ? window.localStorage || window.sessionStorage : null;
            } catch (error) {
                storageError = error;
                storage = null;
            }
            isDisabled = function(store) {
                var e, testValue;
                try {
                    testValue = '__VAST__';
                    store.setItem(testValue, testValue);
                    if (store.getItem(testValue) !== testValue) {
                        return true;
                    }
                } catch (error) {
                    e = error;
                    return true;
                }
                return false;
            };
            if ((storage === null) || isDisabled(storage)) {
                data = {};
                storage = {
                    length: 0,
                    getItem: function(key) {
                        return data[key];
                    },
                    setItem: function(key, value) {
                        data[key] = value;
                        this.length = Object.keys(data).length;
                    },
                    removeItem: function(key) {
                        delete data[key];
                        this.length = Object.keys(data).length;
                    },
                    clear: function() {
                        data = {};
                        this.length = 0;
                    }
                };
            }
            return storage;
        })()
    });
});
Scoped.define("module:Ads.VAST.Response", ["module:Ads.VAST.Ad"], function(VASTAd, scoped) {
    return VASTAd.extend({
        scoped: scoped
    }, function(inherited) {
        return {
            constructor: function() {
                this.ads = [];
                this.errorURLTemplates = [];
            }
        };
    });
});

Scoped.define("module:Ads.VAST.CompanionAd", ["module:Ads.VAST.Ad"], function(VASTAd, scoped) {
    return VASTAd.extend({
        scoped: scoped
    }, function(inherited) {
        return {
            constructor: function() {
                inherited.constructor.call(this);
                this.id = null;
                this.width = 0;
                this.height = 0;
                this.type = null;
                this.staticResource = null;
                this.htmlRecource = null;
                this.iframeResource = null;
                this.altText = null;
                this.companionClickThroughURLTemplate = null;
                this.companionClickTrackingURLTemplates = [];
            }
        };
    });
});

Scoped.define("module:Ads.VAST.Creative", ["module:Ads.VAST.Ad"], function(VASTAd, scoped) {
    return VASTAd.extend({
        scoped: scoped
    }, function(inherited) {
        return {
            constructor: function(creativeAttributes) {
                inherited.constructor.call(this);

                if (creativeAttributes === null) {
                    creativeAttributes = {};
                }

                this.id = creativeAttributes.id || null;
                this.adId = creativeAttributes.adId || null;
                this.sequence = creativeAttributes.sequence || null;
                this.apiFramework = creativeAttributes.apiFramework || null;

            }
        };
    });
});

Scoped.define("module:Ads.VAST.CreativeLinear", ["module:Ads.VAST.Ad"], function(VASTAd, scoped) {
    return VASTAd.extend({
        scoped: scoped
    }, function(inherited) {
        return {
            constructor: function() {
                inherited.constructor.call(this);
                this.type = "linear";
                this.duration = 0;
                this.skipDelay = null;
                this.mediaFiles = [];
                this.videoClickThroughURLTemplate = null;
                this.videoClickTrackingURLTemplates = [];
                this.videoCustomClickURLTemplates = [];
                this.adParameters = null;
                this.icons = [];
            }
        };
    });
});

Scoped.define("module:Ads.VAST.CreativeNonLinear", ["module:Ads.VAST.Ad"], function(VASTAd, scoped) {
    return VASTAd.extend({
        scoped: scoped
    }, function(inherited) {
        return {
            constructor: function() {
                inherited.constructor.call(this);
                this.type = "nonlinear";
                this.variations = [];

            }
        };
    });
});

Scoped.define("module:Ads.VAST.AdExtension", ["module:Ads.VAST.Ad"], function(VASTAd, scoped) {
    return VASTAd.extend({
        scoped: scoped
    }, function(inherited) {
        return {
            constructor: function() {
                inherited.constructor.call(this);
                this.attributes = {};
                this.children = [];
            }
        };
    });
});


Scoped.define("module:Ads.VAST.AdExtensionChild", ["module:Ads.VAST.Ad"], function(VASTAd, scoped) {
    return VASTAd.extend({
        scoped: scoped
    }, function(inherited) {
        return {
            constructor: function() {
                inherited.constructor.call(this);
                this.name = null;
                this.value = null;
                this.attributes = {};
            }
        };
    });
});


Scoped.define("module:Ads.VAST.Icon", ["module:Ads.VAST.Ad"], function(VASTAd, scoped) {
    return VASTAd.extend({
        scoped: scoped
    }, function(inherited) {
        return {
            constructor: function() {
                inherited.constructor.call(this);
                this.program = null;
                this.height = 0;
                this.width = 0;
                this.xPosition = 0;
                this.yPosition = 0;
                this.apiFramework = null;
                this.offset = null;
                this.duration = 0;
                this.type = null;
                this.staticResource = null;
                this.htmlResource = null;
                this.iframeResource = null;
                this.iconClickThroughURLTemplate = null;
                this.iconClickTrackingURLTemplates = [];
                this.iconViewTrackingURLTemplate = null;
            }
        };
    });
});

Scoped.define("module:Ads.VAST.MediaFile", ["module:Ads.VAST.Ad"], function(VASTAd, scoped) {
    return VASTAd.extend({
        scoped: scoped
    }, function(inherited) {
        return {
            constructor: function(inherited) {
                this.id = null;
                this.fileURL = null;
                this.deliveryType = "progressive";
                this.mimeType = null;
                this.codec = null;
                this.bitrate = 0;
                this.minBitrate = 0;
                this.maxBitrate = 0;
                this.width = 0;
                this.height = 0;
                this.apiFramework = null;
                this.scalable = null;
                this.maintainAspectRatio = null;
            }
        };
    });
});

Scoped.define("module:Ads.VAST.CreativeCompanion", ["module:Ads.VAST.Ad"], function(VASTAd, scoped) {
    return VASTAd.extend({
        scoped: scoped
    }, function(inherited) {
        return {
            constructor: function(inherited) {
                inherited.constructor.call(this);
                this.type = "companion";
                this.variations = [];

            }
        };
    });
});

Scoped.define("module:Ads.VAST.NonLinear", ["module:Ads.VAST.Ad"], function(VASTAd, scoped) {
    return VASTAd.extend({
        scoped: scoped
    }, function(inherited) {
        return {
            constructor: function() {
                inherited.constructor.call(this);
                this.id = null;
                this.width = 0;
                this.height = 0;
                this.expandedWidth = 0;
                this.expandedHeight = 0;
                this.scalable = true;
                this.maintainAspectRatio = true;
                this.minSuggestedDuration = 0;
                this.apiFramework = "static";
                this.type = null;
                this.staticResource = null;
                this.htmlResource = null;
                this.iframeResource = null;
                this.nonlinearClickThroughURLTemplate = null;
                this.nonlinearClickTrackingURLTemplates = [];
                this.adParameters = null;
            }
        };
    });
});
/**
 * This software may include modified and unmodified portions of:
 *
 * VAST Client
 *
 * Copyright (c) 2013 Olivier Poitrey <rs@dailymotion.com>
 *
 * Repository: https://github.com/dailymotion/vast-client-js
 *
 * MIT License: https://github.com/dailymotion/vast-client-js/blob/master/LICENSE
 *
 */

Scoped.define("module:Ads.VAST.Client", [
    "module:Ads.VAST.Ad", "module:Ads.VAST.Parser", "base:Objs"
], function(VASTAd, VASTParser, Objs, scoped) {
    return VASTAd.extend({
        scoped: scoped
    }, function(inherited) {
        return {
            constructor: function(parameters) {
                inherited.constructor.call(this);
                var defineProperty;
                this.cappingFreeLunch = 0;
                this.cappingMinimumTimeInterval = 60 * 1000; // don't allow ad request before 1 minute
                this.lastSuccessfullAd = +new Date();
                this.options = {
                    withCredentials: false,
                    timeout: 1000
                };

                defineProperty = Object.defineProperty;

                Objs.iter(['lastSuccessfullAd', 'totalCalls', 'totalCallsTimeout'], function(property) {
                    defineProperty(this, property, {
                        get: function() {
                            return VASTAd.storage.getItem(property);
                        },
                        set: function(value) {
                            return VASTAd.storage.setItem(property, value);
                        },
                        configurable: false,
                        enumerable: true
                    });
                }, this);

                if (this.lastSuccessfullAd === null)
                    this.lastSuccessfullAd = 0;

                if (this.totalCalls === null)
                    this.totalCalls = 0;

                if (this.totalCallsTimeout === null)
                    this.totalCallsTimeout = 0;

            },

            getAd: function(url, opts, cb) {
                var now, options, timeSinceLastCall;
                now = +new Date();

                if (!cb)
                    if (typeof opts === 'function')
                        cb = opts;
                options = {};

                options = Objs.extend(this.options, opts);

                var parser = new VASTParser();

                if (this.totalCallsTimeout < now) {
                    this.totalCalls = 1;
                    this.totalCallsTimeout = now + (60 * 60 * 1000);
                } else {
                    this.totalCalls++;
                }

                if (this.cappingFreeLunch >= this.totalCalls) {
                    cb(new Error("VAST call canceled - FreeLunch capping not reached yet " + this.totalCalls), null);
                    return;
                }

                timeSinceLastCall = now - this.lastSuccessfullAd;
                if (timeSinceLastCall < 0) {
                    this.lastSuccessfullAd = 0;
                } else if (now - this.lastSuccessfullAd < this.cappingMinimumTimeInterval) {
                    cb(new Error("VAST call cancelled - (" + this.cappingMinimumTimeInterval + ")ms minimum interval reached"), null);
                    return;
                }

                return parser.parse(url, options, (function(_this) {
                    return function(err, response) {
                        if (err)
                            cb(err, null);
                        else {
                            return cb(null, response);
                        }
                    };
                })(this));
            }
        };
    });
});
/**
 * This software may include modified and unmodified portions of:
 *
 * VAST Client
 *
 * Copyright (c) 2013 Olivier Poitrey <rs@dailymotion.com>
 *
 * Repository: https://github.com/dailymotion/vast-client-js
 *
 * MIT License: https://github.com/dailymotion/vast-client-js/blob/master/LICENSE
 *
 */

Scoped.define("module:Ads.VAST.Parser", [
        "module:Ads.VAST.Ad",
        "base:Ajax.Support",
        "module:Ads.VAST.Response",
        "module:Ads.VAST.CreativeLinear",
        "module:Ads.VAST.MediaFile",
        "module:Ads.VAST.CreativeCompanion",
        "module:Ads.VAST.CreativeNonLinear",
        "module:Ads.VAST.CompanionAd",
        "module:Ads.VAST.AdExtension",
        "module:Ads.VAST.AdExtensionChild",
        "module:Ads.VAST.NonLinear"
    ],
    function(VASTAd, AjaxSupport, VASTResponse, VASTCreativeLinear, VASTMediaFile, VASTCreativeCompanion, VASTCreativeNonLinear, VASTCompanionAd, VASTAdExtension, VASTAdExtensionChild, VASTNonLinear, scoped) {
        return VASTAd.extend({
            scoped: scoped
        }, function(inherited) {
            return {
                constructor: function() {
                    inherited.constructor.call(this);
                    this.URLTemplateFilters = [];
                },

                _indexOf: function(item) {
                    for (var i = 0, l = this.length; i < l; i++) {
                        if (i in this && this[i] === item) return i;
                    }
                    return -1;
                },

                addURLTemplateFilter: function(func) {
                    if (typeof func === 'function') {
                        URLTemplateFilters.push(func);
                    }
                },

                removeURLTemplateFilter: function() {
                    return URLTemplateFilters.pop();
                },

                countURLTemplateFilters: function() {
                    return URLTemplateFilters.length;
                },

                clearUrlTemplateFilters: function() {
                    URLTemplateFilters = [];
                    return URLTemplateFilters;
                },

                parse: function(url, options, cb) {
                    if (!cb) {
                        if (typeof options === 'function') {
                            cb = options;
                        }
                        options = {};
                    }
                    return this._parse(url, null, options, function(err, response) {
                        return cb(err, response);
                    });
                },

                track: function(templates, errorCode) {
                    return VASTAd.trackAd(templates, errorCode);
                },

                _parse: function(url, parentURLs, options, cb) {
                    var filter, i, len;

                    if (!cb) {
                        if (typeof options === 'function') {
                            cb = options;
                        }
                        options = {};
                    }

                    for (i = 0, len = this.URLTemplateFilters.length; i < len; i++) {
                        filter = URLTemplateFilters[i];
                        url = filter(url);
                    }

                    if (parentURLs === null) {
                        parentURLs = [];
                    }
                    parentURLs.push(url);

                    return AjaxSupport.execute({
                        uri: url,
                        contentType: "xml",
                        decodeType: "xml"
                    }).error(function(err) {
                        cb(err, null);
                    }).success(function(xml) {
                        return this.parseXmlDocument(url, parentURLs, options, xml, cb);
                    }, this);
                },

                __indexOf: [].indexOf || function(item) {
                    for (var i = 0, l = this.length; i < l; i++) {
                        if (i in this && this[i] === item) return i;
                    }
                    return -1;
                },

                parseXmlDocument: function(url, parentURLs, options, xml, cb) {
                    var ad, complete, i, j, len, len1, loopIndex, node, ref, ref1, response, _self;
                    _self = this;
                    response = new VASTResponse();
                    if (!(((xml !== null ? xml.documentElement : void 0) !== null) && xml.documentElement.nodeName === "VAST")) {
                        return cb(new Error('Invalid VAST XMLDocument'));
                    }

                    ref = xml.documentElement.childNodes;
                    for (i = 0, len = ref.length; i < len; i++) {
                        node = ref[i];
                        if (node.nodeName === 'Error') {
                            response.errorURLTemplates.push(this.parseNodeText(node));
                        }
                    }

                    ref1 = xml.documentElement.childNodes;
                    for (j = 0, len1 = ref1.length; j < len1; j++) {
                        node = ref1[j];
                        if (node.nodeName === 'Ad') {
                            ad = this.parseAdElement(node);
                            if (ad !== null) {
                                response.ads.push(ad);
                            } else {
                                this.track(response.errorURLTemplates, {
                                    ERRORCODE: 101,
                                    ERRORMESSAGE: 'VAST schema validation error.'
                                });
                            }
                        }
                    }

                    complete = function(error, errorAlreadyRaised) {
                        var k, len2, noCreatives, ref2;
                        if (error === null) {
                            error = null;
                        }
                        if (errorAlreadyRaised === null) {
                            errorAlreadyRaised = false;
                        }
                        if (!response) {
                            return;
                        }
                        noCreatives = true;
                        ref2 = response.ads;
                        for (k = 0, len2 = ref2.length; k < len2; k++) {
                            ad = ref2[k];
                            if (ad.nextWrapperURL) {
                                return;
                            }
                            if (ad.creatives.length > 0) {
                                noCreatives = false;
                            }
                        }
                        if (noCreatives) {
                            if (!errorAlreadyRaised) {
                                _self.track(response.errorURLTemplates, {
                                    ERRORCODE: 303,
                                    ERRORMESSAGE: 'No VAST response after one or more Wrappers (No creatives)'
                                });
                            }
                        }
                        if (response.ads.length === 0) {
                            response = null;
                        }
                        return cb(error, response);
                    };

                    loopIndex = response.ads.length;
                    while (loopIndex--) {
                        ad = response.ads[loopIndex];
                        if (!ad.nextWrapperURL) {
                            continue;
                        }
                        this._handleComplete.call(this, ad, url, response, parentURLs, options, complete);
                    }
                    return complete();
                },


                _handleComplete: function(ad, url, response, parentURLs, options, complete) {
                    var _ref2;
                    if (parentURLs.length > (options.wrapperLimit ? options.wrapperLimit : 9) || (_ref2 = ad.nextWrapperURL, this.__indexOf.call(parentURLs, _ref2) >= 0)) {
                        this.track(ad.errorURLTemplates, {
                            ERRORCODE: 302,
                            ERRORMESSAGE: 'Wrapper limit reached, as defined by the video player. Too many Wrapper responses have been received with no InLine response.'
                        });
                        response.ads.splice(response.ads.indexOf(ad), 1);
                        complete(new Error("Wrapper limit reached, as defined by the video player"));
                        return;
                    }

                    if (url) {
                        ad.nextWrapperURL = this.resolveVastAdTagURI(ad.nextWrapperURL, url);
                    }

                    return this._parse(ad.nextWrapperURL, parentURLs, options, function(err, wrappedResponse) {
                        var _errorAlreadyRaised, _index, _k, _len2, _ref3, _wrappedAd;
                        _errorAlreadyRaised = false;
                        if (err) {
                            this.track(ad.errorURLTemplates, {
                                ERRORCODE: 301,
                                ERRORMESSAGE: 'Timeout of VAST URI provided in Wrapper element, or of VAST URI provided in a subsequent Wrapper element. (URI was either unavailable or reached a timeout as defined by the video player.)'
                            });
                            response.ads.splice(response.ads.indexOf(ad), 1);
                            _errorAlreadyRaised = true;
                        } else if (!wrappedResponse) {
                            this.track(ad.errorURLTemplates, {
                                ERRORCODE: 303,
                                ERRORMESSAGE: 'No VAST response after one or more Wrappers'
                            });
                            response.ads.splice(response.ads.indexOf(ad), 1);
                            _errorAlreadyRaised = true;
                        } else {
                            response.errorURLTemplates = response.errorURLTemplates.concat(wrappedResponse.errorURLTemplates);
                            _index = response.ads.indexOf(ad);
                            response.ads.splice(_index, 1);
                            _ref3 = wrappedResponse.ads;
                            for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
                                _wrappedAd = _ref3[_k];
                                this.mergeWrapperAdData(_wrappedAd, ad);
                                response.ads.splice(++_index, 0, _wrappedAd);
                            }
                        }
                        delete ad.nextWrapperURL;
                        return complete(err, _errorAlreadyRaised);
                    });
                },

                resolveVastAdTagURI: function(vastAdTagUrl, originalUrl) {
                    var baseURL, protocol;
                    if (vastAdTagUrl.indexOf('//') === 0) {
                        protocol = location.protocol;
                        return "" + protocol + vastAdTagUrl;
                    }
                    if (vastAdTagUrl.indexOf('://') === -1) {
                        baseURL = originalUrl.slice(0, originalUrl.lastIndexOf('/'));
                        return baseURL + "/" + vastAdTagUrl;
                    }
                    return vastAdTagUrl;
                },

                mergeWrapperAdData: function(wrappedAd, ad) {
                    var base, creative, eventName, i, j, k, l, len, len1, len2, len3, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, results, urls;
                    wrappedAd.errorURLTemplates = ad.errorURLTemplates.concat(wrappedAd.errorURLTemplates);
                    wrappedAd.impressionURLTemplates = ad.impressionURLTemplates.concat(wrappedAd.impressionURLTemplates);
                    wrappedAd.extensions = ad.extensions.concat(wrappedAd.extensions);
                    ref = wrappedAd.creatives;
                    for (i = 0, len = ref.length; i < len; i++) {
                        creative = ref[i];
                        if (((ref1 = ad.trackingEvents) !== null ? ref1[creative.type] : void 0) !== null) {
                            ref2 = ad.trackingEvents[creative.type];
                            for (eventName in ref2) {
                                urls = ref2[eventName];
                                if (creative.trackingEvents[eventName]) {
                                    base[eventName] = creative.trackingEvents[eventName];
                                } else {
                                    base[eventName] = [];
                                }
                                creative.trackingEvents[eventName] = creative.trackingEvents[eventName].concat(urls);
                            }
                        }
                    }
                    if ((ref3 = ad.videoClickTrackingURLTemplates) !== null ? ref3.length : void 0) {
                        ref4 = wrappedAd.creatives;
                        for (j = 0, len1 = ref4.length; j < len1; j++) {
                            creative = ref4[j];
                            if (creative.type === 'linear') {
                                creative.videoClickTrackingURLTemplates = creative.videoClickTrackingURLTemplates.concat(ad.videoClickTrackingURLTemplates);
                            }
                        }
                    }
                    if ((ref5 = ad.videoCustomClickURLTemplates) ? ref5.length : void 0) {
                        ref6 = wrappedAd.creatives;
                        for (k = 0, len2 = ref6.length; k < len2; k++) {
                            creative = ref6[k];
                            if (creative.type === 'linear') {
                                creative.videoCustomClickURLTemplates = creative.videoCustomClickURLTemplates.concat(ad.videoCustomClickURLTemplates);
                            }
                        }
                    }
                    if (ad.videoClickThroughURLTemplate) {
                        ref7 = wrappedAd.creatives;
                        results = [];
                        for (l = 0, len3 = ref7.length; l < len3; l++) {
                            creative = ref7[l];
                            if (creative.type === 'linear' && (creative.videoClickThroughURLTemplate === null)) {
                                results.push(creative.videoClickThroughURLTemplate = ad.videoClickThroughURLTemplate);
                            } else {
                                results.push(void 0);
                            }
                        }
                        return results;
                    }
                },

                childByName: function(node, name) {
                    var child, i, len, ref;
                    ref = node.childNodes;
                    for (i = 0, len = ref.length; i < len; i++) {
                        child = ref[i];
                        if (child.nodeName === name) {
                            return child;
                        }
                    }
                },

                childsByName: function(node, name) {
                    var child, childs, i, len, ref;
                    childs = [];
                    ref = node.childNodes;
                    for (i = 0, len = ref.length; i < len; i++) {
                        child = ref[i];
                        if (child.nodeName === name) {
                            childs.push(child);
                        }
                    }
                    return childs;
                },

                parseAdElement: function(adElement) {
                    var adTypeElement, i, len, ref, ref1;
                    ref = adElement.childNodes;
                    for (i = 0, len = ref.length; i < len; i++) {
                        adTypeElement = ref[i];
                        if ((ref1 = adTypeElement.nodeName) !== "Wrapper" && ref1 !== "InLine") {
                            continue;
                        }
                        this.copyNodeAttribute("id", adElement, adTypeElement);
                        this.copyNodeAttribute("sequence", adElement, adTypeElement);
                        if (adTypeElement.nodeName === "Wrapper") {
                            return this.parseWrapperElement(adTypeElement);
                        } else if (adTypeElement.nodeName === "InLine") {
                            return this.parseInLineElement(adTypeElement);
                        }
                    }
                },

                parseWrapperElement: function(wrapperElement) {
                    var ad, base, base1, eventName, i, item, j, k, l, len, len1, len2, len3, name1, ref, ref1, ref2, ref3, ref4, url, urls, wrapperCreativeElement, wrapperURLElement;
                    ad = this.parseInLineElement(wrapperElement);
                    wrapperURLElement = this.childByName(wrapperElement, "VASTAdTagURI");
                    if (wrapperURLElement) {
                        ad.nextWrapperURL = this.parseNodeText(wrapperURLElement);
                    } else {
                        wrapperURLElement = this.childByName(wrapperElement, "VASTAdTagURL");
                        if (wrapperURLElement) {
                            ad.nextWrapperURL = this.parseNodeText(this.childByName(wrapperURLElement, "URL"));
                        }
                    }
                    ref = ad.creatives;
                    for (i = 0, len = ref.length; i < len; i++) {
                        wrapperCreativeElement = ref[i];
                        if ((ref1 = wrapperCreativeElement.type) === 'linear' || ref1 === 'nonlinear') {
                            if (wrapperCreativeElement.trackingEvents) {
                                ad.trackingEvents = ad.trackingEvents ? ad.trackingEvents : {};
                                name1 = wrapperCreativeElement.type;
                                base[name1] = ad.trackingEvents[name1] ? ad.trackingEvents[name1] : {};
                                ref2 = wrapperCreativeElement.trackingEvents;
                                for (eventName in ref2) {
                                    urls = ref2[eventName];
                                    if (urls !== null) {
                                        base1[eventName] = ad.trackingEvents[wrapperCreativeElement.type][eventName] ? ad.trackingEvents[wrapperCreativeElement.type][eventName] : [];
                                        for (j = 0, len1 = urls.length; j < len1; j++) {
                                            url = urls[j];
                                            ad.trackingEvents[wrapperCreativeElement.type][eventName].push(url);
                                        }
                                    }
                                }
                            }
                            if (wrapperCreativeElement.videoClickTrackingURLTemplates) {
                                ad.videoClickTrackingURLTemplates = ad.videoClickTrackingURLTemplates || [];
                                ref3 = wrapperCreativeElement.videoClickTrackingURLTemplates;
                                for (k = 0, len2 = ref3.length; k < len2; k++) {
                                    item = ref3[k];
                                    ad.videoClickTrackingURLTemplates.push(item);
                                }
                            }
                            if (wrapperCreativeElement.videoClickThroughURLTemplate) {
                                ad.videoClickThroughURLTemplate = wrapperCreativeElement.videoClickThroughURLTemplate;
                            }
                            if (wrapperCreativeElement.videoCustomClickURLTemplates) {
                                ad.videoCustomClickURLTemplates = ad.videoCustomClickURLTemplates || [];
                                ref4 = wrapperCreativeElement.videoCustomClickURLTemplates;
                                for (l = 0, len3 = ref4.length; l < len3; l++) {
                                    item = ref4[l];
                                    ad.videoCustomClickURLTemplates.push(item);
                                }
                            }
                        }
                    }
                    if (ad.nextWrapperURL) {
                        return ad;
                    }
                },

                parseInLineElement: function(inLineElement) {
                    var ad, creative, creativeAttributes, creativeElement, creativeTypeElement, i, j, k, len, len1, len2, node, ref, ref1, ref2;
                    ad = new VASTAd();
                    ad.id = inLineElement.getAttribute("id") || null;
                    ad.sequence = inLineElement.getAttribute("sequence") || null;
                    ref = inLineElement.childNodes;
                    for (i = 0, len = ref.length; i < len; i++) {
                        node = ref[i];
                        switch (node.nodeName) {
                            case "Error":
                                ad.errorURLTemplates.push(this.parseNodeText(node));
                                break;
                            case "Impression":
                                ad.impressionURLTemplates.push(this.parseNodeText(node));
                                break;
                            case "Creatives":
                                ref1 = this.childsByName(node, "Creative");
                                for (j = 0, len1 = ref1.length; j < len1; j++) {
                                    creativeElement = ref1[j];
                                    creativeAttributes = {
                                        id: creativeElement.getAttribute('id') || null,
                                        adId: this.parseCreativeAdIdAttribute(creativeElement),
                                        sequence: creativeElement.getAttribute('sequence') || null,
                                        apiFramework: creativeElement.getAttribute('apiFramework') || null
                                    };
                                    ref2 = creativeElement.childNodes;
                                    for (k = 0, len2 = ref2.length; k < len2; k++) {
                                        creativeTypeElement = ref2[k];
                                        switch (creativeTypeElement.nodeName) {
                                            case "Linear":
                                                creative = this.parseCreativeLinearElement(creativeTypeElement, creativeAttributes);
                                                if (creative) {
                                                    ad.creatives.push(creative);
                                                }
                                                break;
                                            case "NonLinearAds":
                                                creative = this.parseNonLinear(creativeTypeElement, creativeAttributes);
                                                if (creative) {
                                                    ad.creatives.push(creative);
                                                }
                                                break;
                                            case "CompanionAds":
                                                creative = this.parseCompanionAd(creativeTypeElement, creativeAttributes);
                                                if (creative) {
                                                    ad.creatives.push(creative);
                                                }
                                        }
                                    }
                                }
                                break;
                            case "Extensions":
                                this.parseExtension(ad.extensions, this.childsByName(node, "Extension"));
                                break;
                            case "AdSystem":
                                ad.system = {
                                    value: this.parseNodeText(node),
                                    version: node.getAttribute("version") || null
                                };
                                break;
                            case "AdTitle":
                                ad.title = this.parseNodeText(node);
                                break;
                            case "Description":
                                ad.description = this.parseNodeText(node);
                                break;
                            case "Advertiser":
                                ad.advertiser = this.parseNodeText(node);
                                break;
                            case "Pricing":
                                ad.pricing = {
                                    value: this.parseNodeText(node),
                                    model: node.getAttribute("model") || null,
                                    currency: node.getAttribute("currency") || null
                                };
                                break;
                            case "Survey":
                                ad.survey = this.parseNodeText(node);
                        }
                    }
                    return ad;
                },

                parseExtension: function(collection, extensions) {
                    var childNode, ext, extChild, extChildNodeAttr, extNode, extNodeAttr, i, j, k, l, len, len1, len2, len3, ref, ref1, ref2, results, txt;
                    results = [];
                    for (i = 0, len = extensions.length; i < len; i++) {
                        extNode = extensions[i];
                        ext = new VASTAdExtension();
                        if (extNode.attributes) {
                            ref = extNode.attributes;
                            for (j = 0, len1 = ref.length; j < len1; j++) {
                                extNodeAttr = ref[j];
                                ext.attributes[extNodeAttr.nodeName] = extNodeAttr.nodeValue;
                            }
                        }
                        ref1 = extNode.childNodes;
                        for (k = 0, len2 = ref1.length; k < len2; k++) {
                            childNode = ref1[k];
                            txt = this.parseNodeText(childNode);
                            if (childNode.nodeName !== '#comment' && txt !== '') {
                                extChild = new VASTAdExtensionChild();
                                extChild.name = childNode.nodeName;
                                extChild.value = txt;
                                if (childNode.attributes) {
                                    ref2 = childNode.attributes;
                                    for (l = 0, len3 = ref2.length; l < len3; l++) {
                                        extChildNodeAttr = ref2[l];
                                        extChild.attributes[extChildNodeAttr.nodeName] = extChildNodeAttr.nodeValue;
                                    }
                                }
                                ext.children.push(extChild);
                            }
                        }
                        results.push(collection.push(ext));
                    }
                    return results;
                },

                parseCreativeLinearElement: function(creativeElement, creativeAttributes) {
                    var adParamsElement, base, clickTrackingElement, creative, customClickElement, eventName, htmlElement, i, icon, iconClickTrackingElement, iconClicksElement, iconElement, iconsElement, iframeElement, j, k, l, len, len1, len10, len2, len3, len4, len5, len6, len7, len8, len9, m, maintainAspectRatio, mediaFile, mediaFileElement, mediaFilesElement, n, o, offset, p, percent, q, r, ref, ref1, ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, s, scalable, skipOffset, staticElement, trackingElement, trackingEventsElement, trackingURLTemplate, videoClicksElement;
                    creative = new VASTCreativeLinear(creativeAttributes);
                    creative.duration = this.parseDuration(this.parseNodeText(this.childByName(creativeElement, "Duration")));
                    if (creative.duration === -1 && creativeElement.parentNode.parentNode.parentNode.nodeName !== 'Wrapper') {
                        return null;
                    }
                    skipOffset = creativeElement.getAttribute("skipoffset");
                    if (skipOffset === null) {
                        creative.skipDelay = null;
                    } else if (skipOffset.charAt(skipOffset.length - 1) === "%") {
                        percent = parseInt(skipOffset, 10);
                        creative.skipDelay = creative.duration * (percent / 100);
                    } else {
                        creative.skipDelay = this.parseDuration(skipOffset);
                    }
                    videoClicksElement = this.childByName(creativeElement, "VideoClicks");
                    if (videoClicksElement) {
                        creative.videoClickThroughURLTemplate = this.parseNodeText(this.childByName(videoClicksElement, "ClickThrough"));
                        ref = this.childsByName(videoClicksElement, "ClickTracking");
                        for (i = 0, len = ref.length; i < len; i++) {
                            clickTrackingElement = ref[i];
                            creative.videoClickTrackingURLTemplates.push(this.parseNodeText(clickTrackingElement));
                        }
                        ref1 = this.childsByName(videoClicksElement, "CustomClick");
                        for (j = 0, len1 = ref1.length; j < len1; j++) {
                            customClickElement = ref1[j];
                            creative.videoCustomClickURLTemplates.push(this.parseNodeText(customClickElement));
                        }
                    }
                    adParamsElement = this.childByName(creativeElement, "AdParameters");
                    if (adParamsElement) {
                        creative.adParameters = this.parseNodeText(adParamsElement);
                    }
                    ref2 = this.childsByName(creativeElement, "TrackingEvents");
                    for (k = 0, len2 = ref2.length; k < len2; k++) {
                        trackingEventsElement = ref2[k];
                        ref3 = this.childsByName(trackingEventsElement, "Tracking");
                        for (l = 0, len3 = ref3.length; l < len3; l++) {
                            trackingElement = ref3[l];
                            eventName = trackingElement.getAttribute("event");
                            trackingURLTemplate = this.parseNodeText(trackingElement);
                            if (eventName && trackingURLTemplate) {
                                if (eventName === "progress") {
                                    offset = trackingElement.getAttribute("offset");
                                    if (!offset) {
                                        continue;
                                    }
                                    if (offset.charAt(offset.length - 1) === '%') {
                                        eventName = "progress-" + offset;
                                    } else {
                                        eventName = "progress-" + (Math.round(this.parseDuration(offset)));
                                    }
                                }
                                if ((base = creative.trackingEvents)[eventName] === null) {
                                    base[eventName] = [];
                                }

                                if (creative.trackingEvents[eventName]) {
                                    creative.trackingEvents[eventName].push(trackingURLTemplate);
                                }

                            }
                        }
                    }
                    ref4 = this.childsByName(creativeElement, "MediaFiles");
                    for (m = 0, len4 = ref4.length; m < len4; m++) {
                        mediaFilesElement = ref4[m];
                        ref5 = this.childsByName(mediaFilesElement, "MediaFile");
                        for (n = 0, len5 = ref5.length; n < len5; n++) {
                            mediaFileElement = ref5[n];
                            mediaFile = new VASTMediaFile();
                            mediaFile.id = mediaFileElement.getAttribute("id");
                            mediaFile.fileURL = this.parseNodeText(mediaFileElement);
                            mediaFile.deliveryType = mediaFileElement.getAttribute("delivery");
                            mediaFile.codec = mediaFileElement.getAttribute("codec");
                            mediaFile.mimeType = mediaFileElement.getAttribute("type");
                            mediaFile.apiFramework = mediaFileElement.getAttribute("apiFramework");
                            mediaFile.bitrate = parseInt(mediaFileElement.getAttribute("bitrate") || 0, 10);
                            mediaFile.minBitrate = parseInt(mediaFileElement.getAttribute("minBitrate") || 0, 10);
                            mediaFile.maxBitrate = parseInt(mediaFileElement.getAttribute("maxBitrate") || 0, 10);
                            mediaFile.width = parseInt(mediaFileElement.getAttribute("width") || 0, 10);
                            mediaFile.height = parseInt(mediaFileElement.getAttribute("height") || 0, 10);
                            scalable = mediaFileElement.getAttribute("scalable");
                            if (scalable && typeof scalable === "string") {
                                scalable = scalable.toLowerCase();
                                if (scalable === "true") {
                                    mediaFile.scalable = true;
                                } else if (scalable === "false") {
                                    mediaFile.scalable = false;
                                }
                            }
                            maintainAspectRatio = mediaFileElement.getAttribute("maintainAspectRatio");
                            if (maintainAspectRatio && typeof maintainAspectRatio === "string") {
                                maintainAspectRatio = maintainAspectRatio.toLowerCase();
                                if (maintainAspectRatio === "true") {
                                    mediaFile.maintainAspectRatio = true;
                                } else if (maintainAspectRatio === "false") {
                                    mediaFile.maintainAspectRatio = false;
                                }
                            }
                            creative.mediaFiles.push(mediaFile);
                        }
                    }
                    iconsElement = this.childByName(creativeElement, "Icons");
                    if (iconsElement) {
                        ref6 = this.childsByName(iconsElement, "Icon");
                        for (o = 0, len6 = ref6.length; o < len6; o++) {
                            iconElement = ref6[o];
                            icon = new VASTIcon();
                            icon.program = iconElement.getAttribute("program");
                            icon.height = parseInt(iconElement.getAttribute("height") || 0, 10);
                            icon.width = parseInt(iconElement.getAttribute("width") || 0, 10);
                            icon.xPosition = this.parseXPosition(iconElement.getAttribute("xPosition"));
                            icon.yPosition = this.parseYPosition(iconElement.getAttribute("yPosition"));
                            icon.apiFramework = iconElement.getAttribute("apiFramework");
                            icon.offset = this.parseDuration(iconElement.getAttribute("offset"));
                            icon.duration = this.parseDuration(iconElement.getAttribute("duration"));
                            ref7 = this.childsByName(iconElement, "HTMLResource");
                            for (p = 0, len7 = ref7.length; p < len7; p++) {
                                htmlElement = ref7[p];
                                icon.type = htmlElement.getAttribute("creativeType") || 'text/html';
                                icon.htmlResource = this.parseNodeText(htmlElement);
                            }
                            ref8 = this.childsByName(iconElement, "IFrameResource");
                            for (q = 0, len8 = ref8.length; q < len8; q++) {
                                iframeElement = ref8[q];
                                icon.type = iframeElement.getAttribute("creativeType") || 0;
                                icon.iframeResource = this.parseNodeText(iframeElement);
                            }
                            ref9 = this.childsByName(iconElement, "StaticResource");
                            for (r = 0, len9 = ref9.length; r < len9; r++) {
                                staticElement = ref9[r];
                                icon.type = staticElement.getAttribute("creativeType") || 0;
                                icon.staticResource = this.parseNodeText(staticElement);
                            }
                            iconClicksElement = this.childByName(iconElement, "IconClicks");
                            if (iconClicksElement) {
                                icon.iconClickThroughURLTemplate = this.parseNodeText(this.childByName(iconClicksElement, "IconClickThrough"));
                                ref10 = this.childsByName(iconClicksElement, "IconClickTracking");
                                for (s = 0, len10 = ref10.length; s < len10; s++) {
                                    iconClickTrackingElement = ref10[s];
                                    icon.iconClickTrackingURLTemplates.push(this.parseNodeText(iconClickTrackingElement));
                                }
                            }
                            icon.iconViewTrackingURLTemplate = this.parseNodeText(this.childByName(iconElement, "IconViewTracking"));
                            creative.icons.push(icon);
                        }
                    }
                    return creative;
                },

                parseNonLinear: function(creativeElement, creativeAttributes) {
                    var adParamsElement, base, clickTrackingElement, creative, eventName, htmlElement, i, iframeElement, j, k, l, len, len1, len2, len3, len4, len5, len6, m, n, nonlinearAd, nonlinearResource, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, staticElement, trackingElement, trackingEventsElement, trackingURLTemplate;
                    creative = new VASTCreativeNonLinear(creativeAttributes);
                    ref = this.childsByName(creativeElement, "TrackingEvents");
                    for (i = 0, len = ref.length; i < len; i++) {
                        trackingEventsElement = ref[i];
                        ref1 = this.childsByName(trackingEventsElement, "Tracking");
                        for (j = 0, len1 = ref1.length; j < len1; j++) {
                            trackingElement = ref1[j];
                            eventName = trackingElement.getAttribute("event");
                            trackingURLTemplate = this.parseNodeText(trackingElement);
                            if (eventName && trackingURLTemplate) {
                                if ((base = creative.trackingEvents)[eventName] === null) {
                                    base[eventName] = [];
                                }

                                if (creative.trackingEvents[eventName] && trackingURLTemplate !== null) {
                                    creative.trackingEvents[eventName].push(trackingURLTemplate);
                                }
                            }
                        }
                    }
                    ref2 = this.childsByName(creativeElement, "NonLinear");
                    for (k = 0, len2 = ref2.length; k < len2; k++) {
                        nonlinearResource = ref2[k];
                        nonlinearAd = new VASTNonLinear();
                        nonlinearAd.id = nonlinearResource.getAttribute("id") || null;
                        nonlinearAd.width = nonlinearResource.getAttribute("width");
                        nonlinearAd.height = nonlinearResource.getAttribute("height");
                        nonlinearAd.expandedWidth = nonlinearResource.getAttribute("expandedWidth");
                        nonlinearAd.expandedHeight = nonlinearResource.getAttribute("expandedHeight");
                        nonlinearAd.scalable = this.parseBoolean(nonlinearResource.getAttribute("scalable"));
                        nonlinearAd.maintainAspectRatio = this.parseBoolean(nonlinearResource.getAttribute("maintainAspectRatio"));
                        nonlinearAd.minSuggestedDuration = this.parseDuration(nonlinearResource.getAttribute("minSuggestedDuration"));
                        nonlinearAd.apiFramework = nonlinearResource.getAttribute("apiFramework");
                        ref3 = this.childsByName(nonlinearResource, "HTMLResource");
                        for (l = 0, len3 = ref3.length; l < len3; l++) {
                            htmlElement = ref3[l];
                            nonlinearAd.type = htmlElement.getAttribute("creativeType") || 'text/html';
                            nonlinearAd.htmlResource = this.parseNodeText(htmlElement);
                        }
                        ref4 = this.childsByName(nonlinearResource, "IFrameResource");
                        for (m = 0, len4 = ref4.length; m < len4; m++) {
                            iframeElement = ref4[m];
                            nonlinearAd.type = iframeElement.getAttribute("creativeType") || 0;
                            nonlinearAd.iframeResource = this.parseNodeText(iframeElement);
                        }
                        ref5 = this.childsByName(nonlinearResource, "StaticResource");
                        for (n = 0, len5 = ref5.length; n < len5; n++) {
                            staticElement = ref5[n];
                            nonlinearAd.type = staticElement.getAttribute("creativeType") || 0;
                            nonlinearAd.staticResource = this.parseNodeText(staticElement);
                        }
                        adParamsElement = this.childByName(nonlinearResource, "AdParameters");
                        if (adParamsElement) {
                            nonlinearAd.adParameters = this.parseNodeText(adParamsElement);
                        }
                        nonlinearAd.nonlinearClickThroughURLTemplate = this.parseNodeText(this.childByName(nonlinearResource, "NonLinearClickThrough"));
                        ref6 = this.childsByName(nonlinearResource, "NonLinearClickTracking");
                        for (o = 0, len6 = ref6.length; o < len6; o++) {
                            clickTrackingElement = ref6[o];
                            nonlinearAd.nonlinearClickTrackingURLTemplates.push(this.parseNodeText(clickTrackingElement));
                        }
                        creative.variations.push(nonlinearAd);
                    }
                    return creative;
                },

                parseCompanionAd: function(creativeElement, creativeAttributes) {
                    var base, child, clickTrackingElement, companionAd, companionResource, creative, eventName, htmlElement, i, iframeElement, j, k, l, len, len1, len2, len3, len4, len5, len6, len7, m, n, o, p, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, staticElement, trackingElement, trackingEventsElement, trackingURLTemplate;
                    creative = new VASTCreativeCompanion(creativeAttributes);
                    ref = this.childsByName(creativeElement, "Companion");
                    for (i = 0, len = ref.length; i < len; i++) {
                        companionResource = ref[i];
                        companionAd = new VASTCompanionAd();
                        companionAd.id = companionResource.getAttribute("id") || null;
                        companionAd.width = companionResource.getAttribute("width");
                        companionAd.height = companionResource.getAttribute("height");
                        companionAd.companionClickTrackingURLTemplates = [];
                        ref1 = this.childsByName(companionResource, "HTMLResource");
                        for (j = 0, len1 = ref1.length; j < len1; j++) {
                            htmlElement = ref1[j];
                            companionAd.type = htmlElement.getAttribute("creativeType") || 'text/html';
                            companionAd.htmlResource = this.parseNodeText(htmlElement);
                        }
                        ref2 = this.childsByName(companionResource, "IFrameResource");
                        for (k = 0, len2 = ref2.length; k < len2; k++) {
                            iframeElement = ref2[k];
                            companionAd.type = iframeElement.getAttribute("creativeType") || 0;
                            companionAd.iframeResource = this.parseNodeText(iframeElement);
                        }
                        ref3 = this.childsByName(companionResource, "StaticResource");
                        for (l = 0, len3 = ref3.length; l < len3; l++) {
                            staticElement = ref3[l];
                            companionAd.type = staticElement.getAttribute("creativeType") || 0;
                            ref4 = this.childsByName(companionResource, "AltText");
                            for (m = 0, len4 = ref4.length; m < len4; m++) {
                                child = ref4[m];
                                companionAd.altText = this.parseNodeText(child);
                            }
                            companionAd.staticResource = this.parseNodeText(staticElement);
                        }
                        ref5 = this.childsByName(companionResource, "TrackingEvents");
                        for (n = 0, len5 = ref5.length; n < len5; n++) {
                            trackingEventsElement = ref5[n];
                            ref6 = this.childsByName(trackingEventsElement, "Tracking");
                            for (o = 0, len6 = ref6.length; o < len6; o++) {
                                trackingElement = ref6[o];
                                eventName = trackingElement.getAttribute("event");
                                trackingURLTemplate = this.parseNodeText(trackingElement);
                                if (eventName && trackingURLTemplate) {
                                    if ((base = companionAd.trackingEvents)[eventName] === null) {
                                        base[eventName] = [];
                                    }
                                    companionAd.trackingEvents[eventName].push(trackingURLTemplate);
                                }
                            }
                        }
                        ref7 = this.childsByName(companionResource, "CompanionClickTracking");
                        for (p = 0, len7 = ref7.length; p < len7; p++) {
                            clickTrackingElement = ref7[p];
                            companionAd.companionClickTrackingURLTemplates.push(this.parseNodeText(clickTrackingElement));
                        }
                        companionAd.companionClickThroughURLTemplate = this.parseNodeText(this.childByName(companionResource, "CompanionClickThrough"));
                        companionAd.companionClickTrackingURLTemplate = this.parseNodeText(this.childByName(companionResource, "CompanionClickTracking"));
                        creative.variations.push(companionAd);
                    }
                    return creative;
                },

                parseDuration: function(durationString) {
                    var durationComponents, hours, minutes, seconds, secondsAndMS;
                    if (!(durationString)) {
                        return -1;
                    }
                    if (VASTAd.isNumeric(durationString)) {
                        return parseInt(durationString, 10);
                    }
                    durationComponents = durationString.split(":");
                    if (durationComponents.length !== 3) {
                        return -1;
                    }
                    secondsAndMS = durationComponents[2].split(".");
                    seconds = parseInt(secondsAndMS[0], 10);
                    if (secondsAndMS.length === 2) {
                        seconds += parseFloat("0." + secondsAndMS[1]);
                    }
                    minutes = parseInt(durationComponents[1] * 60, 10);
                    hours = parseInt(durationComponents[0] * 60 * 60, 10);
                    if (isNaN(hours) || isNaN(minutes) || isNaN(seconds) || minutes > 60 * 60 || seconds > 60) {
                        return -1;
                    }
                    return hours + minutes + seconds;
                },

                parseXPosition: function(xPosition) {
                    if (xPosition === "left" || xPosition === "right") {
                        return xPosition;
                    }
                    return parseInt(xPosition || 0, 10);
                },

                parseYPosition: function(yPosition) {
                    if (yPosition === "top" || yPosition === "bottom") {
                        return yPosition;
                    }
                    return parseInt(yPosition || 0, 10);
                },

                parseBoolean: function(booleanString) {
                    return booleanString === 'true' || booleanString === 'TRUE' || booleanString === '1';
                },

                parseNodeText: function(node) {
                    return node && (node.textContent || node.text || '').trim();
                },

                copyNodeAttribute: function(attributeName, nodeSource, nodeDestination) {
                    var attributeValue;
                    attributeValue = nodeSource.getAttribute(attributeName);
                    if (attributeValue) {
                        return nodeDestination.setAttribute(attributeName, attributeValue);
                    }
                },

                parseCreativeAdIdAttribute: function(creativeElement) {
                    return creativeElement.getAttribute('AdID') || creativeElement.getAttribute('adID') || creativeElement.getAttribute('adId') || null;
                }
            };
        });
    });
Scoped.define("module:Ads.VastVideoAdProvider", [
        "module:Ads.AbstractVideoAdProvider",
        "module:Ads.VastPrerollAd"
    ],
    function(AbstractVideoAdProvider, VastPrerollAd, scoped) {
        return AbstractVideoAdProvider.extend({
            scoped: scoped
        }, {

            _newPrerollAd: function(options) {
                return new VastPrerollAd(this, options);
            }

        });
    });


Scoped.define("module:Ads.VastPrerollAd", [
    "module:Ads.AbstractPrerollAd",
    "module:Ads.VAST.VAST"
], function(AbstractVideoPrerollAd, VAST, scoped) {
    return AbstractVideoPrerollAd.extend({
        scoped: scoped
    }, function(inherited) {
        return {

            constructor: function(provider, options) {
                inherited.constructor.call(this, provider, options);
                this._vast = new VAST(this._provider.options(), {});
                this._vast.once("adresponseerror", function(err) {
                    // some error actions, no respond from ad server
                }, this);
            },

            _executeAd: function(options) {
                this._adplayer = new BetaJS.MediaComponents.VideoPlayer.Dynamics.Adplayer({
                    element: this._options.adElement,
                    attrs: {
                        css: this._options.dynamic.get("css")
                    }
                });
                this._adplayer._vast = this._vast;
                this._adplayer._preroll = this;
                this._adplayer.activate();
            },

            _adFinished: function() {
                this._options.adElement.style.display = "none";
                this.trigger("finished");
            },

            _adSkipped: function() {
                this._options.adElement.style.display = "none";
                this.trigger("adskipped");
            }

        };
    });
});
/**
 * This software may include modified and unmodified portions of:
 *
 * VAST Client
 *
 * Copyright (c) 2013 Olivier Poitrey <rs@dailymotion.com>
 *
 * Repository: https://github.com/dailymotion/vast-client-js
 *
 * MIT License: https://github.com/dailymotion/vast-client-js/blob/master/LICENSE
 *
 */

Scoped.define("module:Ads.VAST.Tracker", [
        "module:Ads.VAST.Ad",
        "module:Ads.VAST.CreativeLinear",
        "module:Ads.VAST.NonLinear",
        "module:Ads.VAST.CompanionAd",
        "module:Ads.VAST.Client",
        "base:Events.ListenMixin"
    ],
    function(VASTAd, VASTCreativeLinear, VASTNonLinear, VASTCompanionAd, VASTClient, ListenMixin, scoped) {
        return VASTAd.extend({
            scoped: scoped
        }, [ListenMixin, function(inherited) {
            return {
                constructor: function(ad, creative, variation) {
                    inherited.constructor.call(this, ad, creative, variation);
                    var eventName, events, trackingEvents;
                    this.ad = ad;
                    this.creative = creative;
                    this.variation = variation || null;
                    this.muted = false;
                    this.impressed = false;
                    this.skipable = false;
                    this.skipDelayDefault = -1;

                    this.emitAlwaysEvents = ['creativeView', 'start', 'firstQuartile', 'midpoint', 'thirdQuartile', 'complete', 'rewind', 'skip', 'closeLinear', 'close'];
                    trackingEvents = creative ? creative.trackingEvents : {};

                    for (eventName in trackingEvents) {
                        events = trackingEvents[eventName];
                        if (events)
                            this.trackingEvents[eventName] = events.slice(0);
                    }

                    if (creative instanceof VASTCreativeLinear) {
                        this.setAdDuration(this.creative.duration);
                        this.skipDelay = creative.skipDelay;
                        this.linear = true;
                        this.clickThroughURLTemplate = creative.videoClickThroughURLTemplate;
                        this.clickTrackingURLTemplate = creative.videoClickTrackingURLTemplate;
                    } else {
                        this.skipDelay = -1;
                        this.linear = false;
                        if (this.variation) {
                            if (this.variation instanceof VASTNonLinear) {
                                this.clickThroughURLTemplate = this.variation.nonlinearClickThroughURLTemplate;
                                this.clickTrackingURLTemplates = this.variation.nonlinearClickTrackingURLTemplates;
                            } else if (this.variation instanceof VASTCompanionAd) {
                                this.clickThroughURLTemplate = this.variation.companionClickThroughURLTemplate;
                                this.clickTrackingURLTemplates = this.variation.companionClickTrackingURLTemplates;
                            }
                        }
                    }

                    this.on('adstart', function() {
                        VASTClient.lastSuccessfullAd = +new Date();
                    });


                },

                setAdDuration: function(duration) {
                    this.assetDuration = duration;
                    this.quartiles = {
                        'firstQuartile': Math.round(25 * this.assetDuration) / 100,
                        'midpoint': Math.round(50 * this.assetDuration) / 100,
                        'thirdQuartile': Math.round(75 * this.assetDuration) / 100
                    };
                    return this.quartiles;
                },

                setAdProgress: function(progress) {
                    var eventName, events, i, len, percent, quartile, ref, skipDelay, time;
                    skipDelay = this.skipDelay === null ? this.skipDelayDefault : this.skipDelay;
                    if (skipDelay !== -1 && !this.skipable) {
                        if (skipDelay > progress) {
                            this.trigger('adskip-countdown', skipDelay - progress);
                        } else {
                            this.skipable = true;
                            this.trigger('adskip-countdown', 0);
                        }
                    }
                    if (this.linear && this.assetDuration > 0) {
                        events = [];
                        if (progress > 0) {
                            events.push("start");
                            percent = Math.round(progress / this.assetDuration * 100);
                            events.push("progress-" + percent + "%");
                            events.push("progress-" + (Math.round(progress)));
                            ref = this.quartiles;
                            for (quartile in ref) {
                                time = ref[quartile];
                                if ((time <= progress && progress <= (time + 1))) {
                                    events.push(quartile);
                                }
                            }
                        }
                        for (i = 0, len = events.length; i < len; i++) {
                            eventName = events[i];
                            if (eventName !== null)
                                this.track(eventName, true);
                        }
                        if (progress < this.progress) {
                            this.track("rewind");
                        }
                    }
                    this.progress = progress;
                    return progress;
                },

                setAdMuted: function(muted) {
                    if (this.muted !== muted) {
                        this.track(muted ? "mute" : "unmute");
                    }
                    this.muted = muted;
                    return muted;
                },

                setAdPaused: function(paused) {
                    if (this.paused !== paused) {
                        this.track(paused ? "pause" : "resume");
                    }
                    this.paused = paused;
                    return paused;
                },

                setAdFullscreen: function(fullscreen) {
                    if (this.fullscreen !== fullscreen) {
                        this.track(fullscreen ? "fullscreen" : "exitFullscreen");
                    }
                    this.fullscreen = fullscreen;
                    return fullscreen;
                },

                setAdExpand: function(expanded) {
                    if (this.expanded !== expanded) {
                        this.track(expanded ? "expand" : "collapse");
                    }
                    this.expanded = expanded;
                    return expanded;
                },

                setAdSkipDelay: function(duration) {
                    if (typeof duration === 'number') {
                        this.skipDelay = duration;
                        return duration;
                    }
                },

                loadAd: function() {
                    if (!this.impressed) {
                        this.impressed = true;
                        this.trackAdURLs(this.ad.impressionURLTemplates);
                        return this.track("creativeView");
                    }
                },

                errorAdWithCode: function(errorCode) {
                    return this.trackAdURLs(this.ad.errorURLTemplates, {
                        ERRORCODE: errorCode
                    });
                },

                errorAdWithCodeAndMessage: function(errorCode, errorMessage) {
                    return this.trackAdURLs(this.ad.errorURLTemplates, {
                        ERRORCODE: errorCode,
                        ERRORMESSAGE: errorMessage
                    });
                },

                completeAd: function() {
                    return this.track("complete");
                },

                closeAd: function() {
                    return this.track(this.linear ? "closeLinear" : "close");
                },

                stopAd: function() {},

                skipAd: function() {
                    this.track("skip");
                    this.trackingEvents = [];
                    return this.trackingEvents;
                },

                clickAd: function() {
                    var clickThroughURL, ref, variables;
                    if ((ref = this.clickTrackingURLTemplates) !== null ? ref.length : void 0) {
                        this.trackAdURLs(this.clickTrackingURLTemplates);
                    }
                    if (this.clickThroughURLTemplate !== null) {
                        if (this.linear) {
                            variables = {
                                CONTENTPLAYHEAD: this.adProgressFormated()
                            };
                        }
                        clickThroughURL = VASTAd.resolveURLTemplates([this.clickThroughURLTemplate], variables)[0];
                        return this.trigger("clickthrough", clickThroughURL);
                    }
                },

                track: function(eventName, once) {
                    var idx, trackingURLTemplates;
                    if (!once) {
                        once = false;
                    }
                    if (eventName === 'closeLinear' && ((!this.trackingEvents[eventName]) && (this.trackingEvents.close))) {
                        eventName = 'close';
                    }
                    trackingURLTemplates = this.trackingEvents[eventName];
                    idx = this.emitAlwaysEvents.indexOf(eventName);
                    if (trackingURLTemplates) {
                        this.trigger(eventName, '');
                        this.trackAdURLs(trackingURLTemplates);
                    } else if (idx !== -1) {
                        this.trigger(eventName, '');
                    }
                    if (once === true) {
                        delete this.trackingEvents[eventName];
                        delete this.trackingEvents[eventName];
                        if (idx > -1) {
                            this.emitAlwaysEvents.splice(idx, 1);
                        }
                    }
                },

                trackAdURLs: function(URLTemplates, variables) {
                    var _ref;
                    if (!variables) {
                        variables = {};
                    }
                    if (this.linear) {
                        if (((_ref = this.creative.mediaFiles[0]) !== null ? _ref.fileURL : void 0) !== null) {
                            variables.ASSETURI = this.creative.mediaFiles[0].fileURL;
                        }
                        variables.CONTENTPLAYHEAD = this.adProgressFormated();
                    }
                    return VASTAd.trackAd(URLTemplates, variables);
                },

                adProgressFormated: function() {
                    var h, m, ms, s, seconds;
                    seconds = parseInt(this.progress, 10);
                    h = seconds / (60 * 60);
                    if (h.length < 2) {
                        h = "0" + h;
                    }
                    m = seconds / 60 % 60;
                    if (m.length < 2) {
                        m = "0" + m;
                    }
                    s = seconds % 60;
                    if (s.length < 2) {
                        s = "0" + m;
                    }
                    ms = parseInt((this.progress - seconds) * 100, 10);
                    return h + ":" + m + ":" + s + "." + ms;
                }
            };
        }]);
    });
/**
 * This software may include modified and unmodified portions of:
 *
 * VAST Client
 *
 * Copyright (c) 2013 Olivier Poitrey <rs@dailymotion.com>
 *
 * Repository: https://github.com/dailymotion/vast-client-js
 *
 * MIT License: https://github.com/dailymotion/vast-client-js/blob/master/LICENSE
 *
 */

Scoped.define("module:Ads.VAST.VAST", [
        "base:Class",
        "module:Ads.VAST.Client",
        "module:Ads.VAST.Tracker",
        "module:Ads.VAST.Ad",
        "base:Objs",
        "base:Promise",
        "base:Events.EventsMixin",
        "base:Types"
    ],
    function(Class, VASTClient, VASTTracker, VASTAd, Objs, Promise, EventsMixin, Types, scoped) {
        return Class.extend({
            scoped: scoped
        }, [EventsMixin, function(inherited) {
            return {
                constructor: function(options, requestOptions) {
                    inherited.constructor.call(this);
                    options = Types.is_array(options) ? options : [options];
                    var vastClient, _promise, _self;
                    this.vastServerResponses = [];
                    this.timeout = 5000;
                    this.adPodTimeout = 100;
                    this.companion = undefined;
                    this.sources = [];
                    this.companion = {};

                    _self = this;
                    _promise = Promise.create();

                    vastClient = this.auto_destroy(new VASTClient(options));

                    Objs.iter(options, function(vast) {
                        if (vast.adServer) {
                            if (vast.skipAfter) {
                                _self.skipAdAfter = vast.skipAfter;
                            }
                            vastClient.getAd(vast.adServer, requestOptions, function(err, response) {
                                if (err) {
                                    var _errorMessage = 'Error occurred during loading provided link. ' + err;
                                    _promise.asyncError({
                                        message: _errorMessage
                                    });
                                } else {
                                    _self.vastServerResponses.push(response);
                                    _promise.asyncSuccess(_self.vastServerResponses);
                                }
                            });
                        } else {
                            _promise.asyncError({
                                message: 'Video Ad options are not correct, asServer are required'
                            });
                        }
                    }, this);

                    _promise.success(function(responses) {
                        this.executeAd(responses[0]);
                    }, this);

                    _promise.error(function(error) {
                        this.trigger("adresponseerror", error);
                    }, this);
                },

                executeAd: function(response) {
                    var _ad, _adIds, _crIds, _creative, _foundCreative, _foundCompanion, _self;
                    _self = this;
                    if (response)
                        for (_adIds = 0; _adIds < response.ads.length; _adIds++) {
                            _ad = response.ads[_adIds];
                            for (_crIds = 0; _crIds < _ad.creatives.length; _crIds++) {
                                _creative = _ad.creatives[_crIds];
                                _foundCreative = false;
                                _foundCompanion = false;

                                if (_creative.type === 'linear' && !_foundCreative) {
                                    if (_creative.skipDelay > 0)
                                        this.skipAdAfter = _creative.skipDelay;

                                    if (_creative.mediaFiles.length) {

                                        this.sources = this.createSourceObjects(_creative.mediaFiles);

                                        if (!this.sources.length) {
                                            _self.trigger("adcanceled");
                                            return;
                                        }

                                        this.vastTracker = new VASTTracker(_ad, _creative);
                                        _foundCreative = true;
                                    }
                                }

                                if (_creative.type === 'companion' && !_foundCompanion) {
                                    this.companion = _creative;
                                    _foundCompanion = true;
                                }
                            }
                            if (this.vastTracker) {
                                this.persistentTrigger("vastready");
                                break;
                            } else {
                                VASTAd.trackAd(_ad.errorURLTemplates, {
                                    ERRORCODE: 403
                                });
                            }
                        }

                    if (!this.vastTracker) {
                        this.persistentTrigger("adcanceled");
                    }
                },

                createSourceObjects: function(mediaFiles) {
                    var _sources, _mediaFile, _source;
                    _sources = [];
                    for (var i = 0, j = mediaFiles.length; i < j; i++) {
                        _mediaFile = mediaFiles[i];
                        _source = {
                            type: _mediaFile.mimeType,
                            src: _mediaFile.fileURL
                        };

                        if (this._canPlaySource(_source)) {
                            _sources[i] = ({
                                type: _mediaFile.mimeType,
                                src: _mediaFile.fileURL,
                                width: _mediaFile.width,
                                height: _mediaFile.height
                            });
                        }
                    }

                    return _sources;
                },

                _canPlaySource: function(source) {
                    var _ext, _mimeType, _allowedMimeTypes;
                    _allowedMimeTypes = [
                        "application/vnd.apple.mpegurl",
                        "video/3gpp",
                        "video/mp4",
                        "video/mpeg",
                        "video/ogg",
                        "video/quicktime",
                        "video/webm",
                        "video/x-m4v",
                        "video/ms-asf",
                        "video/x-ms-wmv",
                        "video/x-msvideo"
                    ];

                    if (source.type) {
                        _mimeType = source.type;
                    } else if (source.src) {
                        _ext = this._ext(source.src);
                        _mimeType = 'video/' + _ext;
                    } else {
                        return false;
                    }

                    return Objs.contains_value(_allowedMimeTypes, _mimeType);
                },

                _ext: function(url) {
                    return (url = url.substr(1 + url.lastIndexOf("/")).split('?')[0]).split('#')[0].substr(url.lastIndexOf("."));
                }

            };
        }]);
    }
);
Scoped.define("module:Assets", [
    "base:Classes.LocaleTable",
    "browser:Info"
], function(LocaleTable, Info) {

    var strings = new LocaleTable();
    strings.setWeakLocale(Info.language());

    return {

        strings: strings,

        playerthemes: {},

        recorderthemes: {},

        imageviewerthemes: {},

        imagecapturethemes: {},

        audioplayerthemes: {},

        audiorecorderthemes: {}

    };
});
Scoped.define("module:AudioVisualisation", [
    "base:Class",
    "browser:Dom"
], function(Class, Dom, scoped) {
    return Class.extend({
        scoped: scoped
    }, function(inherited) {
        return {
            /**
             * @param stream  // Audio stream
             * @param {object} options // additional options like height and active element
             */
            constructor: function(stream, options) {
                inherited.constructor.call(this);
                this.stream = stream;
                if (options.recorder) {
                    this.audioContext = options.globalAudioContext;

                    // Commented for the future use in audio recorder
                    // var recorder = options.recorder;
                    // this._analyser = recorder._analyser;
                    // this._audioContext = this._analyser._audioContext;
                    // this.audioContext = this._analyser._audioContext;
                    // this._analyserNode = this._analyser._analyserNode;
                    // this._audioInput = this._analyser._audioInput;
                } else {
                    var AudioContext = window.AudioContext || window.webkitAudioContext;
                    this.audioContext = new AudioContext();
                }
                this.audioBufferSourceNode = this.audioContext.createBufferSource();
                this.createVisualisationCanvas(options.height, options.element);
                this.frameID = null;
            },

            createVisualisationCanvas: function(height, element) {
                var _height, _containerElement;
                _height = height || 120;
                _containerElement = (element.firstElementChild || element.firstChild);
                _containerElement.style.minHeight = _height + 'px';
                this.canvas = _containerElement.querySelector('canvas');
                this.canvas.style.display = 'block';
                this.canvas.width = parseFloat(window.getComputedStyle(_containerElement).width);
                this.canvas.height = _height;
                this.canvasContext = this.canvas.getContext("2d");
            },

            initializeVisualEffect: function() {
                try {
                    var _source;
                    if (this.audioContext || this.stream) {
                        this.analyser = this._analyser || this.audioContext.createAnalyser();
                        this.audioBufferSourceNode.connect(this.analyser);
                        _source = this.audioContext.createMediaElementSource(this.stream);
                        _source.connect(this.analyser);
                        if (this.audioContext.state === 'suspended') {
                            Dom.userInteraction(function() {
                                this.audioContext.resume();
                            }, this);
                        }
                        this.analyser.connect(this.audioContext.destination);
                        this.analyser.fftSize = 256;
                        this.bufferLength = this.analyser.frequencyBinCount;
                        this.dataArray = new Uint8Array(this.bufferLength);
                        // this.dataArray = new Float32Array( this.analyser.fftSize);
                        this.canvasWidth = this.canvas.width;
                        this.canvasHeigth = this.canvas.height;
                        this.barWidth = (this.canvasWidth / this.bufferLength) * 2.5;
                        this.barHeight = 0;
                        this.x = 0;
                        //this.renderFrame = this._renderFrame;
                        // If requestAnimationFrame is missing
                        if (!window.requestAnimationFrame) {
                            window.requestAnimationFrame = (function() {
                                return window.webkitRequestAnimationFrame ||
                                    window.mozRequestAnimationFrame ||
                                    window.oRequestAnimationFrame ||
                                    window.msRequestAnimationFrame ||
                                    function( /* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {
                                        window.setTimeout(callback, 1000 / 60);
                                    };
                            })();
                            window.cancelAnimationFrame = window.cancelAnimationFrame ||
                                window.mozCancelAnimationFrame ||
                                function(requestID) {
                                    clearTimeout(requestID);
                                }; //fall back
                        }
                    } else {
                        console.warn('Seems there is limitation by browser to create AudioContext instance');
                    }
                } catch (e) {
                    //this.set('visualeffectsupported', false);
                    console.warn('Web Audio API not supported', e);
                }
            },

            renderFrame: function() {
                // requestAnimationFrame(this.renderFrame.bind(this));
                var _self = this;
                this.frameID = requestAnimationFrame(function() {
                    _self.renderFrame();
                });
                this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);
                this.analyser.getByteFrequencyData(this.dataArray);
                // this.dataArray = new Float32Array( this.analyser.fftSize);
                // this.analyser.getFloatTimeDomainData(this.dataArray);
                setTimeout(function() {
                    //debugger;
                }, 2000);
                this._drawBigBalloon();
            },

            cancelFrame: function(ID) {
                var _ID = ID || this.renderFrame;
                cancelAnimationFrame(_ID);
            },

            _drawRedBars: function() {
                this.x = 0;
                this.canvasContext.fillStyle = "#000";
                this.canvasContext.fillRect(0, 0, this.canvasWidth, this.canvasHeigth);
                for (var i = 0; i < this.bufferLength; i++) {
                    this.barHeight = this.dataArray[i] / 2;
                    var r = this.barHeight + (25 * (i / this.bufferLength));
                    var g = 250 * (i / this.bufferLength);
                    var b = 50;
                    this.canvasContext.fillStyle = "rgb(" + r + "," + g + "," + b + ")";
                    this.canvasContext.fillRect(this.x, this.canvasHeigth - this.barHeight, this.barWidth, this.barHeight);
                    this.x += this.barWidth + 1;
                }
            },

            _drawBigBalloon: function() {
                this.__canvasBackground(235);
                this.canvasContext.fillStyle = "#000";
                var s = this.__getRMS();
                this.canvasContext.fillStyle = this.__rgb(s * 2);
                this.__HfillEllipse(this.canvasWidth / 2, this.canvasHeigth / 2, s * 5, s * 5);
            },

            __getRMS: function() {
                var rms = 0;
                for (var i = 0; i < this.bufferLength; i++) {
                    rms += this.dataArray[i] * this.dataArray[i];
                }
                rms /= this.dataArray.length;
                rms = Math.sqrt(rms);
                return rms;
            },

            __canvasBackground: function(r, g, b, a) {
                if (typeof g === 'undefined') {
                    this.canvasContext.fillStyle = this.__rgb(r, r, r);
                } else if (typeof b === 'undefined' && typeof a === 'undefined') {
                    this.canvasContext.fillStyle = rgba(r, r, r, g);
                } else if (typeof a === 'undefined') {
                    this.canvasContext.fillStyle = this.__rgb(r, g, b);
                } else {
                    this.canvasContext.fillStyle = this.__rgba(r, g, b, a);
                }
                this.canvasContext.fillRect(0, 0, this.canvasWidth, this.canvasHeigth);
            },

            __HfillEllipse: function(x, y, width, height) {
                if (typeof height === 'undefined') height = width;
                this.__Hellipse(x, y, width, height);
                this.canvasContext.fill();
                this.canvasContext.beginPath();
            },

            __Hellipse: function(x, y, width, height) {
                'use strict';
                if (typeof height === 'undefined') height = width;
                this.canvasContext.beginPath();
                for (var i = 0; i < Math.PI * 2; i += Math.PI / 64) {
                    this.canvasContext.lineTo(x + (Math.cos(i) * width / 2), y + (Math.sin(i) * height / 2));
                }
                this.canvasContext.closePath();
            },

            __rgb: function(r, g, b) {

                if (typeof g === 'undefined') g = r;
                if (typeof b === 'undefined') b = r;
                return 'rgb(' + this.__clamp(Math.round(r), 0, 255) + ', ' + this.__clamp(Math.round(g), 0, 255) + ', ' + this.__clamp(Math.round(b), 0, 255) + ')';

            },

            __rgba: function(r, g, b, a) {
                if (typeof g === 'undefined') {
                    return 'rgb(' + this.__clamp(Math.round(r), 0, 255) + ', ' + this.__clamp(Math.round(r), 0, 255) + ', ' + this.__clamp(Math.round(r), 0, 255) + ')';
                } else if (typeof b === 'undefined') {
                    return 'rgba(' + this.__clamp(Math.round(r), 0, 255) + ', ' + this.__clamp(Math.round(r), 0, 255) + ', ' + this.__clamp(Math.round(r), 0, 255) + ', ' + this.__clamp(g, 0, 1) + ')';
                } else if (typeof a === 'undefined') {
                    return 'rgba(' + this.__clamp(Math.round(r), 0, 255) + ', ' + this.__clamp(Math.round(g), 0, 255) + ', ' + this.__clamp(Math.round(b), 0, 255) + ', 1)';
                } else {
                    return 'rgba(' + this.__clamp(Math.round(r), 0, 255) + ', ' + this.__clamp(Math.round(g), 0, 255) + ', ' + this.__clamp(Math.round(b), 0, 255) + ', ' + this.__clamp(a, 0, 1) + ')';
                }
            },

            __clamp: function(value, min, max) {
                return Math.min(Math.max(value, Math.min(min, max)), Math.max(min, max));
            }
        };
    }, {
        supported: function() {
            return !!(window.AudioContext || window.webkitAudioContext);
        }
    });
});
Scoped.define("module:Settings", [
    "base:Class",
    "base:Objs",
    "base:Events.EventsMixin",
    "base:Async",
    "base:Timers.Timer",
    "browser:Dom",
    "browser:Events"
], function(Class, Objs, EventsMixin, Async, Timer, Dom, DomEvents, Info, scoped) {

    return Class.extend({
        scoped: scoped
    }, [EventsMixin, function(inherited) {
        return {

            constructor: function(options, dynamics) {
                inherited.constructor.call(this);
                var _selector, _css;
                this.options = options;
                this.dyn = dynamics;
                this.selected = {};
                _css = this.dyn.get('css');
                // Dom.ready(function () {
                try {
                    _selector = '.' + _css + '-overlay';
                    this.currentElement = dynamics.activeElement().querySelector(_selector);
                    this.settingsContainer = document.createElement("div");
                    this.settingsContainer.className = "ba-settings-overlay";
                    this.currentElement.appendChild(this.settingsContainer);
                } catch (e) {
                    console.warn('Could not select settings element. Details: ' + e);
                    return;
                }

                this.domEvents = this.auto_destroy(new DomEvents());

                // If mouse clicked outside of the element
                this.domEvents.on(document, "click touchstart", function(event) {
                    var isClickInside = this.settingsContainer.contains(event.target);
                    if (!isClickInside && this.containerInner) {
                        this.dyn.set("settingsoptionsvisible", false);
                        this._removeSettingsContent();
                    }
                }, this);

                // }, this);
            },

            /**
             * Toggle settings
             */
            toggle_settings_block: function() {
                if (this.containerInner) {
                    this._removeSettingsContent();
                    return;
                }
                this._showRootSettings(this.options, this.hasSubMenu);
            },

            /**
             * If exists remove old inner container and create a new one
             * @private
             */
            _buildSettingsContainer: function(callback) {
                try {
                    this._removeSettingsContent();
                    Async.eventually(function() {
                        this.containerInner = document.createElement("ul");
                        this.containerInner.className = "ba-settings-overlay-inner";
                        this.settingsContainer.appendChild(this.containerInner);
                        callback.call(this, null, this.containerInner);
                    }, this, 10);
                } catch (e) {
                    callback(e, null);
                }
            },

            /**
             * Show root settings as a list
             * @param {Object} options
             * @private
             */
            _showRootSettings: function(options) {
                options = options || this.options;
                var _singleSetting, _label, _hasOptions, _rightAngleIcon;
                this._buildSettingsContainer(function(err, container) {
                    if (err) {
                        console.warn('Error: ', err);
                        return;
                    } else {
                        //Objs.count(options)
                        Objs.iter(options, function(setting) {
                            _singleSetting = document.createElement('li');
                            _label = this.dyn.string(setting.label) || setting.label;
                            _hasOptions = setting.options ? 'true' : false;
                            _rightAngleIcon = _hasOptions ? '<i class="' + this.dyn.get('csscommon') + '-icon-angle-right' + '"></i>' : '';
                            _singleSetting.tabIndex = 0;
                            _singleSetting.innerHTML = _label + '<span class="ba-settings-label-icon">' + _rightAngleIcon + '</span>';
                            if (!this.selected[setting.id]) {
                                this.selected[setting.id] = {};
                                this.selected[setting.id].value = setting.defaultValue;
                            }
                            if (setting.options) {
                                this.domEvents.on(_singleSetting, "click touchstart", function(ev) {
                                    this._showChildOptions(setting);
                                }, this);
                            } else {
                                this._attachEventToElement(setting, _singleSetting);
                            }
                            container.appendChild(_singleSetting);
                        }, this);
                        this._animateFade(false, container);
                    }
                });
            },

            /**
             * Show inner child options of the setting
             * @param {Object} setting
             * @private
             */
            _showChildOptions: function(setting) {
                var _singleSettingElement, _label, _selected, _checkedIcon;
                this._buildSettingsContainer(function(err, container) {
                    if (err) {
                        console.warn('Error: ', err);
                    } else {
                        if (Objs.count(setting.options) > 0) {
                            this._createBackPointer(container);
                        } else return;

                        Objs.iter(setting.options, function(option) {
                            _singleSettingElement = document.createElement('li');
                            _selected = this.selected[setting.id].value === option.value;
                            _checkedIcon = _selected ? '<i class="' + this.dyn.get('csscommon') + '-icon-check' + '"></i>' : '';
                            _singleSettingElement.tabIndex = 0;
                            _singleSettingElement.className = 'ba-settings-popup-list-item ba-' + setting.className + '-list-item';
                            _singleSettingElement.className += _selected ? ' ba-settings-popup-selected-list-item' : '';
                            _label = this.dyn.string(option.label) || option.label;

                            _singleSettingElement.innerHTML = '<span class="ba-settings-label-icon">' + _checkedIcon + '</span> ' + _label;

                            this._attachEventToElement(setting, _singleSettingElement, option);
                            container.appendChild(_singleSettingElement);
                        }, this);
                    }
                    this._animateFade(false, container);
                });
            },

            /**
             * Create link to back to the main settings link
             * @private
             */
            _createBackPointer: function(container) {
                var _singleSettingElement, _leftAngleIcon;
                _singleSettingElement = document.createElement('li');
                _leftAngleIcon = '<span class="ba-settings-label-icon"><i class="' + this.dyn.get('csscommon') + '-icon-angle-left' + '"></i></span>';
                _singleSettingElement.innerHTML = _leftAngleIcon + this.dyn.string('all-settings');
                _singleSettingElement.className = 'ba-settings-popup-list-item ba-settings-back-to-settings';
                this.domEvents.on(_singleSettingElement, 'click touchstart', function() {
                    this._showRootSettings(this.options);
                }, this);
                container.appendChild(_singleSettingElement);
            },

            /**
             * Will attach provided events on
             * @param {Object} setting
             * @param element
             * @param {Object} option
             * @private
             */
            _attachEventToElement: function(setting, element, option) {
                Objs.map(setting.events, function(event) {
                    this.domEvents.on(element, event.type, function() {
                        _method = event.method;
                        if (option) {
                            this.selected[setting.id].value = option.value;
                            this.dyn.functions[_method].call(this.dyn, option.value);
                        } else
                            this.dyn.functions[_method].call(this.dyn);
                        if (option)
                            this._showRootSettings(this.options);
                        else
                            this.toggle_settings_block();
                    }, this);
                }, this);
            },

            /**
             * Remove Settings container
             * @private
             */
            _removeSettingsContent: function() {
                if (this.containerInner) {
                    if (this.containerInner.parentNode)
                        try {
                            this.containerInner.parentNode.removeChild(this.containerInner);
                            this.containerInner = null;
                        } catch (e) {
                            console.warn(e);
                        }
                }
            },

            /**
             * Animate fade in or out
             * @param {boolean} hide
             * @param {Object} container
             * @private
             */
            _animateFade: function(hide, container) {
                var _opacity, _step, _target, _timer;
                _opacity = hide ? 1.00 : 0.00;
                _step = hide ? -0.1 : 0.1;
                _target = hide ? 0.00 : 1.00;
                container.style.opacity = _opacity;
                Async.eventually(function() {
                    _timer = this.auto_destroy(new Timer({
                        context: this,
                        fire: function() {
                            container.style.opacity = _opacity;
                            _opacity = _opacity + (_step * 1.0);
                            if ((hide && _opacity < _target) || (!hide && _opacity > _target)) {
                                _timer.destroy();
                            }
                        },
                        delay: 30,
                        immediate: true
                    }));
                }, this, 100);
            }
        };
    }]);
});
Scoped.define("module:PopupHelper", [
    "base:Class",
    "base:Events.EventsMixin",
    "browser:Dom",
    "browser:Events"
], function(Class, EventsMixin, Dom, DomEvents, scoped) {

    var PopupHelper = Class.extend({
        scoped: scoped
    }, [EventsMixin, function(inherited) {
        return {

            constructor: function(options) {
                inherited.constructor.call(this);

                this.popupContainer = document.createElement("div");
                this.backgroundContainer = document.createElement("div");
                this.backgroundContainer.className = "ba-popup-helper-overlay-background";
                this.popupContainer.appendChild(this.backgroundContainer);
                this.overlayContainer = document.createElement("div");
                this.overlayContainer.className = "ba-popup-helper-overlay";
                this.popupContainer.appendChild(this.overlayContainer);
                this.containerInner = document.createElement("div");
                this.containerInner.className = "ba-popup-helper-overlay-inner";
                this.overlayContainer.appendChild(this.containerInner);

                this.domEvents = this.auto_destroy(new DomEvents());
                this.domEvents.on(this.backgroundContainer, "click touchstart", function() {
                    this.hide();
                }, this);
                this.domEvents.on(this.containerInner, "click touchstart", function(event) {
                    event.stopPropagation();
                });
            },

            show: function() {
                Dom.elementAddClass(document.body, "ba-popup-helper-overlay-body");
                document.body.appendChild(this.popupContainer);
                this.trigger("show");
            },

            hide: function() {
                var popupContainer = this.popupContainer;
                this.trigger("hide");
                document.body.removeChild(popupContainer);
                Dom.elementRemoveClass(document.body, "ba-popup-helper-overlay-body");
            }

        };
    }], {

        mixin: function(inherited) {
            return {

                constructor: function(options) {
                    options = options || {};
                    this.__popup = new PopupHelper(options.popup);
                    this.__popup.on("hide", this.destroy, this);
                    options.element = this.__popup.containerInner;
                    inherited.constructor.call(this, options);
                },

                activate: function() {
                    this.__popup.show();
                    inherited.activate.call(this);
                },

                destroy: function() {
                    this.__popup.destroy();
                    inherited.destroy.call(this);
                }

            };
        }

    });

    return PopupHelper;
});
Scoped.define("module:IframeHelper", [
    "dynamics:Dynamic",
    "base:Objs",
    "base:Types",
    "base:Net.Uri"
], function(Dynamic, Objs, Types, Uri, scoped) {
    return Dynamic.extend({
        scoped: scoped
    }, function(inherited) {
        return {

            template: "<iframe src=\"{{computeSrc()}}\" style=\"width:100%;height:100%\" allow=\"{{computeAllow()}}\" scrolling=\"no\" frameborder=\"0\"></iframe>",

            getAllowModifiers: function() {
                return [];
            },

            getSrc: function() {
                return "";
            },

            filteredAttrs: function() {
                return Objs.filter(this.properties().getAll(), function(value, key) {
                    return !Types.is_object(value) && !Types.is_array(value);
                }, this);
            },

            functions: {
                computeSrc: function() {
                    return Uri.appendUriParams(this.getSrc(), this.filteredAttrs());
                },

                computeAllow: function() {
                    return this.getAllowModifiers().map(function(modifier) {
                        return modifier + " *";
                    }).join("; ");
                }
            },

            iframe: function() {
                return this.activeElement().querySelector("iframe");
            },

            _afterActivate: function() {
                inherited._afterActivate.apply(this, arguments);
                var iframe = this.iframe();
                this.getAllowModifiers().forEach(function(modifier) {
                    iframe["allow" + modifier] = "allow" + modifier;
                });
            }

        };
    }).registerFunctions({ /**/"computeSrc()": function (obj) { with (obj) { return computeSrc(); } }, "computeAllow()": function (obj) { with (obj) { return computeAllow(); } }/**/ });
});
Scoped.define("module:VideoPlayer.Dynamics.Adplayer", [
    "dynamics:Dynamic",
    "base:TimeFormat",
    "base:Timers",
    "browser:Dom",
    "media:Player.VideoPlayerWrapper",
    "module:Assets"
], function(Class, TimeFormat, Timers, Dom, VideoPlayerWrapper, Assets, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "<video class=\"{{css}}-video\" data-video=\"video\"></video>\n<div class=\"{{cssplayer}}-ad-dashboard\">\n    <div class=\"{{cssplayer}}-ad-click-tracker\" ba-click=\"{{ad_clicked()}}\"></div>\n    <div class=\"{{cssplayer}}-skipbutton-container\" ba-click=\"{{skip_linear_ad()}}\"  ba-show=\"{{skipbuttonvisible}}\">\n        <p class=\"{{cssplayer}}-skipbutton\">{{lefttillskip > 0 ? string('can-skip-after').replace('%d', lefttillskip) : string('skip-ad')}}</p>\n    </div>\n\n    <div class=\"{{css}}-companion-ad-container\" ba-show=\"{{companionadvisible}}\">\n        <div class=\"{{css}}-close-companion-ad\" ba-click=\"{{skip_companion_ad()}}\">X</div>\n        <img class=\"{{css}}-companion-ad\" src=\"\"/>\n    </div>\n\n    <div class=\"{{cssplayer}}-ad-controlbar\">\n\n        <div class=\"{{cssplayer}}-ad-time-container\">\n            <div class=\"{{cssplayer}}-ad-time-value\" title=\"{{string('elapsed-time')}}\">{{string('ad-will-end-after').replace('%s', formatTime(adduration))}}</div>\n        </div>\n\n        <div class=\"{{cssplayer}}-ad-volumebar\">\n            <div data-selector=\"button-volume-bar\" class=\"{{cssplayer}}-ad-volumebar-inner\"\n                 onmousedown=\"{{startUpdateAdVolume(domEvent)}}\"\n                 onmouseup=\"{{stopUpdateAdVolume(domEvent)}}\"\n                 onmouseleave=\"{{stopUpdateAdVolume(domEvent)}}\"\n                 onmousemove=\"{{progressUpdateAdVolume(domEvent)}}\">\n                <div class=\"{{cssplayer}}-ad-volumebar-position\" ba-styles=\"{{{width: Math.min(100, Math.round(advolume * 100)) + '%'}}}\">\n                    <div class=\"{{cssplayer}}-ad-volumebar-button\" title=\"{{string('volume-button')}}\"></div>\n                </div>\n            </div>\n        </div>\n\n        <div data-selector=\"button-icon-volume\" class=\"{{cssplayer}}-ad-rightbutton-container\" ba-click=\"{{toggle_ad_volume()}}\" title=\"{{string(advolume > 0 ? 'volume-mute' : 'volume-unmute')}}\">\n            <div class=\"{{cssplayer}}-ad-button-inner\">\n                <i class=\"{{css + '-icon-volume-' + (advolume >= 0.5 ? 'up' : (advolume > 0 ? 'down' : 'off')) }}\"></i>\n            </div>\n        </div>\n\n    </div>\n</div>\n",

                attrs: {
                    "css": "ba-adplayer",
                    "csscommon": "ba-commoncss",
                    "cssplayer": "ba-player",
                    "lefttillskip": -1,
                    "adduration": 0,
                    "duration": 0,
                    "advolume": 1.0,
                    "adplaying": false,
                    "companionadvisible": false,
                    "skipbuttonvisible": false,
                    "canskip": false,
                    "adskiped": false,
                    "disablepause": false
                },

                functions: {

                    formatTime: function(time) {
                        time = Math.max(time || 0, 1);
                        return TimeFormat.format(TimeFormat.ELAPSED_MINUTES_SECONDS, time * 1000);
                    },

                    startUpdateAdVolume: function(event) {
                        event[0].preventDefault();
                        this.set("_updateAdVolume", true);
                        this.call("progressUpdateAdVolume", event);
                    },

                    progressUpdateAdVolume: function(event) {
                        var ev = event[0];
                        ev.preventDefault();
                        if (!this.get("_updateAdVolume"))
                            return;
                        var clientX = ev.clientX;
                        var target = ev.currentTarget;
                        var offset = Dom.elementOffset(target);
                        var dimensions = Dom.elementDimensions(target);
                        this.set("advolume", (clientX - offset.left) / (dimensions.width || 1));
                        this.trigger("advolume", this.get("advolume"));
                    },

                    stopUpdateAdVolume: function(event) {
                        event[0].preventDefault();
                        this.set("_updateVolume", false);
                    },

                    play_ad: function() {
                        this.trigger("playad");
                    },

                    pause_ad: function() {
                        this.trigger("pausead");
                        this._pauseLinearAd();
                    },

                    toggle_ad_volume: function() {
                        if (this.get("advolume") > 0) {
                            this.__oldVolume = this.get("advolume");
                            this.set("advolume", 0);
                        } else
                            this.set("advolume", this.__oldVolume || 1);
                        this.trigger("advolume", this.get("advolume"));
                    },

                    skip_linear_ad: function() {
                        if (!this.get("canskip") && this._vast)
                            return;
                        this.set("adskiped", true);
                        this._vast.trigger("resumeplayer");
                    },

                    skip_companion_ad: function() {},

                    ad_clicked: function() {
                        if (this._vast.vastTracker) {
                            this._vast.vastTracker.clickAd();
                        }
                    }
                },

                create: function() {
                    this._vast.once("vastready", function() {
                        this._adBehaviour();
                    }, this);
                    this._vast.once("adcanceled", function() {
                        this._preroll._adSkipped();
                    }, this);
                },

                _adBehaviour: function() {
                    var _adElementHolder, _source, _duration, _volume;

                    _adElementHolder = this.activeElement().querySelector("video");
                    _duration = this._vast.vastTracker.assetDuration;
                    _source = this._vast.sources[0];

                    if (this._vast.skipAdAfter && this._vast.skipAdAfter > 0) {
                        this.set("skipbuttonvisible", true);
                        this.set("lefttillskip", this._vast.skipAdAfter);
                    }

                    this._attachLinearAd(_adElementHolder, _source, _duration);

                    this._vast.on("resumeplayer", function() {

                        this._stopLinearAd();

                        this._timer.weakDestroy();

                        if (this.get("adskiped")) {
                            this._vast.vastTracker.skipAd();
                            this._preroll._adSkipped();
                        } else {
                            this._vast.vastTracker.completeAd();
                            this._preroll._adFinished();
                        }

                    }, this);

                    this.on("pausead", function() {
                        if (!this._timer || !this.__adPlayer)
                            return;
                        this._timer.stop();
                        this.__adPlayer.pause();
                        this.set("adplaying", false);
                    });

                    this.on("playad", function() {
                        if (!this._timer || !this.__adPlayer)
                            return;
                        this._timer.start();
                        this.__adPlayer.play();
                        this.set("adplaying", true);
                    });

                    this.on("advolume", function() {
                        if (!this.__adPlayer)
                            return;
                        _volume = Math.min(1.0, this.get("advolume"));
                        this.__adPlayer.setVolume(_volume);
                        this.__adPlayer.setMuted(_volume <= 0.0);
                    });
                },

                _attachLinearAd: function(element, source, duration) {
                    VideoPlayerWrapper.create({
                        element: element,
                        source: source.src,
                        type: source.type
                    }).error(function(err) {
                        // trigger error related to loading video content
                        this._vast.trigger("resumeplayer");
                    }, this).success(function(instance) {
                        this.__adPlayer = instance;
                        duration = isNaN(duration) ? this.get("maxadduration") : duration;
                        this.set("adduration", duration);


                        this._playLinearAd();
                        this._timer = new Timers.Timer({
                            context: this,
                            fire: this._timerFire,
                            delay: 1000,
                            start: true
                        });
                    }, this);
                },

                _timerFire: function() {
                    var _timeLeft, _leftTillSkip;
                    _timeLeft = this.get("adduration");
                    _leftTillSkip = this.get("lefttillskip") || -1;

                    this.set("adduration", --_timeLeft);

                    if (_leftTillSkip >= 0) {
                        this.set("skipbuttonvisible", true);
                        this.set("lefttillskip", --_leftTillSkip);

                        if (_leftTillSkip === 0)
                            this.set("canskip", true);
                    }

                    this._vast.vastTracker.setAdProgress(_timeLeft);

                    if (this.get("adduration") === 0) {
                        this._vast.trigger("resumeplayer");
                    }
                },

                _playLinearAd: function() {
                    this.__adPlayer.play();
                    this.set("adplaying", true);
                    this._vast.trigger("adplaying");
                },

                _pauseLinearAd: function() {
                    if (!this.get("adplaying")) {
                        this.__adPlayer.pause();
                        this.set("adplaying", false);
                        this._vast.vastTracker.setAdPaused(true);
                        this._vast.trigger("adpaused");
                        this._vast.once("playad", function() {
                            this._vast.vastTracker.setAdPaused(false);
                        }, this);
                    }
                },

                _stopLinearAd: function() {
                    if (this.__adPlayer && this.get("adplaying")) {
                        this.__adPlayer.pause();
                        this.set("adplaying", false);
                    }
                },

                skip_ad: function() {
                    if (this.__adPlayer)
                        this.trigger("resumeplayer");
                }
            };
        })
        .register("ba-videoplayer-adslot")
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "cssplayer": function (obj) { with (obj) { return cssplayer; } }, "ad_clicked()": function (obj) { with (obj) { return ad_clicked(); } }, "skip_linear_ad()": function (obj) { with (obj) { return skip_linear_ad(); } }, "skipbuttonvisible": function (obj) { with (obj) { return skipbuttonvisible; } }, "lefttillskip > 0 ? string('can-skip-after').replace('%d', lefttillskip) : string('skip-ad')": function (obj) { with (obj) { return lefttillskip > 0 ? string('can-skip-after').replace('%d', lefttillskip) : string('skip-ad'); } }, "companionadvisible": function (obj) { with (obj) { return companionadvisible; } }, "skip_companion_ad()": function (obj) { with (obj) { return skip_companion_ad(); } }, "string('elapsed-time')": function (obj) { with (obj) { return string('elapsed-time'); } }, "string('ad-will-end-after').replace('%s', formatTime(adduration))": function (obj) { with (obj) { return string('ad-will-end-after').replace('%s', formatTime(adduration)); } }, "startUpdateAdVolume(domEvent)": function (obj) { with (obj) { return startUpdateAdVolume(domEvent); } }, "stopUpdateAdVolume(domEvent)": function (obj) { with (obj) { return stopUpdateAdVolume(domEvent); } }, "progressUpdateAdVolume(domEvent)": function (obj) { with (obj) { return progressUpdateAdVolume(domEvent); } }, "{width: Math.min(100, Math.round(advolume * 100)) + '%'}": function (obj) { with (obj) { return {width: Math.min(100, Math.round(advolume * 100)) + '%'}; } }, "string('volume-button')": function (obj) { with (obj) { return string('volume-button'); } }, "toggle_ad_volume()": function (obj) { with (obj) { return toggle_ad_volume(); } }, "string(advolume > 0 ? 'volume-mute' : 'volume-unmute')": function (obj) { with (obj) { return string(advolume > 0 ? 'volume-mute' : 'volume-unmute'); } }, "css + '-icon-volume-' + (advolume >= 0.5 ? 'up' : (advolume > 0 ? 'down' : 'off'))": function (obj) { with (obj) { return css + '-icon-volume-' + (advolume >= 0.5 ? 'up' : (advolume > 0 ? 'down' : 'off')); } }/**/ })
        .attachStringTable(Assets.strings)
        .addStrings({
            "elapsed-time": "Elasped time",
            "volume-button": "Set volume",
            "volume-mute": "Mute sound",
            "volume-unmute": "Unmute sound",
            "ad-will-end-after": "Ad will end after %s",
            "can-skip-after": "Skip after %d",
            "skip-ad": "Skip ad"
        });
});
Scoped.define("module:VideoPlayer.Dynamics.Controlbar", [
    "dynamics:Dynamic",
    "base:TimeFormat",
    "base:Comparators",
    "base:Objs",
    "browser:Dom",
    "module:Assets",
    "browser:Info",
    "media:Player.Support",
    "base:Async"
], [
    "dynamics:Partials.StylesPartial",
    "dynamics:Partials.ShowPartial",
    "dynamics:Partials.IfPartial",
    "dynamics:Partials.ClickPartial",
    "dynamics:Partials.RepeatElementPartial"
], function(Class, TimeFormat, Comparators, Objs, Dom, Assets, Info, PlayerSupport, Async, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div class=\"{{cssplayer}}-dashboard {{activitydelta > hidebarafter && hideoninactivity ? (cssplayer + '-dashboard-hidden') : ''}}\">\n\t<div tabindex=\"{{skipinitial ? 2 : 1}}\" data-selector=\"progress-bar-inner\" class=\"{{css}}-progressbar {{activitydelta < 2500 || ismobile ? '' : (css + '-progressbar-small')}} {{disableseeking ? cssplayer + '-disabled' : ''}}\"\n\t\t ba-hotkey:right=\"{{seek(position + skipseconds)}}\"\n\t\t ba-hotkey:left=\"{{seek(position - skipseconds)}}\"\n         ba-hotkey:alt+right=\"{{seek(position + skipseconds * 3)}}\"\n         ba-hotkey:alt+left=\"{{seek(position - skipseconds * 3)}}\"\n\t\t onmouseout=\"this.blur()\"\n\t     onmousedown=\"{{startUpdatePosition(domEvent)}}\"\n\t     onmouseup=\"{{stopUpdatePosition(domEvent)}}\"\n\t     onmouseleave=\"{{stopUpdatePosition(domEvent)}}\"\n\t     onmousemove=\"{{progressUpdatePosition(domEvent)}}\">\n\t\t<div class=\"{{css}}-progressbar-cache\" ba-styles=\"{{{width: Math.round(duration ? cached / duration * 100 : 0) + '%'}}}\"></div>\n\t\t<div class=\"{{css}}-progressbar-position\" ba-styles=\"{{{width: Math.round(duration ? position / duration * 100 : 0) + '%'}}}\" title=\"{{string('video-progress')}}\">\n\t\t\t<div class=\"{{css}}-progressbar-button\"></div>\n\t\t</div>\n\t</div>\n\n\t<div class=\"{{css}}-backbar\"></div>\n\n\t<div class=\"{{css}}-controlbar\">\n\n        <div tabindex=\"0\" data-selector=\"submit-video-button\"\n\t\t\t ba-hotkey:space^enter=\"{{submit()}}\" onmouseout=\"this.blur()\"\n\t\t\t class=\"{{css}}-leftbutton-container\"\n\t\t\t ba-if=\"{{submittable}}\" ba-click=\"{{submit()}}\">\n            <div class=\"{{css}}-button-inner\">\n                {{string('submit-video')}}\n            </div>\n        </div>\n\n        <div tabindex=\"0\" data-selector=\"button-icon-ccw\"\n\t\t\t ba-hotkey:space^enter=\"{{rerecord()}}\" onmouseout=\"this.blur()\"\n\t\t\t class=\"{{css}}-leftbutton-container\" ba-if=\"{{rerecordable}}\"\n\t\t\t ba-click=\"{{rerecord()}}\" title=\"{{string('rerecord-video')}}\"\n\t\t>\n            <div class=\"{{css}}-button-inner\">\n                <i class=\"{{csscommon}}-icon-ccw\"></i>\n            </div>\n        </div>\n\n        <div tabindex=\"{{skipinitial ? 0 : 2}}\" data-selector=\"button-icon-play\"\n\t\t\t ba-hotkey:space^enter=\"{{toggle_player()}}\" onmouseout=\"this.blur()\"\n\t\t\t class=\"{{css}}-leftbutton-container\" title=\"{{string('play-video')}}\"\n\t\t\t onkeydown=\"{{tab_index_move(domEvent, null, 'button-icon-pause')}}\" ba-if=\"{{!playing}}\" ba-click=\"{{play()}}\"\n\t\t>\n            <div class=\"{{css}}-button-inner\">\n                <i class=\"{{csscommon}}-icon-play\"></i>\n            </div>\n        </div>\n\n        <div tabindex=\"{{skipinitial ? 0 : 2}}\" data-selector=\"button-icon-pause\"\n\t\t\t ba-hotkey:space^enter=\"{{toggle_player()}}\" onmouseout=\"this.blur()\"\n\t\t\t class=\"{{css}}-leftbutton-container {{disablepause ? cssplayer + '-disabled' : ''}}\"\n\t\t\t onkeydown=\"{{tab_index_move(domEvent, null, 'button-icon-play')}}\" ba-if=\"{{playing}}\" ba-click=\"{{pause()}}\"\n\t\t\t title=\"{{disablepause ? string('pause-video-disabled') : string('pause-video')}}\"\n\t\t>\n            <div class=\"{{css}}-button-inner\">\n                <i class=\"{{csscommon}}-icon-pause\"></i>\n            </div>\n        </div>\n\n\t\t<div class=\"{{css}}-time-container\">\n\t\t\t<div class=\"{{css}}-time-value\" title=\"{{string('elapsed-time')}}\">{{formatTime(position)}}</div>\n\t\t\t<div class=\"{{css}}-time-sep\">/</div>\n\t\t\t<div class=\"{{css}}-time-value\" title=\"{{string('total-time')}}\">{{formatTime(duration || position)}}</div>\n\t\t</div>\n\n\t\t<div data-selector=\"video-title-block\" class=\"{{css}}-title-container\" ba-if=\"{{title}}\">\n\t\t\t<p class=\"{{css}}-title\">\n\t\t\t\t{{title}}\n\t\t\t</p>\n\t\t</div>\n\n\t\t<div tabindex=\"11\" data-selector=\"button-icon-settings\"\n\t\t\t ba-hotkey:space^enter=\"{{toggle_settings()}}\" onmouseout=\"this.blur()\"\n\t\t\t class=\"{{css}}-rightbutton-container {{cssplayer}}-settings-{{settingsoptionsvisible ? 'visible' : 'hidden'}}\"\n\t\t\t onkeydown=\"{{tab_index_move(domEvent)}}\"\n\t\t\t ba-if=\"{{settings}}\" ba-click=\"{{toggle_settings()}}\"\n\t\t\t title=\"{{string('settings')}}\">\n\t\t\t<div class=\"{{css}}-button-inner {{css}}-settings-button\">\n\t\t\t\t<i class=\"{{csscommon}}-icon-cog\"></i>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div tabindex=\"10\" data-selector=\"cc-button-container\"\n\t\t\t ba-hotkey:space^enter=\"{{toggle_tracks()}}\" onmouseout=\"this.blur()\"\n\t\t\t ba-if=\"{{(tracktags.length > 0 && tracktagssupport) || allowtexttrackupload}}\"\n\t\t\t class=\"{{css}}-rightbutton-container  {{cssplayer}}-cc-{{tracktextvisible ? 'active' : 'inactive'}}\"\n\t\t\t title=\"{{ tracktextvisible ? string('close-tracks') : string('show-tracks')}}\"\n\t\t\t ba-click=\"{{toggle_tracks()}}\"\n\t\t\t onmouseover=\"{{hover_cc(true)}}\"\n\t\t\t onmouseleave=\"{{hover_cc(false)}}\"\n\t\t>\n\t\t\t<div class=\"{{css}}-button-inner\">\n\t\t\t\t<i class=\"{{csscommon}}-icon-subtitle\"></i>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div tabindex=9 data-selector=\"button-icon-resize-full\"\n\t\t\t ba-hotkey:space^enter=\"{{toggle_fullscreen()}}\" onmouseout=\"this.blur()\"\n\t\t\t class=\"{{css}}-rightbutton-container\"\n\t\t\t onkeydown=\"{{tab_index_move(domEvent)}}\" ba-if=\"{{fullscreen}}\"\n\t\t\t ba-click=\"{{toggle_fullscreen()}}\" title=\"{{ fullscreened ? string('exit-fullscreen-video') : string('fullscreen-video') }}\">\n\t\t\t<div class=\"{{css}}-button-inner\">\n\t\t\t\t<i class=\"{{csscommon}}-icon-resize-{{fullscreened ? 'small' : 'full'}}\"></i>\n\t\t\t</div>\n\t\t</div>\n\n        <div tabindex=\"7\" data-selector=\"button-airplay\"\n\t\t\t ba-hotkey:space^enter=\"{{show_airplay_devices()}}\" onmouseout=\"this.blur()\"\n\t\t\t class=\"{{css}}-rightbutton-container\"\n\t\t\t ba-show=\"{{airplaybuttonvisible}}\" ba-click=\"{{show_airplay_devices()}}\">\n            <div class=\"{{css}}-airplay-container\">\n                <svg width=\"16px\" height=\"11px\" viewBox=\"0 0 16 11\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n                    \n                    <title>Airplay</title>\n                    <desc>Airplay icon.</desc>\n                    <defs></defs>\n                    <g stroke=\"none\" stroke-width=\"1\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n                        <path d=\"M4,11 L12,11 L8,7 L4,11 Z M14.5454545,0 L1.45454545,0 C0.654545455,0 0,0.5625 0,1.25 L0,8.75 C0,9.4375 0.654545455,10 1.45454545,10 L4.36363636,10 L4.36363636,8.75 L1.45454545,8.75 L1.45454545,1.25 L14.5454545,1.25 L14.5454545,8.75 L11.6363636,8.75 L11.6363636,10 L14.5454545,10 C15.3454545,10 16,9.4375 16,8.75 L16,1.25 C16,0.5625 15.3454545,0 14.5454545,0 L14.5454545,0 Z\" sketch:type=\"MSShapeGroup\"></path>\n                    </g>\n                </svg>\n            </div>\n        </div>\n\n        <div data-selector=\"button-chromecast\" class=\"{{css}}-rightbutton-container {{css}}-cast-button-container\" ba-show=\"{{castbuttonvisble}}\">\n            <button tabindex=\"0\" class=\"{{css}}-gcast-button\" is=\"google-cast-button\"></button>\n        </div>\n\n        <div tabindex=\"6\" data-selector=\"button-stream-label\"\n\t\t\t ba-hotkey:space^enter=\"{{toggle_stream()}}\" onmouseout=\"this.blur()\"\n\t\t\t class=\"{{css}}-rightbutton-container\"\n\t\t\t ba-if=\"{{streams.length > 1 && currentstream}}\" ba-click=\"{{toggle_stream()}}\"\n\t\t\t title=\"{{string('change-resolution')}}\"\n\t\t>\n\t\t\t<div class=\"{{css}}-button-inner\">\n\t\t\t\t<span class=\"{{css}}-button-text\">{{currentstream_label}}</span>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"{{css}}-volumebar\">\n\t\t\t<div tabindex=\"5\" data-selector=\"button-volume-bar\"\n\t\t\t\t ba-hotkey:right=\"{{set_volume(volume + 0.1)}}\" ba-hotkey:left=\"{{set_volume(volume - 0.1)}}\"\n\t\t\t\t ba-hotkey:up=\"{{set_volume(1)}}\" ba-hotkey:down=\"{{set_volume(0)}}\"\n\t\t\t\t onmouseout=\"this.blur()\"\n\t\t\t\t class=\"{{css}}-volumebar-inner\"\n\t\t\t     onmousedown=\"{{startUpdateVolume(domEvent)}}\"\n                 onmouseup=\"{{stopUpdateVolume(domEvent)}}\"\n                 onmouseleave=\"{{stopUpdateVolume(domEvent)}}\"\n                 onmousemove=\"{{progressUpdateVolume(domEvent)}}\"\n\t\t\t>\n\t\t\t\t<div class=\"{{css}}-volumebar-position\" ba-styles=\"{{{width: Math.min(100, Math.round(volume * 100)) + '%'}}}\">\n\t\t\t\t    <div class=\"{{css}}-volumebar-button\" title=\"{{string('volume-button')}}\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div tabindex=\"4\" data-selector=\"button-icon-volume\"\n\t\t\t ba-hotkey:space^enter=\"{{toggle_volume()}}\" onmouseout=\"this.blur()\"\n\t\t\t class=\"{{css}}-rightbutton-container\"\n\t\t\t ba-click=\"{{toggle_volume()}}\" title=\"{{string(volume > 0 ? 'volume-mute' : 'volume-unmute')}}\">\n\t\t\t<div class=\"{{css}}-button-inner\">\n\t\t\t\t<i class=\"{{csscommon + '-icon-volume-' + (volume >= 0.5 ? 'up' : (volume > 0 ? 'down' : 'off')) }}\"></i>\n\t\t\t</div>\n\t\t</div>\n\n\t</div>\n</div>\n",

                attrs: {
                    "css": "ba-videoplayer",
                    "csscommon": "ba-commoncss",
                    "cssplayer": "ba-player",
                    "duration": 0,
                    "position": 0,
                    "cached": 0,
                    "volume": 1.0,
                    "expandedprogress": true,
                    "playing": false,
                    "rerecordable": false,
                    "submittable": false,
                    "streams": [],
                    "currentstream": null,
                    "fullscreen": true,
                    "fullscreened": false,
                    "activitydelta": 0,
                    "hidebarafter": 5000,
                    "preventinteraction": false,
                    "title": "",
                    "settings": false,
                    "hoveredblock": false, // Set true when mouse hovered
                    "allowtexttrackupload": false,
                    "tracktextvisible": false // Are subtitles visible?
                },

                computed: {
                    "currentstream_label:currentstream": function() {
                        var cs = this.get("currentstream");
                        return cs ? (cs.label ? cs.label : PlayerSupport.resolutionToLabel(cs.width, cs.height)) : "";
                    }
                },

                functions: {

                    formatTime: function(time) {
                        time = Math.max(time || 0, 1);
                        return TimeFormat.format(TimeFormat.ELAPSED_MINUTES_SECONDS, time * 1000);
                    },

                    startUpdatePosition: function(event) {
                        if (this.get("disableseeking")) return;
                        event[0].preventDefault();
                        this.set("_updatePosition", true);
                        this.call("progressUpdatePosition", event);
                    },

                    progressUpdatePosition: function(event) {
                        var ev = event[0];
                        ev.preventDefault();
                        if (!this.get("_updatePosition"))
                            return;
                        var clientX = ev.clientX;
                        var target = ev.currentTarget;
                        var offset = Dom.elementOffset(target);
                        var dimensions = Dom.elementDimensions(target);
                        this.set("position", this.get("duration") * (clientX - offset.left) / (dimensions.width || 1));

                        var player = this.__parent.player;
                        if (player._broadcastingState.googleCastConnected) {
                            player.trigger('google-cast-seeking', this.get("position"));
                            return;
                        }

                        this.trigger("position", this.get("position"));
                    },

                    stopUpdatePosition: function(event) {
                        event[0].preventDefault();
                        this.set("_updatePosition", false);
                    },

                    startUpdateVolume: function(event) {
                        event[0].preventDefault();
                        this.set("_updateVolume", true);
                        this.call("progressUpdateVolume", event);
                    },

                    progressUpdateVolume: function(event) {
                        var ev = event[0];
                        ev.preventDefault();
                        if (!this.get("_updateVolume"))
                            return;
                        var clientX = ev.clientX;
                        var target = ev.currentTarget;
                        var offset = Dom.elementOffset(target);
                        var dimensions = Dom.elementDimensions(target);
                        this.set("volume", (clientX - offset.left) / (dimensions.width || 1));
                        this.trigger("volume", this.get("volume"));
                    },

                    stopUpdateVolume: function(event) {
                        event[0].preventDefault();
                        this.set("_updateVolume", false);
                    },

                    startVerticallyUpdateVolume: function(event) {
                        event[0].preventDefault();
                        this.set("_updateVolume", true);
                        this.call("progressVerticallyUpdateVolume", event);
                    },

                    progressVerticallyUpdateVolume: function(event) {
                        var ev = event[0];
                        ev.preventDefault();
                        if (!this.get("_updateVolume"))
                            return;
                        var pageY = ev.pageY;
                        var target = ev.currentTarget;
                        var offset = Dom.elementOffset(target);
                        var dimensions = Dom.elementDimensions(target);
                        this.set("volume", 1 - (pageY - offset.top) / dimensions.height);
                        this.trigger("volume", this.get("volume"));
                    },

                    stopVerticallyUpdateVolume: function(event) {
                        event[0].preventDefault();
                        this.set("_updateVolume", false);
                    },


                    play: function() {
                        this.trigger("play");
                    },

                    pause: function() {
                        this.trigger("pause");
                    },

                    toggle_player: function() {
                        this.trigger("toggle_player");
                    },

                    toggle_volume: function() {
                        if (this.get("volume") > 0 && !this.parent().get("volumeafterinteraction")) {
                            this.__oldVolume = this.get("volume");
                            this.set("volume", 0);
                        } else {
                            this.set("volume", this.__oldVolume || 1);

                            if (this.parent().get("volumeafterinteraction"))
                                this.parent().set("volumeafterinteraction", false);
                        }

                        this.trigger("volume", this.get("volume"));
                    },

                    toggle_fullscreen: function() {
                        this.trigger("fullscreen");
                    },

                    rerecord: function() {
                        this.trigger("rerecord");
                    },

                    seek: function(position) {
                        this.trigger("seek", position);
                    },

                    set_volume: function(volume) {
                        this.trigger("set_volume", volume);
                    },

                    submit: function() {
                        this.set("submittable", false);
                        this.set("rerecordable", false);
                        this.trigger("submit");
                    },

                    toggle_stream: function() {
                        var streams = this.get("streams");
                        var current = streams.length - 1;
                        streams.forEach(function(stream, i) {
                            if (Comparators.deepEqual(stream, this.get("currentstream")))
                                current = i;
                        }, this);
                        this.set("currentstream", streams[(current + 1) % streams.length]);
                    },

                    show_airplay_devices: function() {
                        var dynamic = this.__parent;
                        if (dynamic.player._broadcastingState.airplayConnected) {
                            dynamic._broadcasting.lookForAirplayDevices(dynamic.player._element);
                        }
                    },

                    // Start ro stop showing CC content
                    toggle_tracks: function() {
                        return this.parent().toggleTrackTags(!this.get('tracktextvisible'));
                    },

                    // Hover on CC button in controller
                    hover_cc: function(hover) {
                        // Not show CC on hover during settings block is open
                        // Reason why use parent not local settingsoptionsvisible,
                        // is that settings model also has to be aware it's state. So we need as a global variable
                        if (this.parent().get("settingsoptionsvisible")) return;
                        Async.eventually(function() {
                            this.parent().set("tracksshowselection", hover);
                        }, this, 300);
                    },

                    // Move between elements which has tabIndex attribute
                    tab_index_move: function(ev, nextSelector, focusingSelector) {
                        this.trigger("tab_index_move", ev[0], nextSelector, focusingSelector);
                    },

                    // Hover on block
                    hover_block: function(hover) {
                        Async.eventually(function() {
                            this.parent().set("hoveredblock", hover);
                        }, this, 300);
                    },

                    toggle_settings: function() {
                        this.parent().set("settingsoptionsvisible", !this.parent().get("settingsoptionsvisible"));
                        this.trigger("toggle_settings");
                    }
                },

                create: function() {
                    var dynamic = this.__parent;
                    this.set("ismobile", Info.isMobile());
                    if (dynamic.get("showsettings")) {
                        this.set("isflash", dynamic.get('forceflash') && !dynamic.get('noflash'));
                        Objs.iter(dynamic.get('settingsoptions'), function(setting) {
                            if (this.get())
                                if (this.get("isflash")) {
                                    if (setting.flashSupport)
                                        this.set("settings", true);
                                } else if (this.get("ismobile")) {
                                if (setting.mobileSupport)
                                    this.set("settings", true);
                            } else
                                this.set("settings", true);
                        }, this);
                    }
                }
            };
        })
        .register("ba-videoplayer-controlbar")
        .registerFunctions({ /**/"cssplayer": function (obj) { with (obj) { return cssplayer; } }, "activitydelta > hidebarafter && hideoninactivity ? (cssplayer + '-dashboard-hidden') : ''": function (obj) { with (obj) { return activitydelta > hidebarafter && hideoninactivity ? (cssplayer + '-dashboard-hidden') : ''; } }, "skipinitial ? 2 : 1": function (obj) { with (obj) { return skipinitial ? 2 : 1; } }, "css": function (obj) { with (obj) { return css; } }, "activitydelta < 2500 || ismobile ? '' : (css + '-progressbar-small')": function (obj) { with (obj) { return activitydelta < 2500 || ismobile ? '' : (css + '-progressbar-small'); } }, "disableseeking ? cssplayer + '-disabled' : ''": function (obj) { with (obj) { return disableseeking ? cssplayer + '-disabled' : ''; } }, "seek(position + skipseconds)": function (obj) { with (obj) { return seek(position + skipseconds); } }, "seek(position - skipseconds)": function (obj) { with (obj) { return seek(position - skipseconds); } }, "seek(position + skipseconds * 3)": function (obj) { with (obj) { return seek(position + skipseconds * 3); } }, "seek(position - skipseconds * 3)": function (obj) { with (obj) { return seek(position - skipseconds * 3); } }, "startUpdatePosition(domEvent)": function (obj) { with (obj) { return startUpdatePosition(domEvent); } }, "stopUpdatePosition(domEvent)": function (obj) { with (obj) { return stopUpdatePosition(domEvent); } }, "progressUpdatePosition(domEvent)": function (obj) { with (obj) { return progressUpdatePosition(domEvent); } }, "{width: Math.round(duration ? cached / duration * 100 : 0) + '%'}": function (obj) { with (obj) { return {width: Math.round(duration ? cached / duration * 100 : 0) + '%'}; } }, "{width: Math.round(duration ? position / duration * 100 : 0) + '%'}": function (obj) { with (obj) { return {width: Math.round(duration ? position / duration * 100 : 0) + '%'}; } }, "string('video-progress')": function (obj) { with (obj) { return string('video-progress'); } }, "submit()": function (obj) { with (obj) { return submit(); } }, "submittable": function (obj) { with (obj) { return submittable; } }, "string('submit-video')": function (obj) { with (obj) { return string('submit-video'); } }, "rerecord()": function (obj) { with (obj) { return rerecord(); } }, "rerecordable": function (obj) { with (obj) { return rerecordable; } }, "string('rerecord-video')": function (obj) { with (obj) { return string('rerecord-video'); } }, "csscommon": function (obj) { with (obj) { return csscommon; } }, "skipinitial ? 0 : 2": function (obj) { with (obj) { return skipinitial ? 0 : 2; } }, "toggle_player()": function (obj) { with (obj) { return toggle_player(); } }, "string('play-video')": function (obj) { with (obj) { return string('play-video'); } }, "tab_index_move(domEvent, null, 'button-icon-pause')": function (obj) { with (obj) { return tab_index_move(domEvent, null, 'button-icon-pause'); } }, "!playing": function (obj) { with (obj) { return !playing; } }, "play()": function (obj) { with (obj) { return play(); } }, "disablepause ? cssplayer + '-disabled' : ''": function (obj) { with (obj) { return disablepause ? cssplayer + '-disabled' : ''; } }, "tab_index_move(domEvent, null, 'button-icon-play')": function (obj) { with (obj) { return tab_index_move(domEvent, null, 'button-icon-play'); } }, "playing": function (obj) { with (obj) { return playing; } }, "pause()": function (obj) { with (obj) { return pause(); } }, "disablepause ? string('pause-video-disabled') : string('pause-video')": function (obj) { with (obj) { return disablepause ? string('pause-video-disabled') : string('pause-video'); } }, "string('elapsed-time')": function (obj) { with (obj) { return string('elapsed-time'); } }, "formatTime(position)": function (obj) { with (obj) { return formatTime(position); } }, "string('total-time')": function (obj) { with (obj) { return string('total-time'); } }, "formatTime(duration || position)": function (obj) { with (obj) { return formatTime(duration || position); } }, "title": function (obj) { with (obj) { return title; } }, "toggle_settings()": function (obj) { with (obj) { return toggle_settings(); } }, "settingsoptionsvisible ? 'visible' : 'hidden'": function (obj) { with (obj) { return settingsoptionsvisible ? 'visible' : 'hidden'; } }, "tab_index_move(domEvent)": function (obj) { with (obj) { return tab_index_move(domEvent); } }, "settings": function (obj) { with (obj) { return settings; } }, "string('settings')": function (obj) { with (obj) { return string('settings'); } }, "toggle_tracks()": function (obj) { with (obj) { return toggle_tracks(); } }, "(tracktags.length > 0 && tracktagssupport) || allowtexttrackupload": function (obj) { with (obj) { return (tracktags.length > 0 && tracktagssupport) || allowtexttrackupload; } }, "tracktextvisible ? 'active' : 'inactive'": function (obj) { with (obj) { return tracktextvisible ? 'active' : 'inactive'; } }, "tracktextvisible ? string('close-tracks') : string('show-tracks')": function (obj) { with (obj) { return tracktextvisible ? string('close-tracks') : string('show-tracks'); } }, "hover_cc(true)": function (obj) { with (obj) { return hover_cc(true); } }, "hover_cc(false)": function (obj) { with (obj) { return hover_cc(false); } }, "toggle_fullscreen()": function (obj) { with (obj) { return toggle_fullscreen(); } }, "fullscreen": function (obj) { with (obj) { return fullscreen; } }, "fullscreened ? string('exit-fullscreen-video') : string('fullscreen-video')": function (obj) { with (obj) { return fullscreened ? string('exit-fullscreen-video') : string('fullscreen-video'); } }, "fullscreened ? 'small' : 'full'": function (obj) { with (obj) { return fullscreened ? 'small' : 'full'; } }, "show_airplay_devices()": function (obj) { with (obj) { return show_airplay_devices(); } }, "airplaybuttonvisible": function (obj) { with (obj) { return airplaybuttonvisible; } }, "castbuttonvisble": function (obj) { with (obj) { return castbuttonvisble; } }, "toggle_stream()": function (obj) { with (obj) { return toggle_stream(); } }, "streams.length > 1 && currentstream": function (obj) { with (obj) { return streams.length > 1 && currentstream; } }, "string('change-resolution')": function (obj) { with (obj) { return string('change-resolution'); } }, "currentstream_label": function (obj) { with (obj) { return currentstream_label; } }, "set_volume(volume + 0.1)": function (obj) { with (obj) { return set_volume(volume + 0.1); } }, "set_volume(volume - 0.1)": function (obj) { with (obj) { return set_volume(volume - 0.1); } }, "set_volume(1)": function (obj) { with (obj) { return set_volume(1); } }, "set_volume(0)": function (obj) { with (obj) { return set_volume(0); } }, "startUpdateVolume(domEvent)": function (obj) { with (obj) { return startUpdateVolume(domEvent); } }, "stopUpdateVolume(domEvent)": function (obj) { with (obj) { return stopUpdateVolume(domEvent); } }, "progressUpdateVolume(domEvent)": function (obj) { with (obj) { return progressUpdateVolume(domEvent); } }, "{width: Math.min(100, Math.round(volume * 100)) + '%'}": function (obj) { with (obj) { return {width: Math.min(100, Math.round(volume * 100)) + '%'}; } }, "string('volume-button')": function (obj) { with (obj) { return string('volume-button'); } }, "toggle_volume()": function (obj) { with (obj) { return toggle_volume(); } }, "string(volume > 0 ? 'volume-mute' : 'volume-unmute')": function (obj) { with (obj) { return string(volume > 0 ? 'volume-mute' : 'volume-unmute'); } }, "csscommon + '-icon-volume-' + (volume >= 0.5 ? 'up' : (volume > 0 ? 'down' : 'off'))": function (obj) { with (obj) { return csscommon + '-icon-volume-' + (volume >= 0.5 ? 'up' : (volume > 0 ? 'down' : 'off')); } }/**/ })
        .attachStringTable(Assets.strings)
        .addStrings({
            "video-progress": "Progress",
            "rerecord-video": "Redo?",
            "submit-video": "Confirm",
            "play-video": "Play",
            "pause-video": "Pause",
            "pause-video-disabled": "Pause not supported",
            "elapsed-time": "Elasped time",
            "total-time": "Total length of",
            "fullscreen-video": "Enter fullscreen",
            "volume-button": "Set volume",
            "volume-mute": "Mute sound",
            "volume-unmute": "Unmute sound",
            "change-resolution": "Change resolution",
            "exit-fullscreen-video": "Exit fullscreen",
            "close-tracks": "Close CC",
            "show-tracks": "Show CC",
            "player-speed": "Player speed",
            "settings": "Settings"
        });
});
Scoped.define("module:VideoPlayer.Dynamics.Loader", [
    "dynamics:Dynamic",
    "module:Assets"
], function(Class, Assets, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div class=\"{{cssplayer}}-loader-container\">\n    <div data-selector=\"loader-block\" class=\"{{cssplayer}}-loader-loader\" title=\"{{string('tooltip')}}\">\n    </div>\n</div>\n",

                attrs: {
                    "css": "ba-videoplayer",
                    "csscommon": "ba-commoncss",
                    "cssplayer": "ba-player"
                }

            };
        })
        .register("ba-videoplayer-loader")
        .registerFunctions({ /**/"cssplayer": function (obj) { with (obj) { return cssplayer; } }, "string('tooltip')": function (obj) { with (obj) { return string('tooltip'); } }/**/ })
        .attachStringTable(Assets.strings)
        .addStrings({
            "tooltip": "Loading..."
        });
});
Scoped.define("module:VideoPlayer.Dynamics.Message", [
    "dynamics:Dynamic"
], [
    "dynamics:Partials.ClickPartial"
], function(Class, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div class=\"{{css}}-message-container\" ba-click=\"{{click()}}\">\n    <div data-selector=\"message-block\" class='{{css}}-message-message'>\n        {{message}}\n    </div>\n</div>\n",

                attrs: {
                    "css": "ba-videoplayer",
                    "csscommon": "ba-commoncss",
                    "cssplayer": "ba-player",
                    "message": ''
                },

                functions: {

                    click: function() {
                        this.trigger("click");
                    }

                }

            };
        })
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "click()": function (obj) { with (obj) { return click(); } }, "message": function (obj) { with (obj) { return message; } }/**/ })
        .register("ba-videoplayer-message");
});
Scoped.define("module:VideoPlayer.Dynamics.Playbutton", [
    "dynamics:Dynamic",
    "module:Assets"
], [
    "dynamics:Partials.ClickPartial"
], function(Class, Assets, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div tabindex=\"0\" data-selector=\"play-button\"\n     ba-hotkey:space^enter=\"{{play()}}\" onmouseout=\"this.blur()\"\n     onkeydown=\"{{tab_index_move(domEvent, null, 'player-toggle-overlay')}}\"\n     class=\"{{css}}-playbutton-container\" ba-click=\"{{play()}}\" title=\"{{string('tooltip')}}\"\n>\n\t<div class=\"{{css}}-playbutton-button\"></div>\n</div>\n\n<div class=\"{{css}}-rerecord-bar\" ba-if=\"{{rerecordable || submittable}}\">\n\t<div class=\"{{css}}-rerecord-backbar\"></div>\n\t<div class=\"{{css}}-rerecord-frontbar\">\n        <div class=\"{{css}}-rerecord-button-container\" ba-if=\"{{submittable}}\">\n            <div tabindex=\"0\" data-selector=\"player-submit-button\"\n                 ba-hotkey:space^enter=\"{{submit()}}\" onmouseout=\"this.blur()\"\n                 class=\"{{css}}-rerecord-button\" onclick=\"{{submit()}}\">\n                {{string('submit-video')}}\n            </div>\n        </div>\n        <div class=\"{{css}}-rerecord-button-container\" ba-if=\"{{rerecordable}}\">\n        \t<div tabindex=\"0\" data-selector=\"player-rerecord-button\"\n                 ba-hotkey:space^enter=\"{{rerecord()}}\" onmouseout=\"this.blur()\"\n                 class=\"{{css}}-rerecord-button\" onclick=\"{{rerecord()}}\">\n                <i class=\"{{css}}-icon-rerecord\"></i>\n        \t</div>\n        </div>\n\t</div>\n</div>\n",

                attrs: {
                    "css": "ba-videoplayer",
                    "csstheme": "ba-videoplayer",
                    "csscommon": "ba-commoncss",
                    "cssplayer": "ba-player",
                    "rerecordable": false,
                    "submittable": false
                },

                functions: {

                    play: function() {
                        this.trigger("play");
                    },

                    submit: function() {
                        this.set("submittable", false);
                        this.set("rerecordable", false);
                        this.trigger("submit");
                    },

                    rerecord: function() {
                        this.trigger("rerecord");
                    },

                    tab_index_move: function(ev, nextSelector, focusingSelector) {
                        this.trigger("tab_index_move", ev[0], nextSelector, focusingSelector);
                    }
                }
            };
        })
        .register("ba-videoplayer-playbutton")
        .registerFunctions({ /**/"play()": function (obj) { with (obj) { return play(); } }, "tab_index_move(domEvent, null, 'player-toggle-overlay')": function (obj) { with (obj) { return tab_index_move(domEvent, null, 'player-toggle-overlay'); } }, "css": function (obj) { with (obj) { return css; } }, "string('tooltip')": function (obj) { with (obj) { return string('tooltip'); } }, "rerecordable || submittable": function (obj) { with (obj) { return rerecordable || submittable; } }, "submittable": function (obj) { with (obj) { return submittable; } }, "submit()": function (obj) { with (obj) { return submit(); } }, "string('submit-video')": function (obj) { with (obj) { return string('submit-video'); } }, "rerecordable": function (obj) { with (obj) { return rerecordable; } }, "rerecord()": function (obj) { with (obj) { return rerecord(); } }/**/ })
        .attachStringTable(Assets.strings)
        .addStrings({
            "tooltip": "Click to play.",
            "rerecord": "Redo",
            "submit-video": "Confirm video"
        });
});
Scoped.define("module:VideoPlayer.Dynamics.Player", [
    "dynamics:Dynamic",
    "module:Assets",
    "browser:Info",
    "browser:Dom",
    "media:Player.VideoPlayerWrapper",
    "media:Player.Broadcasting",
    "base:Types",
    "base:Objs",
    "base:Strings",
    "base:Time",
    "base:Timers",
    "base:TimeFormat",
    "base:States.Host",
    "base:Classes.ClassRegistry",
    "base:Async",
    "module:Settings",
    "module:VideoPlayer.Dynamics.PlayerStates.Initial",
    "module:VideoPlayer.Dynamics.PlayerStates",
    "module:Ads.AbstractVideoAdProvider",
    "browser:Events"
], [
    "module:VideoPlayer.Dynamics.Playbutton",
    "module:VideoPlayer.Dynamics.Message",
    "module:VideoPlayer.Dynamics.Loader",
    "module:VideoPlayer.Dynamics.Share",
    "module:VideoPlayer.Dynamics.Controlbar",
    "module:VideoPlayer.Dynamics.Tracks",
    "dynamics:Partials.EventPartial",
    "dynamics:Partials.OnPartial",
    "dynamics:Partials.TogglePartial",
    "dynamics:Partials.StylesPartial",
    "dynamics:Partials.TemplatePartial",
    "dynamics:Partials.HotkeyPartial"
], function(Class, Assets, Info, Dom, VideoPlayerWrapper, Broadcasting, Types, Objs, Strings, Time, Timers, TimeFormat, Host, ClassRegistry, Async, Settings, InitialState, PlayerStates, AdProvider, DomEvents, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "<div itemscope itemtype=\"http://schema.org/VideoObject\"\n     class=\"{{css}}-container {{cssplayer}}-size-{{csssize}} {{iecss}}-{{ie8 ? 'ie8' : 'noie8'}} {{csstheme}}\n     {{cssplayer}}-{{ fullscreened ? 'fullscreen' : 'normal' }}-view {{cssplayer}}-{{ firefox ? 'firefox' : 'common'}}-browser\n     {{cssplayer}}-{{themecolor}}-color\"\n     ba-on:mousemove=\"{{user_activity()}}\"\n     ba-on:mousedown=\"{{user_activity(true)}}\"\n     ba-on:touchstart=\"{{user_activity(true)}}\"\n     ba-styles=\"{{widthHeightStyles}}\"\n>\n    <div ba-show=\"{{videoelement_active}}\">\n        <video tabindex=\"-1\" class=\"{{css}}-video\" data-video=\"video\"\n               ba-toggle:playsinline=\"{{!playfullscreenonmobile}}\"\n        ></video>\n    </div>\n    <div ba-show=\"{{imageelement_active && !videoelement_active}}\">\n        <img tabindex=\"-1\" class=\"{{css}}-video\" data-image=\"image\" />\n    </div>\n    <div class=\"{{css}}-overlay\">\n        <div tabindex=\"-1\" class=\"{{css}}-player-toggle-overlay\" data-selector=\"player-toggle-overlay\"\n             ba-hotkey:right=\"{{seek(position + skipseconds)}}\" ba-hotkey:left=\"{{seek(position - skipseconds)}}\"\n             ba-hotkey:alt+right=\"{{seek(position + skipseconds * 3)}}\" ba-hotkey:alt+left=\"{{seek(position - skipseconds * 3)}}\"\n             ba-hotkey:up=\"{{set_volume(volume + 0.1)}}\" ba-hotkey:down=\"{{set_volume(volume - 0.1)}}\"\n             ba-hotkey:space^enter=\"{{toggle_player()}}\"\n             ba-on:click=\"{{toggle_player()}}\"\n        >\n            <div class=\"{{css}}-player-static-duration\" ba-if=\"{{!playing && totalduration && !controlbar_active}}\">\n                <span>{{formatTime(totalduration)}}</span>\n            </div>\n        </div>\n        <ba-{{dyncontrolbar}}\n            ba-css=\"{{csscontrolbar || css}}\"\n            ba-cssplayer=\"{{cssplayer || css}}\"\n            ba-csstheme=\"{{csstheme || css}}\"\n            ba-themecolor=\"{{themecolor}}\"\n            ba-template=\"{{tmplcontrolbar}}\"\n            ba-show=\"{{controlbar_active}}\"\n            ba-playing=\"{{playing}}\"\n            ba-playwhenvisible=\"{{playwhenvisible}}\"\n            ba-playerspeeds=\"{{playerspeeds}}\"\n            ba-playercurrentspeed=\"{{playercurrentspeed}}\"\n            ba-airplay=\"{{airplay}}\"\n            ba-airplaybuttonvisible=\"{{airplaybuttonvisible}}\"\n            ba-chromecast=\"{{chromecast}}\"\n            ba-castbuttonvisble=\"{{castbuttonvisble}}\"\n            ba-event:rerecord=\"rerecord\"\n            ba-event:submit=\"submit\"\n            ba-event:play=\"play\"\n            ba-event:pause=\"pause\"\n            ba-event:position=\"seek\"\n            ba-event:volume=\"set_volume\"\n            ba-event:set_speed=\"set_speed\"\n            ba-event:toggle_settings=\"toggle_settings\"\n            ba-event:fullscreen=\"toggle_fullscreen\"\n            ba-event:toggle_player=\"toggle_player\"\n            ba-event:tab_index_move=\"tab_index_move\"\n            ba-event:seek=\"seek\"\n            ba-event:set_volume=\"set_volume\"\n            ba-tabindex=\"{{tabindex}}\"\n            ba-tracktextvisible=\"{{tracktextvisible}}\"\n            ba-tracktags=\"{{tracktags}}\"\n            ba-tracktagssupport=\"{{tracktagssupport}}\"\n            ba-allowtexttrackupload=\"{{allowtexttrackupload}}\"\n            ba-tracksshowselection=\"{{tracksshowselection}}\"\n            ba-volume=\"{{volume}}\"\n            ba-duration=\"{{duration}}\"\n            ba-cached=\"{{buffered}}\"\n            ba-title=\"{{title}}\"\n            ba-position=\"{{position}}\"\n            ba-activitydelta=\"{{activity_delta}}\"\n            ba-hideoninactivity=\"{{hideoninactivity}}\"\n            ba-hidebarafter=\"{{hidebarafter}}\"\n            ba-rerecordable=\"{{rerecordable}}\"\n            ba-submittable=\"{{submittable}}\"\n            ba-streams=\"{{streams}}\"\n            ba-currentstream=\"{{=currentstream}}\"\n            ba-fullscreen=\"{{fullscreensupport && !nofullscreen}}\"\n            ba-fullscreened=\"{{fullscreened}}\"\n            ba-source=\"{{source}}\"\n            ba-disablepause=\"{{disablepause}}\"\n            ba-disableseeking=\"{{disableseeking}}\"\n            ba-skipseconds=\"{{skipseconds}}\"\n            ba-skipinitial=\"{{skipinitial}}\"\n            ba-showsettings=\"{{showsettings}}\"\n            ba-settingsoptionsvisible=\"{{settingsoptionsvisible}}\"\n        ></ba-{{dyncontrolbar}}>\n\n        <ba-{{dyntracks}}\n            ba-css=\"{{csstracks || css}}\"\n            ba-csstheme=\"{{csstheme || css}}\"\n            ba-cssplayer=\"{{cssplayer || css}}\"\n            ba-show=\"{{tracktagssupport || allowtexttrackupload}}\"\n            ba-tracksshowselection=\"{{tracksshowselection}}\"\n            ba-trackselectorhovered=\"{{trackselectorhovered}}\"\n            ba-tracktags=\"{{tracktags}}\"\n            ba-tracktagsstyled=\"{{tracktagsstyled}}\"\n            ba-trackcuetext=\"{{trackcuetext}}\"\n            ba-allowtexttrackupload=\"{{allowtexttrackupload}}\"\n            ba-uploadtexttracksvisible=\"{{uploadtexttracksvisible}}\"\n            ba-acceptedtracktexts=\"{{acceptedtracktexts}}\"\n            ba-uploadlocales=\"{{uploadlocales}}\"\n            ba-activitydelta=\"{{activity_delta}}\"\n            ba-hideoninactivity=\"{{hideoninactivity}}\"\n            ba-event:selected_label_value=\"selected_label_value\"\n            ba-event:upload-text-tracks=\"upload_text_tracks\"\n            ba-event:move_to_option=\"move_to_option\"\n        ></ba-{{dyntracks}}>\n\n        <ba-{{dynplaybutton}}\n            ba-css=\"{{cssplaybutton || css}}\"\n            ba-csstheme=\"{{csstheme || css}}\"\n            ba-cssplayer=\"{{cssplayer || css}}\"\n            ba-theme-color=\"{{themecolor}}\"\n            ba-template=\"{{tmplplaybutton}}\"\n            ba-show=\"{{playbutton_active}}\"\n            ba-rerecordable=\"{{rerecordable}}\"\n            ba-submittable=\"{{submittable}}\"\n            ba-event:play=\"playbutton_click\"\n            ba-event:rerecord=\"rerecord\"\n            ba-event:submit=\"submit\"\n            ba-event:tab_index_move=\"tab_index_move\"\n        ></ba-{{dynplaybutton}}>\n\n        <ba-{{dynloader}}\n            ba-css=\"{{cssloader || css}}\"\n            ba-csstheme=\"{{csstheme || css}}\"\n            ba-cssplayer=\"{{cssplayer || css}}\"\n            ba-theme-color=\"{{themecolor}}\"\n            ba-template=\"{{tmplloader}}\"\n            ba-playwhenvisible=\"{{playwhenvisible}}\"\n            ba-show=\"{{loader_active}}\"\n        ></ba-{{dynloader}}>\n\n        <ba-{{dynshare}}\n            ba-css=\"{{cssshare || css}}\"\n            ba-csstheme=\"{{csstheme || css}}\"\n            ba-cssplayer=\"{{cssplayer || css}}\"\n            ba-theme-color=\"{{themecolor}}\"\n            ba-template=\"{{tmplshare}}\"\n            ba-show=\"{{sharevideourl && sharevideo.length > 0}}\"\n            ba-url=\"{{sharevideourl}}\"\n            ba-shares=\"{{sharevideo}}\"\n        ></ba-{{dynshare}}>\n\n        <ba-{{dynmessage}}\n            ba-css=\"{{cssmessage || css}}\"\n            ba-csstheme=\"{{csstheme || css}}\"\n            ba-cssplayer=\"{{cssplayer || css}}\"\n            ba-theme-color=\"{{themecolor}}\"\n            ba-template=\"{{tmplmessage}}\"\n            ba-show=\"{{message_active}}\"\n            ba-message=\"{{message}}\"\n            ba-event:click=\"message_click\"\n        ></ba-{{dynmessage}}>\n\n        <ba-{{dyntopmessage}}\n            ba-css=\"{{csstopmessage || css}}\"\n            ba-csstheme=\"{{csstheme || css}}\"\n            ba-cssplayer=\"{{cssplayer || css}}\"\n            ba-theme-color=\"{{themecolor}}\"\n            ba-template=\"{{tmpltopmessage}}\"\n            ba-show=\"{{topmessage}}\"\n            ba-topmessage=\"{{topmessage}}\"\n        ></ba-{{dyntopmessage}}>\n\n        <meta itemprop=\"caption\" content=\"{{title}}\" />\n        <meta itemprop=\"thumbnailUrl\" content=\"{{poster}}\"/>\n        <meta itemprop=\"contentUrl\" content=\"{{source}}\"/>\n    </div>\n    <div class=\"{{cssplayer}}-overlay\" data-video=\"ad\" style=\"display:none\"></div>\n</div>\n",

                attrs: {
                    /* CSS */
                    "css": "ba-videoplayer",
                    "csscommon": "ba-commoncss",
                    "cssplayer": "ba-player",
                    "iecss": "ba-videoplayer",
                    "cssplaybutton": "",
                    "cssloader": "",
                    "cssmessage": "",
                    "csstopmessage": "",
                    "csscontrolbar": "",
                    "csstracks": "",
                    "width": "",
                    "height": "",
                    "popup-width": "",
                    "popup-height": "",
                    /* Themes */
                    "theme": "",
                    "csstheme": "",
                    "themecolor": "",
                    /* Dynamics */
                    "dynplaybutton": "videoplayer-playbutton",
                    "dynloader": "videoplayer-loader",
                    "dynmessage": "videoplayer-message",
                    "dyntopmessage": "videoplayer-topmessage",
                    "dyncontrolbar": "videoplayer-controlbar",
                    "dynshare": "videoplayer-share",
                    "dyntracks": "videoplayer-tracks",
                    /* Templates */
                    "tmplplaybutton": "",
                    "tmplloader": "",
                    "tmplmessage": "",
                    "tmplshare": "",
                    "tmpltopmessage": "",
                    "tmplcontrolbar": "",
                    "tmpltracks": "",
                    /* Attributes */
                    "poster": "",
                    "source": "",
                    "sources": [],
                    "sourcefilter": {},
                    "streams": [],
                    "currentstream": null,
                    "playlist": null,
                    "volume": 1.0,
                    "title": "",
                    "initialseek": null,
                    "fullscreened": false,
                    "sharevideo": [],
                    "sharevideourl": "",
                    "visibilityfraction": 0.8,
                    "unmuted": false, // Reference to Chrome renewed policy, we have to setup mute for auto plyed players.

                    /* Configuration */
                    "forceflash": false,
                    "noflash": false,
                    "reloadonplay": false,
                    "playonclick": true,
                    /* Ads */
                    "adprovider": null,
                    "preroll": false,
                    /* Options */
                    "rerecordable": false,
                    "submittable": false,
                    "autoplay": false,
                    "preload": false,
                    "loop": false,
                    "popup": false,
                    "nofullscreen": false,
                    "playfullscreenonmobile": false,
                    "ready": true,
                    "stretch": false,
                    "popup-stretch": false,
                    "volumeafterinteraction": false,
                    "hideoninactivity": true,
                    "hidebarafter": 5000,
                    "preventinteraction": false,
                    "preventinteractionstatus": false, // need to prevent `Unexpected token: punc (()` Uglification issue
                    "skipinitial": false,
                    "topmessage": "",
                    "totalduration": null,
                    "playwhenvisible": false,
                    "playedonce": false,
                    "manuallypaused": false,
                    "disablepause": false,
                    "disableseeking": false,
                    "airplay": false,
                    "airplaybuttonvisible": false,
                    "airplaydevicesavailable": false,
                    "chromecast": false,
                    "castbuttonvisble": false,
                    "skipseconds": 5,
                    "tracktags": [],
                    "tracktagssupport": false,
                    "tracktagsstyled": true,
                    "tracktaglang": 'en',
                    "tracksshowselection": false,
                    "initialoptions": {
                        "hideoninactivity": null
                    },
                    "showsettings": true,
                    "settingsoptionsvisible": false, // If settings are open and visible
                    "settingsoptions": [{
                            id: 'playerspeeds',
                            label: 'player-speed',
                            defaultValue: 1.0,
                            visible: 'media-all',
                            flashSupport: false,
                            mobileSupport: true,
                            className: 'player-speed',
                            options: [{
                                    label: 0.50,
                                    value: 0.50
                                },
                                {
                                    label: 0.75,
                                    value: 0.75
                                },
                                {
                                    label: 1.00,
                                    value: 1.00
                                },
                                {
                                    label: 1.25,
                                    value: 1.25
                                },
                                {
                                    label: 1.50,
                                    value: 1.50
                                },
                                {
                                    label: 1.75,
                                    value: 1.75
                                },
                                {
                                    label: 2.00,
                                    value: 2.00
                                }
                            ],
                            events: [{
                                type: 'click touchstart',
                                method: 'set_speed',
                                argument: true
                            }]
                        }
                        // INFO: left here just as an example
                        // ,{
                        //     id: 'fullscreen',
                        //     label: '<i class="ba-commoncss-icon-resize-full"></i>',
                        //     visible: 'media-all',
                        //     flashSupport: true,
                        //     mobileSupport: true,
                        //     className: 'full-screen',
                        //     events: [{
                        //         type: 'click touchstart',
                        //         method: 'toggle_fullscreen',
                        //         argument: false
                        //     }]
                        // }
                    ],
                    "allowtexttrackupload": false,
                    "uploadtexttracksvisible": false,
                    "acceptedtracktexts": null,
                    "uploadlocales": [{
                        lang: 'en',
                        label: 'English'
                    }],
                    "ttuploadervisible": false,

                    /* States */
                    "states": {
                        "poster_error": {
                            "ignore": false,
                            "click_play": true
                        }
                    }
                },

                types: {
                    "forceflash": "boolean",
                    "noflash": "boolean",
                    "rerecordable": "boolean",
                    "loop": "boolean",
                    "autoplay": "boolean",
                    "preload": "boolean",
                    "ready": "boolean",
                    "nofullscreen": "boolean",
                    "stretch": "boolean",
                    "preroll": "boolean",
                    "hideoninactivity": "boolean",
                    "hidebarafter": "integer",
                    "preventinteraction": "boolean",
                    "skipinitial": "boolean",
                    "volume": "float",
                    "popup": "boolean",
                    "popup-stretch": "boolean",
                    "popup-width": "int",
                    "popup-height": "int",
                    "initialseek": "float",
                    "fullscreened": "boolean",
                    "sharevideo": "array",
                    "sharevideourl": "string",
                    "playfullscreenonmobile": "boolean",
                    "themecolor": "string",
                    "totalduration": "float",
                    "playwhenvisible": "boolean",
                    "playedonce": "boolean",
                    "manuallypaused": "boolean",
                    "disablepause": "boolean",
                    "disableseeking": "boolean",
                    "playonclick": "boolean",
                    "airplay": "boolean",
                    "airplaybuttonvisible": "boolean",
                    "chromecast": "boolean",
                    "castbuttonvisble": "boolean",
                    "skipseconds": "integer",
                    "tracktags": "array",
                    "tracktagsstyled": "boolean",
                    "allowtexttrackupload": "boolean",
                    "uploadtexttracksvisible": "boolean",
                    "acceptedtracktexts": "string",
                    "uploadlocales": "array",
                    "playerspeeds": "array",
                    "playercurrentspeed": "float",
                    "showsettings": "boolean"
                },

                extendables: ["states"],

                computed: {
                    "widthHeightStyles:width,height": function() {
                        var result = {};
                        var width = this.get("width");
                        var height = this.get("height");
                        if (width)
                            result.width = width + ((width + '').match(/^\d+$/g) ? 'px' : '');
                        if (height)
                            result.height = height + ((height + '').match(/^\d+$/g) ? 'px' : '');
                        return result;
                    },
                    "buffering:buffered,position,last_position_change_delta,playing": function() {
                        return this.get("playing") && this.get("buffered") < this.get("position") && this.get("last_position_change_delta") > 1000;
                    }
                },

                remove_on_destroy: true,

                create: function() {
                    if ( /*Info.isMobile() && */ (this.get("autoplay") || this.get("playwhenvisible"))) {
                        this.set("volume", 0.0);
                        this.set("volumeafterinteraction", true);
                        //if (!(Info.isiOS() && Info.iOSversion().major >= 10)) {
                        //this.set("autoplay", false);
                        //this.set("loop", false);
                        //}
                    }

                    if (this.get("theme") in Assets.playerthemes) {
                        Objs.iter(Assets.playerthemes[this.get("theme")], function(value, key) {
                            if (!this.isArgumentAttr(key))
                                this.set(key, value);
                        }, this);
                    }

                    if (!this.get("themecolor"))
                        this.set("themecolor", "default");

                    if (this.get("adprovider")) {
                        this._adProvider = this.get("adprovider");
                        if (Types.is_string(this._adProvider))
                            this._adProvider = AdProvider.registry[this._adProvider];
                    }
                    if (this.get("playlist")) {
                        var pl0 = (this.get("playlist"))[0];
                        this.set("poster", pl0.poster);
                        this.set("source", pl0.source);
                        this.set("sources", pl0.sources);
                    }
                    if (this.get("streams") && !this.get("currentstream"))
                        this.set("currentstream", (this.get("streams"))[0]);

                    if (this.get("preventinteraction") && !this.get("hideoninactivity")) {
                        this.set("hideoninactivity", true);
                        this.set("initialoptions", {
                            hideoninactivity: true
                        });
                    } else {
                        // Set initial options for further help actions
                        this.set("initialoptions", {
                            hideoninactivity: this.get("hideoninactivity")
                        });
                    }

                    this.set("ie8", Info.isInternetExplorer() && Info.internetExplorerVersion() < 9);
                    this.set("firefox", Info.isFirefox());
                    this.set("duration", this.get("totalduration") || 0.0);
                    this.set("position", 0.0);
                    this.set("buffered", 0.0);
                    this.set("message", "");
                    this.set("fullscreensupport", false);
                    this.set("csssize", "normal");

                    this.set("loader_active", false);
                    this.set("playbutton_active", false);
                    this.set("controlbar_active", false);
                    this.set("message_active", false);

                    this.set("last_activity", Time.now());
                    this.set("activity_delta", 0);
                    this.set("passed_after_play", 0);

                    this.set("playing", false);

                    this.__attachRequested = false;
                    this.__activated = false;
                    this.__error = null;
                    this.__currentStretch = null;

                    // Set initial options for further help actions
                    this.set("initialoptions", {
                        hideoninactivity: this.get("hideoninactivity")
                    });

                    if (document.onkeydown)
                        this.activeElement().onkeydown = this._keyDownActivity.bind(this, this.activeElement());

                    this.on("change:tracktags", this.__initializeTrackTags);

                    this.on("change:stretch", function() {
                        this._updateStretch();
                    }, this);
                    this.host = new Host({
                        stateRegistry: new ClassRegistry(this.cls.playerStates())
                    });
                    this.host.dynamic = this;
                    this.host.initialize(InitialState);

                    this._timer = new Timers.Timer({
                        context: this,
                        fire: this._timerFire,
                        delay: 100,
                        start: true
                    });
                },

                state: function() {
                    return this.host.state();
                },

                __initializeTrackTags: function() {
                    this.set("tracktagssupport", this.get("tracktags") && this.get("tracktags").length > 0 && ('track' in document.createElement('track')));
                    if (!this.__video || !this.get("tracktags") || this.get("tracktags").length === 0)
                        return;
                    this._loadTrackTags();
                    // To be able play default subtitle in with custom style
                    if (this.get("tracktagsstyled"))
                        this._setDefaultTrackOnPlay();

                    if (this.get("tracktags").length > 1) {
                        this.on("switch-track", function(selectedTrack) {
                            this.set("tracktextvisible", true);
                            this.set("trackcuetext", null);
                            this._setSelectedTag(selectedTrack);
                        });
                    }
                },

                _loadTrackTags: function() {
                    if (!this.get("tracktagssupport")) return;
                    var _flag = true;
                    Objs.iter(this.get("tracktags"), function(subtitle, index) {
                        var _trackTag = document.createElement("track");
                        _trackTag.id = 'tack' + index;
                        _trackTag.kind = subtitle.kind || 'subtitles';
                        _trackTag.label = subtitle.label || 'English';
                        _trackTag.srclang = subtitle.lang || 'en';
                        _trackTag.src = subtitle.src || null;
                        try {
                            if (subtitle.content && !subtitle.src)
                                _trackTag.src = URL.createObjectURL(new Blob([subtitle.content], {
                                    type: 'text/plain'
                                }));
                        } catch (e) {}
                        if (subtitle.enabled && _flag) {
                            _trackTag.setAttribute('default', '');
                            this.set("tracktaglang", subtitle.lang);
                            this.set("tracktextvisible", true);
                        }
                        _trackTag.setAttribute('data-selector', 'track-tag');
                        _trackTag.addEventListener("load", function() {
                            if (subtitle.enabled && _flag) {
                                // 0 (TextTrack.OFF in spec, TextTrack.DISABLED in Chrome), 1 (TextTrack.HIDDEN) or 2 (TextTrack.SHOWING)
                                this.mode = "showing";
                                if (this.__video)
                                    this.__video.textTracks[index].mode = "showing"; // Firefox
                                _flag = false;
                            } else {
                                this.mode = "hidden";
                                if (this.__video)
                                    this.__video.textTracks[index].mode = "hidden"; // Firefox
                            }
                        });
                        this.__video.appendChild(_trackTag);
                    }, this);
                },

                _showTracksInCustomElement: function(track, lang) {
                    var _lang = lang || this.get("tracktaglang");
                    var _self = this;
                    if (track.language === _lang) {
                        var _cues = track.cues;
                        Objs.iter(_cues, function(cue, index) {
                            if (typeof _cues[index] === 'object' && _cues[index]) {
                                cue.onenter = function(ev) {
                                    track.mode = 'hidden';
                                    if (_self.get("tracktextvisible"))
                                        _self.set("trackcuetext", this.text);
                                };
                                cue.onexit = function(ev) {
                                    _self.set("trackcuetext", null);
                                };
                            }
                        }, this);
                    }
                },

                toggleTrackTags: function(status) {
                    var _lang = this.get("tracktaglang");
                    var _customStyled = this.get("tracktagsstyled");
                    var _status = status ? 'showing' : 'disabled';
                    _status = (status && _customStyled) ? 'hidden' : _status;
                    if (!status && this.get("tracktagsstyled"))
                        this.set("trackcuetext", null);

                    Objs.iter(this.__video.textTracks, function(track, index) {
                        if (typeof this.__video.textTracks[index] === 'object' && this.__video.textTracks[index]) {
                            var _track = this.__video.textTracks[index];
                            // If set custom style to true show cue text in our element
                            if (_track.language === _lang) {
                                _track.mode = _status;
                                this.set("tracktextvisible", status);
                                this._triggerTrackChange(this.__video, _track, _status, _lang);
                            }
                        }
                    }, this);
                },

                _setDefaultTrackOnPlay: function() {
                    this.player.once("playing", function() {
                        Objs.iter(this.get("tracktags"), function(track, index) {
                            var _track = this.__video.textTracks[index];
                            if (typeof _track === 'object' && _track) {
                                if (_track.mode === 'showing')
                                    this._showTracksInCustomElement(_track, _track.language);
                            }
                        }, this);
                    }, this);
                },

                _setSelectedTag: function(selectedTrack) {
                    var _status = null;
                    var _track = null;
                    Objs.iter(this.__video.textTracks, function(track, index) {
                        _track = this.__video.textTracks[index];
                        if (typeof _track === 'object' && _track) {
                            _status = _track.language === selectedTrack.lang ? (this.get("tracktagsstyled") ? 'hidden' : 'showing') : 'disabled';
                            if (!this.get("tracktextvisible")) _status = 'disabled';
                            _track.mode = _status;
                            if (_track.language === selectedTrack.lang)
                                this._triggerTrackChange(this.__video, _track, _status, selectedTrack.lang);
                        }
                    }, this);
                },

                // Fixed issue when unable switch directly to showing from disabled
                _triggerTrackChange: function(video, track, status, lang) {
                    var _self = this;
                    var _trackElement = video.querySelector("#" + track.id);
                    var _flag = true;
                    if (track.oncuechange !== undefined && !((Info.isInternetExplorer() || Info.isEdge()) && this.get("tracktagsstyled"))) {
                        track.oncuechange = function(ev) {
                            if (_flag) {
                                if (status.length) track.mode = status;
                                if (_self.get("tracktagsstyled"))
                                    _self._showTracksInCustomElement(track, lang);
                                else if (_trackElement) {
                                    _trackElement.mode = status;
                                    // _trackElement.setAttribute('default', '');
                                }
                                _flag = false;
                            }
                        };
                    } else {
                        video.ontimeupdate = function(ev) {
                            if (status.length) track.mode = status;
                            if (_self.get("tracktagsstyled"))
                                _self._showTracksInCustomElement(track, lang);
                        };
                    }
                },

                videoAttached: function() {
                    return !!this.player;
                },

                videoLoaded: function() {
                    return this.videoAttached() && this.player.loaded();
                },

                videoError: function() {
                    return this.__error;
                },

                _error: function(error_type, error_code) {
                    this.__error = {
                        error_type: error_type,
                        error_code: error_code
                    };
                    this.trigger("error:" + error_type, error_code);
                    this.trigger("error", error_type, error_code);
                },

                _clearError: function() {
                    this.__error = null;
                },

                _detachImage: function() {
                    this.set("imageelement_active", false);
                },

                _attachImage: function() {
                    if (!this.get("poster")) {
                        this.trigger("error:poster");
                        return;
                    }
                    var img = this.activeElement().querySelector("[data-image='image']");
                    this._clearError();
                    var self = this;
                    img.onerror = function() {
                        self.trigger("error:poster");
                    };
                    img.onload = function() {
                        self.set("imageelement_active", true);
                        self.trigger("image-attached");
                    };
                    img.src = this.get("poster");
                },

                _detachVideo: function() {
                    this.set("playing", false);
                    if (this.player)
                        this.player.weakDestroy();
                    if (this._prerollAd)
                        this._prerollAd.weakDestroy();
                    this.player = null;
                    this.__video = null;
                    this.set("videoelement_active", false);
                },

                _attachVideo: function() {
                    if (this.videoAttached())
                        return;
                    if (!this.__activated) {
                        this.__attachRequested = true;
                        return;
                    }
                    this.__attachRequested = false;
                    this.set("videoelement_active", true);
                    var video = this.activeElement().querySelector("[data-video='video']");
                    this._clearError();
                    VideoPlayerWrapper.create(Objs.extend(this._getSources(), {
                        element: video,
                        forceflash: !!this.get("forceflash"),
                        noflash: !!this.get("noflash"),
                        preload: !!this.get("preload"),
                        loop: !!this.get("loop"),
                        reloadonplay: this.get('playlist') ? true : !!this.get("reloadonplay")
                    })).error(function(e) {
                        if (this.destroyed())
                            return;
                        this._error("attach", e);
                    }, this).success(function(instance) {
                        if (this.destroyed())
                            return;
                        if (this._adProvider && this.get("preroll")) {
                            this._prerollAd = this._adProvider.newPrerollAd({
                                videoElement: this.activeElement().querySelector("[data-video='video']"),
                                adElement: this.activeElement().querySelector("[data-video='ad']"),
                                dynamic: this
                            });
                        }

                        this.player = instance;
                        this.__video = video;
                        this.__initializeTrackTags();

                        if (this.get("chromecast")) {
                            if (!this.get("skipinitial")) this.set("skipinitial", true);
                            this._broadcasting = new Broadcasting({
                                player: instance,
                                commonOptions: {
                                    title: this.get("title"),
                                    poster: this.player._element.poster,
                                    currentPosition: this.get("position")
                                },
                                castOptions: {
                                    canControlVolume: true,
                                    canPause: !this.get("disablepause"),
                                    canSeek: !this.get("disableseeking"),
                                    displayName: this.get("title"),
                                    //displayStatus: "Please wait connecting",
                                    duration: this.get("duration"),
                                    imageUrl: this.player._element.poster,
                                    isConnected: this.player._broadcastingState.googleCastConnected,
                                    isMuted: false,
                                    isPaused: !this.get("playing")
                                },
                                airplayOptions: {}
                            });
                            if (Info.isChrome() && this.get("chromecast")) {
                                this._broadcasting.attachGoggleCast();
                                this.player.on("cast-available", function(isCastDeviceAvailable) {
                                    this.set("castbuttonvisble", isCastDeviceAvailable);
                                }, this);
                                this.player.on("cast-loaded", function(castRemotePlayer, castRemotePlayerController) {
                                    //castRemotePlayer.currentMediaDuration = this.player;

                                    // If player already start to play
                                    if (this.get("position") > 0) {
                                        this._broadcasting.options.currentPosition = this.get("position");
                                    }

                                    //If local player playing stop it before
                                    if (this.get('playing')) this.stop();

                                    // Intial play button state
                                    if (!castRemotePlayer.isPaused) this.set('playing', true);

                                }, this);

                                this.player.on("cast-playpause", function(castPaused) {
                                    this.set("playing", !castPaused);
                                }, this);

                                this.player.on("cast-time-changed", function(currentTime, totalMediaDuration) {
                                    var position = Math.round(currentTime / totalMediaDuration * 100);
                                    this.set("buffered", totalMediaDuration);
                                    this.set("cahched", totalMediaDuration);
                                    this.set("duration", totalMediaDuration || 0.0);
                                    this.set("position", currentTime);
                                }, this);

                                this.player.on("proceed-when-ending-googlecast", function(position) {
                                    this.player._broadcastingState.googleCastConnected = false;
                                    this.set('playing', false);
                                }, this);

                            }
                            if (Info.isSafari() && Info.safariVersion() >= 9 && window.WebKitPlaybackTargetAvailabilityEvent && this.get("airplay")) {
                                this.set("airplaybuttonvisible", true);
                                this._broadcasting.attachAirplayEvent.call(this, video);
                            }
                        }

                        if (this.get("playwhenvisible")) {
                            this.set("skipinitial", true);
                            if (Info.isChromiumBased() && !this.get("unmuted")) {
                                video.isMuted = true;
                                Dom.userInteraction(function() {
                                    video.isMuted = true;
                                    this.set("unmuted", true);
                                    this.set("volumeafterinteraction", false);
                                    this._playWhenVisible(video);
                                }, this);
                            } else {
                                this._playWhenVisible(video);
                            }
                        }
                        this.player.on("fullscreen-change", function(inFullscreen) {
                            this.set("fullscreened", inFullscreen);
                            if (!inFullscreen && (this.get('hideoninactivity') !== this.get("initialoptions").hideoninactivity)) {
                                this.set("hideoninactivity", this.get("initialoptions").hideoninactivity);
                            }
                        }, this);
                        this.player.on("postererror", function() {
                            this._error("poster");
                        }, this);
                        this.player.on("playing", function() {
                            this.set("playing", true);
                            this.trigger("playing");
                        }, this);
                        this.player.on("error", function(e) {
                            this._error("video", e);
                        }, this);
                        if (this.player.error())
                            this.player.trigger("error", this.player.error());
                        this.player.on("paused", function() {
                            this.set("playing", false);
                            this.trigger("paused");
                        }, this);
                        this.player.on("ended", function() {
                            this.set("playing", false);
                            this.set('playedonce', true);
                            this.trigger("ended");
                        }, this);
                        this.trigger("attached", instance);
                        this.player.once("loaded", function() {
                            var volume = Math.min(1.0, this.get("volume"));
                            this.player.setVolume(volume);
                            this.player.setMuted(volume <= 0.0);
                            this.trigger("loaded");
                            this.trigger("ready_to_play");
                            if (this.get("totalduration") || this.player.duration() < Infinity)
                                this.set("duration", this.get("totalduration") || this.player.duration());
                            this.set("fullscreensupport", this.player.supportsFullscreen());
                            this._updateStretch();
                            if (this.get("initialseek"))
                                this.player.setPosition(this.get("initialseek"));
                        }, this);
                        if (this.player.loaded())
                            this.player.trigger("loaded");
                        this._updateStretch();
                    }, this);
                },

                _getSources: function() {
                    var filter = this.get("currentstream") ? this.get("currentstream").filter : this.get("sourcefilter");
                    var poster = this.get("poster");
                    var source = this.get("source");
                    var sources = filter ? Objs.filter(this.get("sources"), function(source) {
                        return Objs.subset_of(filter, source);
                    }, this) : this.get("sources");
                    Objs.iter(sources, function(s) {
                        if (s.poster)
                            poster = s.poster;
                    });
                    return {
                        poster: poster,
                        source: source,
                        sources: sources
                    };
                },

                _afterActivate: function(element) {
                    inherited._afterActivate.call(this, element);
                    this.__activated = true;
                    if (this.__attachRequested)
                        this._attachVideo();
                },

                _playWhenVisible: function(video) {
                    var _self = this;

                    if (Dom.isElementVisible(video, this.get("visibilityfraction"))) {
                        this.player.play();
                    }

                    this._visiblityScrollEvent = this.auto_destroy(new DomEvents());
                    this._visiblityScrollEvent.on(document, "scroll", function() {
                        if (!_self.get('playedonce') && !_self.get("manuallypaused")) {
                            if (Dom.isElementVisible(video, _self.get("visibilityfraction"))) {
                                _self.player.play();
                            } else if (_self.get("playing")) {
                                _self.player.pause();
                            }
                        } else if (_self.get("playing") && !Dom.isElementVisible(video, _self.get("visibilityfraction"))) {
                            _self.player.pause();
                        }
                    });

                },

                /* In the future if require to use promise player, Supports >Chrome50, >FireFox53
                _playWithPromise: function(dyn) {
                    var _player, _promise, _autoplayAllowed;
                    _player = dyn.player;
                    _autoplayAllowed = true;
                    if (_player._element)
                        _promise = _player._element.play();
                    else
                        _player.play();

                    if (_promise !== 'undefined' && !Info.isInternetExplorer()) {
                        _promise["catch"](function(err) {
                            // here can add some interaction like inform user to change settings in chrome://flags disable-gesture-requirement-for-media-playback
                            if (err.name === 'NotAllowedError')
                                _autoplayAllowed = false;
                            // Will try to run play anyway
                            _player.play();
                        });
                        _promise.then(function() {
                            if(_autoplayAllowed) {
                                // Inform user with UI that device is not allowed to play without interaction
                            }
                        });
                    } else if (!dyn.get("playing")) {
                        _player.play();
                    }
                }, */

                reattachVideo: function() {
                    this.set("reloadonplay", true);
                    this._detachVideo();
                    this._attachVideo();
                },

                reattachImage: function() {
                    this._detachImage();
                    this._attachImage();
                },

                _keyDownActivity: function(element, ev) {
                    if (this.get("preventinteractionstatus")) return;
                    var _keyCode = ev.which || ev.keyCode;
                    // Prevent whitespace browser center scroll and arrow buttons behaviours
                    if (_keyCode === 32 || _keyCode === 37 || _keyCode === 38 || _keyCode === 39 || _keyCode === 40) ev.preventDefault();

                    if (_keyCode === 32 || _keyCode === 13 || _keyCode === 9) {
                        this._resetActivity();
                        if (this.get("fullscreened") && this.get("hideoninactivity")) this.set("hideoninactivity", false);
                    }

                    if (_keyCode === 9 && ev.shiftKey) {
                        this._resetActivity();
                        this._findNextTabStop(element, ev, function(target, index) {
                            target.focus();
                        }, -1);
                    } else if (_keyCode === 9) {
                        this._resetActivity();
                        this._findNextTabStop(element, ev, function(target, index) {
                            target.focus();
                        });
                    }
                },

                _findNextTabStop: function(parentElement, ev, callback, direction) {
                    var _currentIndex, _direction, _tabIndexes, _tabIndexesArray, _maxIndex, _minIndex, _looked, _tabIndex, _delta, _element, _videoPlayersCount;
                    _maxIndex = _minIndex = 0;
                    _direction = direction || 1;
                    _element = ev.target;
                    _currentIndex = _element.tabIndex;
                    _tabIndexes = parentElement.querySelectorAll('[tabindex]');
                    _tabIndexesArray = Array.prototype.slice.call(_tabIndexes, 0);
                    _tabIndexes = _tabIndexesArray
                        .filter(function(element) {
                            if ((element.clientWidth > 0 || element.clientHeight > 0) && (element.tabIndex !== -1)) {
                                if (_maxIndex <= element.tabIndex) _maxIndex = element.tabIndex;
                                if (_minIndex >= element.tabIndex) _minIndex = element.tabIndex;
                                return true;
                            } else return false;
                        });

                    if ((_direction === 1 && _currentIndex === _maxIndex) || (direction === -1 && _currentIndex === _minIndex) || _maxIndex === 0) {
                        _videoPlayersCount = document.querySelectorAll('ba-videoplayer').length;
                        if (_videoPlayersCount > 1) {
                            if (this.get("playing")) this.player.pause();
                            parentElement.tabIndex = -1;
                            parentElement.blur();
                        }
                        return;
                    }

                    for (var i = 0; i < _tabIndexes.length; i++) {
                        if (!_tabIndexes[i])
                            continue;
                        _tabIndex = _tabIndexes[i].tabIndex;
                        _delta = _tabIndex - _currentIndex;
                        if (_tabIndex < _minIndex || _tabIndex > _maxIndex || Math.sign(_delta) !== _direction)
                            continue;

                        if (!_looked || Math.abs(_delta) < Math.abs(_looked.tabIndex - _currentIndex))
                            _looked = _tabIndexes[i];
                    }

                    if (_looked) {
                        ev.preventDefault();
                        callback(_looked, _looked.tabIndex);
                    }
                },

                // Couldn't use for uglification issue `Unexpected token: punc (()`
                // _preventInteraction() {
                //      if(this.get('preventinteraction') && (this.get('hidebarafter') < (Time.now() - this.get("last_activity"))) && this.get('playing'));
                // },

                _resetActivity: function() {
                    if (!this.get('preventinteractionstatus')) {
                        this.set("last_activity", Time.now());
                    }
                    this.set("activity_delta", 0);
                },

                object_functions: ["play", "rerecord", "pause", "stop", "seek", "set_volume"],

                functions: {

                    user_activity: function(strong) {
                        if (strong && this.get("volumeafterinteraction")) {
                            this.set_volume(1.0);
                            this.set("volumeafterinteraction", false);
                        }
                        if (this.get('preventinteractionstatus')) return;
                        this._resetActivity();
                    },

                    formatTime: function(time) {
                        time = Math.max(time || 0, 1);
                        return TimeFormat.format(TimeFormat.ELAPSED_MINUTES_SECONDS, time * 1000);
                    },

                    message_click: function() {
                        this.trigger("message:click");
                    },

                    playbutton_click: function() {
                        this.host.state().play();
                    },

                    play: function() {
                        if (this._delegatedPlayer) {
                            this._delegatedPlayer.execute("play");
                            return;
                        }
                        if (this.player && this.player._broadcastingState && this.player._broadcastingState.googleCastConnected) {
                            this._broadcasting.player.trigger("play-google-cast");
                            return;
                        }
                        this.host.state().play();
                    },

                    rerecord: function() {
                        if (this._delegatedPlayer) {
                            this._delegatedPlayer.execute("rerecord");
                            return;
                        }
                        if (!this.get("rerecordable"))
                            return;
                        this.trigger("rerecord");
                    },

                    submit: function() {
                        if (this._delegatedPlayer) {
                            this._delegatedPlayer.execute("submit");
                            return;
                        }
                        if (!this.get("submittable"))
                            return;
                        this.trigger("submit");
                        this.set("submittable", false);
                        this.set("rerecordable", false);
                    },

                    pause: function() {
                        if (this.get("preventinteractionstatus")) return;
                        if (this._delegatedPlayer) {
                            this._delegatedPlayer.execute("pause");
                            return;
                        }

                        if (this.get('disablepause')) return;

                        if (this.get("playing")) {
                            if (this.player && this.player._broadcastingState && this.player._broadcastingState.googleCastConnected) {
                                this._broadcasting.player.trigger("pause-google-cast");
                                return;
                            }
                            this.player.pause();
                        }

                        if (this.get("playwhenvisible"))
                            this.set("manuallypaused", true);
                    },

                    stop: function() {
                        if (this.get("preventinteractionstatus")) return;
                        if (this._delegatedPlayer) {
                            this._delegatedPlayer.execute("stop");
                            return;
                        }
                        if (!this.videoLoaded())
                            return;
                        if (this.get("playing"))
                            this.player.pause();
                        this.player.setPosition(0);
                        this.trigger("stopped");
                    },

                    seek: function(position) {
                        if (this.get("preventinteractionstatus")) return;
                        if (this._delegatedPlayer) {
                            this._delegatedPlayer.execute("seek", position);
                            return;
                        }
                        if (this.get('disableseeking')) return;
                        if (this.videoLoaded()) {
                            if (position > this.player.duration())
                                this.player.setPosition(this.player.duration() - this.get("skipseconds"));
                            else {
                                this.player.setPosition(position);
                                this.trigger("seek", position);
                            }
                        }
                    },

                    set_speed: function(speed) {
                        this.player.setSpeed(speed);
                    },

                    set_volume: function(volume) {
                        if (this.get("preventinteractionstatus")) return;
                        if (this._delegatedPlayer) {
                            this._delegatedPlayer.execute("set_volume", volume);
                            return;
                        }
                        volume = Math.min(1.0, volume);

                        if (!this.get("volumeafterinteraction"))
                            volume = volume <= 0 ? 0 : volume; // Don't allow negative value
                        else {
                            this.set("volumeafterinteraction", false);
                            volume = 0;
                        }

                        if (this.player && this.player._broadcastingState && this.player._broadcastingState.googleCastConnected) {
                            this._broadcasting.player.trigger("change-google-cast-volume", volume);
                        }

                        this.set("volume", volume);
                        if (this.videoLoaded()) {
                            this.player.setVolume(volume);
                            this.player.setMuted(volume <= 0);
                        }
                    },

                    toggle_settings: function() {
                        if (this.get('settingsoptions')) {
                            if (!this.settings)
                                this.settings = new Settings(this.get('settingsoptions'), this);
                            this.settings.toggle_settings_block();
                        }
                    },

                    toggle_fullscreen: function() {
                        if (this.get("preventinteractionstatus")) return;
                        if (this._delegatedPlayer) {
                            this._delegatedPlayer.execute("toggle_fullscreen");
                            return;
                        }
                        if (this.get("fullscreened"))
                            this.player.exitFullscreen();
                        else
                            this.player.enterFullscreen();
                        this.set("fullscreened", !this.get("fullscreened"));
                    },

                    toggle_player: function() {
                        if (this.get('playing'))
                            if (this.get("preventinteractionstatus")) return;
                        if (this._delegatedPlayer) {
                            this._delegatedPlayer.execute("toggle_player");
                            return;
                        }
                        if (!this.get("playonclick"))
                            return;
                        if (this.get('playing') && !this.get("disablepause")) {
                            if (!this.get("volumeafterinteraction"))
                                this.pause();
                            else
                                this.set("volumeafterinteraction", false);

                            if (this.get("playwhenvisible"))
                                this.set("manuallypaused", true);
                        } else
                            this.play();
                    },

                    tab_index_move: function(ev, nextSelector, focusingSelector) {
                        if (this.get("preventinteractionstatus")) return;
                        var _targetElement, _activeElement, _selector, _keyCode;
                        _keyCode = ev.which || ev.keyCode;
                        _activeElement = this.activeElement();
                        if (_keyCode === 13 || _keyCode === 32) {
                            if (focusingSelector) {
                                _selector = "[data-selector='" + focusingSelector + "']";
                                _targetElement = _activeElement.querySelector(_selector);
                                if (_targetElement)
                                    Async.eventually(function() {
                                        this.trigger("keyboardusecase", _activeElement);
                                        _targetElement.focus({
                                            preventScroll: false
                                        });
                                    }, this, 100);
                            } else {
                                _selector = '[data-video="video"]';
                                _targetElement = _activeElement.querySelector(_selector);
                                Async.eventually(function() {
                                    this.trigger("keyboardusecase", _activeElement);
                                    _targetElement.focus({
                                        preventScroll: true
                                    });
                                }, this, 100);
                            }
                        } else if (_keyCode === 9 && nextSelector) {
                            _selector = "[data-selector='" + nextSelector + "']";
                            _targetElement = _activeElement.querySelector(_selector);
                            if (_targetElement)
                                Async.eventually(function() {
                                    this.trigger("keyboardusecase", _activeElement);
                                    _targetElement.focus({
                                        preventScroll: false
                                    });
                                }, this, 100);

                        }
                    },

                    upload_text_tracks: function(file, locale) {
                        return this.host.state().uploadTextTrack(file, locale);
                    },

                    move_to_option: function(currentElement, nextSelector) {
                        var _classPrefix, _hiddenOptionsSelector, _visibleOptionsSelector, _moveToSelector,
                            _targetElement, _currentElementParent, _topParent;
                        nextSelector = nextSelector || 'initial-options-list'; // If next element is empty return to main options
                        _classPrefix = this.get('csscommon') + "-";
                        _moveToSelector = "." + _classPrefix + nextSelector;
                        _hiddenOptionsSelector = _classPrefix + 'options-list-hidden';
                        _visibleOptionsSelector = _classPrefix + 'options-list-visible';
                        _targetElement = this.activeElement().querySelector(_moveToSelector);
                        _topParent = this.activeElement().querySelector(_classPrefix + 'text-tracks-overlay');

                        // Look if target element is hidden
                        if (Dom.elementHasClass(_targetElement, _hiddenOptionsSelector)) {
                            // Search for visible closest parent element
                            _currentElementParent = Dom.elementFindClosestParent(currentElement, _visibleOptionsSelector, _classPrefix + 'text-tracks-overlay');
                            // We should have parent element with visible class
                            if (Dom.elementHasClass(_currentElementParent, _visibleOptionsSelector)) {
                                Dom.elementReplaceClasses(_targetElement, _hiddenOptionsSelector, _visibleOptionsSelector);
                                Dom.elementReplaceClasses(_currentElementParent, _visibleOptionsSelector, _hiddenOptionsSelector);
                            }
                            if (_topParent)
                                _topParent.focus({
                                    preventScroll: true
                                });
                            else
                                _currentElementParent.focus({
                                    preventScroll: true
                                });
                        }
                    },

                    toggle_interaction_option: function(turn_switch) {
                        if (typeof turn_switch === 'boolean') {
                            this.set("preventinteractionstatus", turn_switch);
                        } else {
                            this.set("preventinteractionstatus", !this.get("preventinteractionstatus"));
                        }
                    }

                },

                destroy: function() {
                    this._timer.destroy();
                    this.host.destroy();
                    this._detachVideo();
                    inherited.destroy.call(this);
                },

                _timerFire: function() {
                    if (this.destroyed())
                        return;
                    try {
                        if (this.videoLoaded()) {
                            var _now = Time.now();
                            this.set("activity_delta", _now - this.get("last_activity"));
                            var new_position = this.player.position();
                            if (new_position !== this.get("position") || this.get("last_position_change"))
                                this.set("last_position_change", _now);
                            // In case if prevent interaction with controller set to true
                            if (this.get('preventinteraction')) {
                                // set timer since player started to play
                                if (this.get("passed_after_play") < 0.001) {
                                    this.set("passed_after_play", _now);
                                } else {
                                    var _passed = _now - this.get("passed_after_play");
                                    if (_passed > _now - 1000) {
                                        this.set("passed_after_play", _passed);
                                    }
                                    if ((this.get('hidebarafter') < _passed) && this.get('playing') && !this.get("preventinteractionstatus")) {
                                        this.set('preventinteractionstatus', true);
                                    }
                                }

                            }
                            this.set("last_position_change_delta", _now - this.get("last_position_change"));
                            this.set("position", new_position);
                            this.set("buffered", this.player.buffered());
                            var pld = this.player.duration();
                            if (0.0 < pld && pld < Infinity)
                                this.set("duration", this.player.duration());
                            else
                                this.set("duration", this.get("totalduration") || new_position);
                            this.set("fullscreened", this.player.isFullscreen());
                        }
                    } catch (e) {}
                    try {
                        this._updateStretch();
                    } catch (e) {}
                    try {
                        this._updateCSSSize();
                    } catch (e) {}
                },

                _updateCSSSize: function() {
                    var width = Dom.elementDimensions(this.activeElement()).width;
                    this.set("csssize", width > 400 ? "normal" : (width > 300 ? "medium" : "small"));
                },

                videoHeight: function() {
                    if (this.videoAttached())
                        return this.player.videoHeight();
                    var img = this.activeElement().querySelector("img");
                    if (img && img.height)
                        return img.height;
                    return NaN;
                },

                videoWidth: function() {
                    if (this.videoAttached())
                        return this.player.videoWidth();
                    var img = this.activeElement().querySelector("img");
                    if (img && img.width)
                        return img.width;
                    return NaN;
                },

                aspectRatio: function() {
                    return this.videoWidth() / this.videoHeight();
                },

                parentWidth: function() {
                    return Dom.elementDimensions(this.activeElement().parentElement).width;
                },

                parentHeight: function() {
                    return Dom.elementDimensions(this.activeElement().parentElement).height;
                },

                parentAspectRatio: function() {
                    return this.parentWidth() / this.parentHeight();
                },

                _updateStretch: function() {
                    var newStretch = null;
                    if (this.get("stretch")) {
                        var ar = this.aspectRatio();
                        if (isFinite(ar)) {
                            var par = this.parentAspectRatio();
                            if (isFinite(par)) {
                                if (par > ar)
                                    newStretch = "height";
                                if (par < ar)
                                    newStretch = "width";
                            } else if (par === Infinity)
                                newStretch = "height";
                        }
                    }
                    if (this.__currentStretch !== newStretch) {
                        if (this.__currentStretch)
                            Dom.elementRemoveClass(this.activeElement(), this.get("css") + "-stretch-" + this.__currentStretch);
                        if (newStretch)
                            Dom.elementAddClass(this.activeElement(), this.get("css") + "-stretch-" + newStretch);
                    }
                    this.__currentStretch = newStretch;
                },

                cloneAttrs: function() {
                    return Objs.map(this.attrs, function(value, key) {
                        return this.get(key);
                    }, this);
                },

                popupAttrs: function() {
                    return {
                        autoplay: true,
                        popup: false,
                        width: this.get("popup-width"),
                        height: this.get("popup-height"),
                        stretch: this.get("popup-stretch")
                    };
                }

            };
        }, {

            playerStates: function() {
                return [PlayerStates];
            }

        }).register("ba-videoplayer")
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "cssplayer": function (obj) { with (obj) { return cssplayer; } }, "csssize": function (obj) { with (obj) { return csssize; } }, "iecss": function (obj) { with (obj) { return iecss; } }, "ie8 ? 'ie8' : 'noie8'": function (obj) { with (obj) { return ie8 ? 'ie8' : 'noie8'; } }, "csstheme": function (obj) { with (obj) { return csstheme; } }, "fullscreened ? 'fullscreen' : 'normal'": function (obj) { with (obj) { return fullscreened ? 'fullscreen' : 'normal'; } }, "firefox ? 'firefox' : 'common'": function (obj) { with (obj) { return firefox ? 'firefox' : 'common'; } }, "themecolor": function (obj) { with (obj) { return themecolor; } }, "user_activity()": function (obj) { with (obj) { return user_activity(); } }, "user_activity(true)": function (obj) { with (obj) { return user_activity(true); } }, "widthHeightStyles": function (obj) { with (obj) { return widthHeightStyles; } }, "videoelement_active": function (obj) { with (obj) { return videoelement_active; } }, "!playfullscreenonmobile": function (obj) { with (obj) { return !playfullscreenonmobile; } }, "imageelement_active && !videoelement_active": function (obj) { with (obj) { return imageelement_active && !videoelement_active; } }, "seek(position + skipseconds)": function (obj) { with (obj) { return seek(position + skipseconds); } }, "seek(position - skipseconds)": function (obj) { with (obj) { return seek(position - skipseconds); } }, "seek(position + skipseconds * 3)": function (obj) { with (obj) { return seek(position + skipseconds * 3); } }, "seek(position - skipseconds * 3)": function (obj) { with (obj) { return seek(position - skipseconds * 3); } }, "set_volume(volume + 0.1)": function (obj) { with (obj) { return set_volume(volume + 0.1); } }, "set_volume(volume - 0.1)": function (obj) { with (obj) { return set_volume(volume - 0.1); } }, "toggle_player()": function (obj) { with (obj) { return toggle_player(); } }, "!playing && totalduration && !controlbar_active": function (obj) { with (obj) { return !playing && totalduration && !controlbar_active; } }, "formatTime(totalduration)": function (obj) { with (obj) { return formatTime(totalduration); } }, "dyncontrolbar": function (obj) { with (obj) { return dyncontrolbar; } }, "csscontrolbar || css": function (obj) { with (obj) { return csscontrolbar || css; } }, "cssplayer || css": function (obj) { with (obj) { return cssplayer || css; } }, "csstheme || css": function (obj) { with (obj) { return csstheme || css; } }, "tmplcontrolbar": function (obj) { with (obj) { return tmplcontrolbar; } }, "controlbar_active": function (obj) { with (obj) { return controlbar_active; } }, "playing": function (obj) { with (obj) { return playing; } }, "playwhenvisible": function (obj) { with (obj) { return playwhenvisible; } }, "playerspeeds": function (obj) { with (obj) { return playerspeeds; } }, "playercurrentspeed": function (obj) { with (obj) { return playercurrentspeed; } }, "airplay": function (obj) { with (obj) { return airplay; } }, "airplaybuttonvisible": function (obj) { with (obj) { return airplaybuttonvisible; } }, "chromecast": function (obj) { with (obj) { return chromecast; } }, "castbuttonvisble": function (obj) { with (obj) { return castbuttonvisble; } }, "tabindex": function (obj) { with (obj) { return tabindex; } }, "tracktextvisible": function (obj) { with (obj) { return tracktextvisible; } }, "tracktags": function (obj) { with (obj) { return tracktags; } }, "tracktagssupport": function (obj) { with (obj) { return tracktagssupport; } }, "allowtexttrackupload": function (obj) { with (obj) { return allowtexttrackupload; } }, "tracksshowselection": function (obj) { with (obj) { return tracksshowselection; } }, "volume": function (obj) { with (obj) { return volume; } }, "duration": function (obj) { with (obj) { return duration; } }, "buffered": function (obj) { with (obj) { return buffered; } }, "title": function (obj) { with (obj) { return title; } }, "position": function (obj) { with (obj) { return position; } }, "activity_delta": function (obj) { with (obj) { return activity_delta; } }, "hideoninactivity": function (obj) { with (obj) { return hideoninactivity; } }, "hidebarafter": function (obj) { with (obj) { return hidebarafter; } }, "rerecordable": function (obj) { with (obj) { return rerecordable; } }, "submittable": function (obj) { with (obj) { return submittable; } }, "streams": function (obj) { with (obj) { return streams; } }, "currentstream": function (obj) { with (obj) { return currentstream; } }, "fullscreensupport && !nofullscreen": function (obj) { with (obj) { return fullscreensupport && !nofullscreen; } }, "fullscreened": function (obj) { with (obj) { return fullscreened; } }, "source": function (obj) { with (obj) { return source; } }, "disablepause": function (obj) { with (obj) { return disablepause; } }, "disableseeking": function (obj) { with (obj) { return disableseeking; } }, "skipseconds": function (obj) { with (obj) { return skipseconds; } }, "skipinitial": function (obj) { with (obj) { return skipinitial; } }, "showsettings": function (obj) { with (obj) { return showsettings; } }, "settingsoptionsvisible": function (obj) { with (obj) { return settingsoptionsvisible; } }, "dyntracks": function (obj) { with (obj) { return dyntracks; } }, "csstracks || css": function (obj) { with (obj) { return csstracks || css; } }, "tracktagssupport || allowtexttrackupload": function (obj) { with (obj) { return tracktagssupport || allowtexttrackupload; } }, "trackselectorhovered": function (obj) { with (obj) { return trackselectorhovered; } }, "tracktagsstyled": function (obj) { with (obj) { return tracktagsstyled; } }, "trackcuetext": function (obj) { with (obj) { return trackcuetext; } }, "uploadtexttracksvisible": function (obj) { with (obj) { return uploadtexttracksvisible; } }, "acceptedtracktexts": function (obj) { with (obj) { return acceptedtracktexts; } }, "uploadlocales": function (obj) { with (obj) { return uploadlocales; } }, "dynplaybutton": function (obj) { with (obj) { return dynplaybutton; } }, "cssplaybutton || css": function (obj) { with (obj) { return cssplaybutton || css; } }, "tmplplaybutton": function (obj) { with (obj) { return tmplplaybutton; } }, "playbutton_active": function (obj) { with (obj) { return playbutton_active; } }, "dynloader": function (obj) { with (obj) { return dynloader; } }, "cssloader || css": function (obj) { with (obj) { return cssloader || css; } }, "tmplloader": function (obj) { with (obj) { return tmplloader; } }, "loader_active": function (obj) { with (obj) { return loader_active; } }, "dynshare": function (obj) { with (obj) { return dynshare; } }, "cssshare || css": function (obj) { with (obj) { return cssshare || css; } }, "tmplshare": function (obj) { with (obj) { return tmplshare; } }, "sharevideourl && sharevideo.length > 0": function (obj) { with (obj) { return sharevideourl && sharevideo.length > 0; } }, "sharevideourl": function (obj) { with (obj) { return sharevideourl; } }, "sharevideo": function (obj) { with (obj) { return sharevideo; } }, "dynmessage": function (obj) { with (obj) { return dynmessage; } }, "cssmessage || css": function (obj) { with (obj) { return cssmessage || css; } }, "tmplmessage": function (obj) { with (obj) { return tmplmessage; } }, "message_active": function (obj) { with (obj) { return message_active; } }, "message": function (obj) { with (obj) { return message; } }, "dyntopmessage": function (obj) { with (obj) { return dyntopmessage; } }, "csstopmessage || css": function (obj) { with (obj) { return csstopmessage || css; } }, "tmpltopmessage": function (obj) { with (obj) { return tmpltopmessage; } }, "topmessage": function (obj) { with (obj) { return topmessage; } }, "poster": function (obj) { with (obj) { return poster; } }/**/ })
        .attachStringTable(Assets.strings)
        .addStrings({
            "video-error": "An error occurred, please try again later. Click to retry.",
            "all-settings": "All settings",
            "player-speed": "Player speed",
            "full-screen": "Full screen"
        });
});
Scoped.define("module:VideoPlayer.Dynamics.PlayerStates.State", [
    "base:States.State",
    "base:Events.ListenMixin",
    "base:Objs"
], function(State, ListenMixin, Objs, scoped) {
    return State.extend({
        scoped: scoped
    }, [ListenMixin, {

        dynamics: [],

        _start: function() {
            this.dyn = this.host.dynamic;
            Objs.iter(Objs.extend({
                "loader": false,
                "message": false,
                "playbutton": false,
                "controlbar": false
            }, Objs.objectify(this.dynamics)), function(value, key) {
                this.dyn.set(key + "_active", value);
            }, this);
            this._started();
        },

        _started: function() {},

        play: function() {
            this.dyn.set("autoplay", true);
        },

        uploadTextTrack: function(file, locale) {
            try {
                this.next('TextTrackUploading', {
                    file: file,
                    locale: locale
                });
            } catch (e) {
                console.warn("Error switch to text track uploading state. Message: ", e);
                this.nextPlayer();
            }
        },

        nextPlayer: function() {
            var _recorder = this.dyn.parent();
            if (typeof _recorder.record === 'function')
                _recorder.host.state().next("Player");
            else
                this.next("LoadPlayer");
        }
    }]);
});

Scoped.define("module:VideoPlayer.Dynamics.PlayerStates.TextTrackUploading", [
    "module:VideoPlayer.Dynamics.PlayerStates.State",
    "browser:Upload.FileUploader",
    "browser:Upload.MultiUploader",
    "browser:Blobs",
    "base:Async",
    "base:Objs"
], function(State, FileUploader, MultiUploader, Blobs, Async, Objs, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        _locals: ["file", "locale"],
        dynamics: ['text-tracks', 'loading'],

        _started: function() {
            this.uploadTextTrackFile(this._file, this._locale);
        },

        uploadTextTrackFile: function(file, locale) {
            var _dynamics, _uploader, _initialTracks, _counter;
            _dynamics = this.dyn.parent();

            // Check either recorder or player dynamics
            if (typeof _dynamics.record !== 'function') {
                _dynamics = this.dyn;
            }
            _initialTracks = _dynamics.get('tracktags');

            // Get file url
            if (_dynamics.get("uploadoptions")) {
                filename = {
                    url: _dynamics.get("uploadoptions").textTracks
                };
            } else {
                filename = {
                    url: "/text-track/" + file.value.split(/(\\|\/)/g).pop() + "/lang/" + locale.lang + "/label/" + locale.label
                };
            }

            try {
                _uploader = FileUploader.create(Objs.extend({
                    source: file,
                    data: {
                        lang: locale.lang,
                        label: locale.label
                    }
                }, filename));
                _uploader.upload();

                _uploader.on("success", function(response) {
                    _counter = 1;
                    _dynamics.set("tracktags", null);
                    Blobs.loadFileIntoString(file).success(function(content) {
                        response = response.length > 0 ? JSON.parse(response) : {
                            lang: locale.lang,
                            label: locale.label
                        };

                        _initialTracks.push({
                            lang: response.lang,
                            label: response.label,
                            kind: "subtitles",
                            enabled: true,
                            content: content
                        });

                        Objs.iter(_initialTracks, function(value) {
                            if (_counter === _initialTracks.length) {
                                _dynamics.set("tracktags", _initialTracks);
                                this.nextPlayer();
                            }
                            _counter++;
                        }, this);

                    }, this);
                }, this);

                _uploader.on("error", function(e) {
                    var bestError = _dynamics.string("uploading-failed");
                    try {
                        e.forEach(function(ee) {
                            for (var key in ee)
                                if (_dynamics.string("upload-error-" + key))
                                    bestError = this.dyn.string("upload-error-" + key);
                        }, this);
                    } catch (err) {}
                    _dynamics.set("player_active", false);
                    this.next("FatalError", {
                        message: bestError,
                        retry: "Player"
                    });
                }, this);

                _uploader.on("progress", function(uploaded, total) {

                }, this);

            } catch (e) {
                console.warn('Error occurred during uploading text track files. Message: ', e);
            }
        }
    });
});


Scoped.define("module:VideoPlayer.Dynamics.PlayerStates.FatalError", [
    "module:VideoPlayer.Dynamics.PlayerStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["message"],
        _locals: ["message"],

        _started: function() {
            this.dyn.set("message", this._message || this.dyn.string("video-error"));
        }

    });
});


Scoped.define("module:VideoPlayer.Dynamics.PlayerStates.Initial", [
    "module:VideoPlayer.Dynamics.PlayerStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader"],

        _started: function() {
            this.dyn.set("imageelement_active", false);
            this.dyn.set("videoelement_active", false);
            if (this.dyn.get("ready"))
                this.next("LoadPlayer");
            else {
                this.listenOn(this.dyn, "change:ready", function() {
                    this.next("LoadPlayer");
                });
            }
        }
    });
});


Scoped.define("module:VideoPlayer.Dynamics.PlayerStates.LoadPlayer", [
    "module:VideoPlayer.Dynamics.PlayerStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader"],

        _started: function() {
            this.listenOn(this.dyn, "error:poster", function() {
                this.next("LoadPlayerDirectly");
            }, this);
            this.listenOn(this.dyn, "image-attached", function() {
                this.next("PosterReady");
            }, this);
            this.dyn.reattachImage();
        }

    });
});


Scoped.define("module:VideoPlayer.Dynamics.PlayerStates.LoadPlayerDirectly", [
    "module:VideoPlayer.Dynamics.PlayerStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader"],

        _started: function() {
            this.listenOn(this.dyn, "error:attach", function() {
                this.next("LoadError");
            }, this);
            this.listenOn(this.dyn, "error:poster", function() {
                if (!this.dyn.get("states").poster_error.ignore)
                    this.next("PosterError");
            }, this);
            this.listenOn(this.dyn, "attached", function() {
                this.next("PosterReady");
            }, this);
            this.dyn.reattachVideo();
        }

    });
});


Scoped.define("module:VideoPlayer.Dynamics.PlayerStates.LoadError", [
    "module:VideoPlayer.Dynamics.PlayerStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["message"],

        _started: function() {
            this.dyn.set("message", this.dyn.string("video-error"));
            this.listenOn(this.dyn, "message:click", function() {
                this.next("LoadPlayer");
            }, this);
        }

    });
});


Scoped.define("module:VideoPlayer.Dynamics.PlayerStates.PosterReady", [
    "module:VideoPlayer.Dynamics.PlayerStates.State",
    "module:PopupHelper",
    "base:Objs"
], function(State, PopupHelper, Objs, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["playbutton"],

        _started: function() {
            this.listenOn(this.dyn, "error:poster", function() {
                if (!this.dyn.get("states").poster_error.ignore)
                    this.next("PosterError");
            }, this);
            if (this.dyn.get("autoplay") || this.dyn.get("skipinitial"))
                this.play();
        },

        play: function() {
            if (!this.dyn.get("popup")) {
                this.next("Preroll");
                return;
            }
            var popup = this.auto_destroy(new PopupHelper());
            var dynamic = this.auto_destroy(new this.dyn.cls({
                element: popup.containerInner,
                attrs: Objs.extend(this.dyn.cloneAttrs(), this.dyn.popupAttrs())
            }));
            this._delegatedPlayer = dynamic;
            this.dyn.delegateEvents(null, dynamic);
            popup.on("hide", function() {
                this._delegatedPlayer = null;
                dynamic.destroy();
                popup.destroy();
            }, this);
            popup.show();
            dynamic.activate();
        }

    });
});



Scoped.define("module:VideoPlayer.Dynamics.PlayerStates.Preroll", [
    "module:VideoPlayer.Dynamics.PlayerStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: [],

        _started: function() {
            if (this.dyn._prerollAd) {
                this.dyn._prerollAd.once("finished", function() {
                    this.next("LoadVideo");
                }, this);
                this.dyn._prerollAd.once("adskipped", function() {
                    this.next("LoadVideo");
                }, this);
                // TODO: video height and width return NaN before ad start even when ba-width/ba-height are provided
                this.dyn._prerollAd.executeAd({
                    width: this.dyn.videoWidth(),
                    height: this.dyn.videoHeight()
                });
            } else
                this.next("LoadVideo");
        }

    });
});



Scoped.define("module:VideoPlayer.Dynamics.PlayerStates.PosterError", [
    "module:VideoPlayer.Dynamics.PlayerStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["message"],

        _started: function() {
            this.dyn.set("message", this.dyn.string("video-error"));
            this.listenOn(this.dyn, "message:click", function() {
                this.next(this.dyn.get("states").poster_error.click_play ? "LoadVideo" : "LoadPlayer");
            }, this);
        }

    });
});



Scoped.define("module:VideoPlayer.Dynamics.PlayerStates.LoadVideo", [
    "module:VideoPlayer.Dynamics.PlayerStates.State",
    "browser:Info",
    "browser:Dom",
    "base:Timers.Timer"
], function(State, Info, Dom, Timer, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader"],

        _started: function() {
            if (!this.dyn.get("videoelement_active")) {
                this.listenOn(this.dyn, "error:attach", function() {
                    this.next("LoadError");
                }, this);
                this.listenOn(this.dyn, "error:poster", function() {
                    if (!this.dyn.get("states").poster_error.ignore)
                        this.next("PosterError");
                }, this);
                this.listenOn(this.dyn, "attached", function() {
                    this.__loadVideo();
                }, this);
                this.dyn.reattachVideo();
            } else
                this.__loadVideo();
        },

        __loadVideo: function() {
            this.listenOn(this.dyn, "error:video", function() {
                this.next("ErrorVideo");
            }, this);
            this.listenOn(this.dyn, "playing", function() {
                if (this.destroyed() || this.dyn.destroyed())
                    return;
                if (this.dyn.get("autoseek"))
                    this.dyn.execute("seek", this.dyn.get("autoseek"));
                this.next("PlayVideo");
            }, this);
            if (this.dyn.get("skipinitial") && !this.dyn.get("autoplay"))
                this.next("PlayVideo");
            else {
                if (Info.isChromiumBased() && !this.dyn.get("skipinitial")) {
                    var video = this.dyn.__video;
                    video.isMuted = true;
                    Dom.userInteraction(function() {
                        video.isMuted = false;
                    }, this);
                }

                var counter = 10;
                this.auto_destroy(new Timer({
                    context: this,
                    fire: function() {
                        if (!this.destroyed() && !this.dyn.destroyed() && this.dyn.player)
                            this.dyn.player.play();
                        counter--;
                        if (counter === 0)
                            this.next("PlayVideo");
                    },
                    delay: 200,
                    immediate: true
                }));
            }
        }
    });
});



Scoped.define("module:VideoPlayer.Dynamics.PlayerStates.ErrorVideo", [
    "module:VideoPlayer.Dynamics.PlayerStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["message"],

        _started: function() {
            this.dyn.set("message", this.dyn.string("video-error"));
            this.listenOn(this.dyn, "message:click", function() {
                this.next("LoadVideo");
            }, this);
        }

    });
});




Scoped.define("module:VideoPlayer.Dynamics.PlayerStates.PlayVideo", [
    "module:VideoPlayer.Dynamics.PlayerStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["controlbar"],

        _started: function() {
            this.dyn.set("autoplay", false);
            this.listenOn(this.dyn, "change:currentstream", function() {
                this.dyn.set("autoplay", true);
                this.dyn.set("autoseek", this.dyn.player.position());
                this.dyn.reattachVideo();
                this.next("LoadPlayer");
            }, this);
            this.listenOn(this.dyn, "ended", function() {
                this.dyn.set("autoseek", null);
                this.next("NextVideo");
            }, this);
            this.listenOn(this.dyn, "change:buffering", function() {
                this.dyn.set("loader_active", this.dyn.get("buffering"));
            }, this);
            this.listenOn(this.dyn, "error:video", function() {
                this.next("ErrorVideo");
            }, this);
        },

        play: function() {
            if (!this.dyn.get("playing"))
                this.dyn.player.play();
        }

    });
});


Scoped.define("module:VideoPlayer.Dynamics.PlayerStates.NextVideo", [
    "module:VideoPlayer.Dynamics.PlayerStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        _started: function() {
            if (this.dyn.get("playlist")) {
                var list = this.dyn.get("playlist");
                var head = list.shift();
                if (this.dyn.get("loop"))
                    list.push(head);
                this.dyn.set("playlist", list);
                if (list.length > 0) {
                    var pl0 = list[0];
                    this.dyn.set("poster", pl0.poster);
                    this.dyn.set("source", pl0.source);
                    this.dyn.set("sources", pl0.sources);
                    this.dyn.trigger("playlist-next", pl0);
                    this.dyn.reattachVideo();
                    this.dyn.set("autoplay", true);
                    this.next("LoadPlayer");
                    return;
                }
            }
            this.next("PosterReady");
        }

    });
});
Scoped.define("module:VideoPlayer.Dynamics.Share", [
    "dynamics:Dynamic",
    "module:Assets"
], function(Class, Assets, scoped) {

    var SHARES = {
        facebook: 'https://facebook.com/sharer/sharer.php?u=',
        twitter: 'https://twitter.com/home?status=',
        gplus: 'https://plus.google.com/share?url='
    };

    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "<div class=\"{{cssplayer}}-share-action-container\">\n    <div class=\"{{cssplayer}}-toggle-share-container\">\n        <div class=\"{{cssplayer}}-button-inner\" onclick=\"{{toggleShare()}}\">\n            <i class=\"{{csscommon}}-icon-share\"></i>\n        </div>\n    </div>\n    <div class=\"{{cssplayer}}-social-buttons-container\">\n        <ul class=\"{{cssplayer}}-socials-list\" ba-repeat=\"{{share :: shares}}\">\n            <li class=\"{{cssplayer}}-single-social\">\n                <div class=\"{{cssplayer}}-button-inner\">\n                    <i class=\"{{csscommon}}-icon-{{share}}\" onclick=\"{{shareMedia(share)}}\"></i>\n                </div>\n            </li>\n        </ul>\n    </div>\n</div>\n",

                attrs: {
                    css: "ba-videoplayer",
                    csscommon: "ba-commoncss",
                    cssplayer: "ba-player",
                    url: "",
                    shares: []
                },

                functions: {

                    shareMedia: function(share) {
                        window.open(SHARES[share] + this.get("url"), 'pop', 'width=600 height=400');
                    },

                    toggleShare: function() {
                        /*
                        var container = this.activeElement().querySelector().firstElementChild;
                        container.style.right = container.style.right ? "" : "-45px";
                        */
                    }

                }
            };
        }).register("ba-videoplayer-share")
        .registerFunctions({ /**/"cssplayer": function (obj) { with (obj) { return cssplayer; } }, "toggleShare()": function (obj) { with (obj) { return toggleShare(); } }, "csscommon": function (obj) { with (obj) { return csscommon; } }, "shares": function (obj) { with (obj) { return shares; } }, "share": function (obj) { with (obj) { return share; } }, "shareMedia(share)": function (obj) { with (obj) { return shareMedia(share); } }/**/ })
        .attachStringTable(Assets.strings)
        .addStrings({
            "share": "Share media"
        });
});
Scoped.define("module:VideoPlayer.Dynamics.Topmessage", [
    "dynamics:Dynamic"
], function(Class, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div class=\"{{css}}-topmessage-container\">\n    <div class='{{css}}-topmessage-background'>\n    </div>\n    <div data-selector=\"topmessage-message-block\" class='{{css}}-topmessage-message'>\n        {{topmessage}}\n    </div>\n</div>\n",

                attrs: {
                    "css": "ba-videoplayer",
                    "csscommon": "ba-commoncss",
                    "cssplayer": "ba-player",
                    "topmessage": ''
                }

            };
        })
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "topmessage": function (obj) { with (obj) { return topmessage; } }/**/ })
        .register("ba-videoplayer-topmessage");
});
Scoped.define("module:VideoPlayer.Dynamics.Tracks", [
    "dynamics:Dynamic",
    "base:Async",
    "module:Assets"
], [
    "dynamics:Partials.ClickPartial",
    "dynamics:Partials.RepeatElementPartial"
], function(Class, Async, Assets, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "<div data-selector=\"text-tracks-overlay\"\n     class=\"{{cssplayer}}-text-tracks-overlay\n     {{activitydelta > 5000 && hideoninactivity ? (cssplayer + '-track-dashboard-hidden') : ''}}\n\">\n\n    <div data-selector=\"cue-content\" ba-show=\"{{tracktagsstyled && trackcuetext}}\" class=\"{{cssplayer}}-cue-content\">\n        {{trackcuetext}}\n    </div>\n    <div class=\"{{csscommon}}-options-popup {{csscommon}}-options-list-{{tracksshowselection || trackselectorhovered ? 'visible' : 'hidden'}}\">\n        <div ba-show=\"{{tracksshowselection || trackselectorhovered}}\" tabindex=\"-1\"\n             onmouseenter=\"{{hover_cc(domEvent, true)}}\" onmouseover=\"{{hover_cc(domEvent, true)}}\" onmouseleave=\"{{hover_cc(domEvent, false)}}\"\n        >\n            <div data-selector=\"tracks-selector-list\"\n                 class=\"{{csscommon}}-initial-options-list {{csscommon}}-tracks-selector-list {{csscommon}}-options-list-visible {{csscommon}}-options-list\"\n                 ba-if=\"{{tracktags}}\"\n            >\n                <div ba-repeat-element=\"{{track :: tracktags}}\"\n                     class=\"{{csscommon}}-tracks-selector {{csscommon}}-options-list-item\"\n                     ba-click=\"{{select_track(track)}}\"\n                >\n                    <div class=\"{{csscommon}}-inner-text\">\n                        {{track.label}}\n                    </div>\n                </div>\n                <div data-selector=\"text-tracks-open-form-button\"\n                     class=\"{{csscommon}}-options-list-item {{csscommon}}-open-next\"\n                     ba-if=\"{{allowtexttrackupload}}\" title=\"{{string('upload-text-tracks')}}\"\n                     onclick=\"{{move_to_option(domEvent, 'text-tracks-uploader-form')}}\"\n                >\n                    <div class=\"{{csscommon}}-inner-text\">{{string('upload-text-tracks')}}</div>\n                    <div class=\"{{csscommon}}-inner-icon\"></div>\n                </div>\n            </div>\n\n            <div data-selector=\"text-tracks-uploader-form\"\n                 class=\"{{csscommon}}-options-list-hidden {{csscommon}}-options-list {{csscommon}}-text-tracks-uploader-form\"\n                 ba-if=\"{{allowtexttrackupload}}\"\n            >\n                <div class=\"{{csscommon}}-full-width {{csscommon}}-options-list-item\">\n                    <div data-selector=\"close-text-tracks-upload-form\"\n                         title=\"{{string('back')}}\"\n                         class=\"{{csscommon}}-open-previous {{csscommon}}-text-left\"\n                         onclick=\"{{move_to_option(domEvent)}}\"\n                    >\n                        <div class=\"{{csscommon}}-inner-icon\"></div>\n                        <div class=\"{{csscommon}}-inner-text\">{{string('back')}}</div>\n                    </div>\n                </div>\n\n                <div class=\"{{csscommon}}-full-width {{csscommon}}-options-list-item\">\n                    <form class=\"{{csscommon}}-form {{csscommon}}-text-tracks-upload-form\">\n                        <div class=\"{{csscommon}}-form-input {{csscommon}}-select-field {{csscommon}}-direction-pointer\">\n                            <select data-selector=\"select-text-tracks-label\" tabindex=\"-1\"\n                                    class=\"{{csscommon}}-form-input {{csscommon}}-text-tracks-label-input\"\n                                    name=\"{{csscommon}}-text-tracks-label-select\"\n                                    onmousedown=\"{{prevent_un_hover(domEvent)}}\"\n                                    onmousemove=\"{{prevent_un_hover(domEvent)}}\"\n                                    onchange=\"{{selected_label_value(domEvent)}}\"\n                            >\n                                <option disabled value selected>\n                                    {{string('select-text-track-language')}}\n                                </option>\n                                <option ba-repeat-element=\"{{locale :: uploadlocales}}\" value=\"{{locale.lang}}\">\n                                    {{locale.label}}\n                                </option>\n                            </select>\n                        </div>\n                        <div class=\"{{csscommon}}-form-input {{csscommon}}-button\" ba-show=\"{{chosenoption}}\">\n                            <input type=\"file\" data-selector=\"select-text-tracks-file\"\n                                   title=\"{{chosenoption ? string('select-text-track-file') : string('info-select-locale-first')}}\"\n                                   onchange=\"{{upload_text_track(domEvent)}}\"\n                                   class=\"{{csscommon}}-text-tracks-file\"\n                                   accept=\"{{acceptedtracktexts}}\"\n                            />\n                            {{chosenoption ? string('select-text-track-file') : string('info-select-locale-first')}}\n                        </div>\n                    </form>\n\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n",

                attrs: {
                    "css": "ba-videoplayer",
                    "csscommon": "ba-commoncss",
                    "cssplayer": "ba-player",
                    "trackcuetext": null,
                    "acceptedtracktexts": "text/vtt,application/ttml+xml,type/subtype",
                    "trackselectorhovered": false,
                    "uploadtexttracksvisible": false,
                    "uploadlocales": [],
                    "chosenoption": null
                },

                functions: {
                    select_track: function(track) {
                        this.parent().set("trackselectorhovered", false);
                        this.parent().trigger("switch-track", track);
                    },

                    hover_cc: function(ev, hover) {
                        // Not show CC on hover during settings block is open
                        if (this.parent().get("settingsoptionsvisible")) return;

                        // Don't lose focus on clicking move between sliders
                        // After if element has an focus not close it till next mouseover/mouseleave
                        if (!hover && ev[0].target === document.activeElement) {
                            Async.eventually(function() {
                                ev[0].target.blur();
                            }, this, 500);
                            return;
                        }

                        // Show or hide overlay element on mouse out
                        return this.parent().set("trackselectorhovered", hover);
                    },

                    prevent_un_hover: function(ev) {
                        ev[0].target.blur();
                        var _parentSelector, _parentElement;
                        _parentSelector = "." + this.parent().get('csscommon') + '-options-popup';
                        _parentElement = document.querySelector(_parentSelector);
                        if (_parentElement)
                            _parentElement.focus();
                        return this.parent().set("trackselectorhovered", true);
                    },

                    selected_label_value: function(select) {
                        var _options, _chosen;
                        _options = select[0].target.options;
                        _chosen = _options[_options.selectedIndex];

                        if (_chosen.value) {
                            this.set("chosenoption", {
                                lang: _chosen.value,
                                label: _chosen.text
                            });
                        } else {
                            this.set("chosenoption", null);
                        }
                    },

                    upload_text_track: function(domEvent) {
                        if (this.get('chosenoption'))
                            this.trigger("upload-text-tracks", domEvent[0].target, this.get('chosenoption'));
                        else {
                            console.warn('can not send empty label');
                        }
                    },

                    move_to_option: function(domEvent, classSelector) {
                        this.trigger("move_to_option", domEvent[0].target, classSelector);
                    }
                }
            };
        })
        .register("ba-videoplayer-tracks")
        .registerFunctions({ /**/"cssplayer": function (obj) { with (obj) { return cssplayer; } }, "activitydelta > 5000 && hideoninactivity ? (cssplayer + '-track-dashboard-hidden') : ''": function (obj) { with (obj) { return activitydelta > 5000 && hideoninactivity ? (cssplayer + '-track-dashboard-hidden') : ''; } }, "tracktagsstyled && trackcuetext": function (obj) { with (obj) { return tracktagsstyled && trackcuetext; } }, "trackcuetext": function (obj) { with (obj) { return trackcuetext; } }, "csscommon": function (obj) { with (obj) { return csscommon; } }, "tracksshowselection || trackselectorhovered ? 'visible' : 'hidden'": function (obj) { with (obj) { return tracksshowselection || trackselectorhovered ? 'visible' : 'hidden'; } }, "tracksshowselection || trackselectorhovered": function (obj) { with (obj) { return tracksshowselection || trackselectorhovered; } }, "hover_cc(domEvent, true)": function (obj) { with (obj) { return hover_cc(domEvent, true); } }, "hover_cc(domEvent, false)": function (obj) { with (obj) { return hover_cc(domEvent, false); } }, "tracktags": function (obj) { with (obj) { return tracktags; } }, "select_track(track)": function (obj) { with (obj) { return select_track(track); } }, "track.label": function (obj) { with (obj) { return track.label; } }, "allowtexttrackupload": function (obj) { with (obj) { return allowtexttrackupload; } }, "string('upload-text-tracks')": function (obj) { with (obj) { return string('upload-text-tracks'); } }, "move_to_option(domEvent, 'text-tracks-uploader-form')": function (obj) { with (obj) { return move_to_option(domEvent, 'text-tracks-uploader-form'); } }, "string('back')": function (obj) { with (obj) { return string('back'); } }, "move_to_option(domEvent)": function (obj) { with (obj) { return move_to_option(domEvent); } }, "prevent_un_hover(domEvent)": function (obj) { with (obj) { return prevent_un_hover(domEvent); } }, "selected_label_value(domEvent)": function (obj) { with (obj) { return selected_label_value(domEvent); } }, "string('select-text-track-language')": function (obj) { with (obj) { return string('select-text-track-language'); } }, "uploadlocales": function (obj) { with (obj) { return uploadlocales; } }, "locale.lang": function (obj) { with (obj) { return locale.lang; } }, "locale.label": function (obj) { with (obj) { return locale.label; } }, "chosenoption": function (obj) { with (obj) { return chosenoption; } }, "chosenoption ? string('select-text-track-file') : string('info-select-locale-first')": function (obj) { with (obj) { return chosenoption ? string('select-text-track-file') : string('info-select-locale-first'); } }, "upload_text_track(domEvent)": function (obj) { with (obj) { return upload_text_track(domEvent); } }, "acceptedtracktexts": function (obj) { with (obj) { return acceptedtracktexts; } }/**/ })
        .attachStringTable(Assets.strings)
        .addStrings({
            "upload-text-tracks": "Upload track text files",
            "select-text-track-language": "Subtitle Language",
            "info-select-locale-first": "First select locale",
            "select-text-track-file": "Click to select file",
            "back": "back"
        });
});
Scoped.define("module:VideoRecorder.Dynamics.Chooser", [
    "dynamics:Dynamic",
    "module:Assets",
    "browser:Info"
], [
    "dynamics:Partials.ClickPartial",
    "dynamics:Partials.IfPartial"
], function(Class, Assets, Info, scoped) {

    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "<div class=\"{{css}}-chooser-container\">\n\n\t<div class=\"{{css}}-chooser-button-container\">\n\t\t<div ba-repeat=\"{{action :: actions}}\">\n\t\t\t<div ba-hotkey:space^enter=\"{{click_action(action)}}\" onmouseout=\"this.blur()\"\n\t\t\t\t tabindex=\"0\" class=\"{{css}}-chooser-button-{{action.index}}\"\n\t\t\t     ba-click=\"{{click_action(action)}}\"\n\t\t\t>\n\t\t\t\t<input ba-if=\"{{action.select && action.capture}}\"\n\t\t\t\t\t   type=\"file\"\n\t\t\t\t\t   class=\"{{css}}-chooser-file\"\n\t\t\t\t\t\t onchange=\"{{select_file_action(action, domEvent)}}\"\n\t\t\t\t\t\t onclick=\"this.value=''\"\n\t\t\t\t\t   accept=\"{{action.accept}}\"\n\t\t\t\t\t   capture />\n\t\t\t\t<input ba-if=\"{{action.select && !action.capture}}\"\n\t\t\t\t\t   type=\"file\"\n\t\t\t\t\t   class=\"{{css}}-chooser-file\"\n\t\t\t\t\t   onchange=\"{{select_file_action(action, domEvent)}}\"\n\t\t\t\t\t   accept=\"{{action.accept}}\"\n\t\t\t\t\t   />\n\t\t\t\t<i class=\"{{csscommon}}-icon-{{action.icon}}\"\n\t\t\t\t   ba-if=\"{{action.icon}}\"></i>\n\t\t\t\t<span>\n\t\t\t\t\t{{action.label}}\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n",

                attrs: {
                    "css": "ba-videorecorder",
                    "csscommon": "ba-commoncss",
                    "cssrecorder": "ba-recorder",
                    "allowrecord": true,
                    "allowupload": true,
                    "allowscreen": false,

                    "primaryrecord": true,
                    "recordviafilecapture": false,

                    "allowcustomupload": true,
                    "allowedextensions": null,
                    "onlyaudio": false

                },

                types: {
                    "allowedextensions": "array",
                    "recordviafilecapture": "boolean"
                },

                collections: ["actions"],

                create: function() {
                    var custom_accept_string = "";
                    if (this.get("allowedextensions") && this.get("allowedextensions").length > 0) {
                        var browser_support = Info.isEdge() || Info.isChrome() || Info.isOpera() || (Info.isFirefox() && Info.firefoxVersion() >= 42) || (Info.isInternetExplorer() && Info.internetExplorerVersion() >= 10);
                        if (browser_support)
                            custom_accept_string = "." + this.get("allowedextensions").join(",.");
                    } else if (!this.get("allowcustomupload")) {
                        custom_accept_string = "video/*,video/mp4";
                    }

                    var order = [];
                    if (this.get("primaryrecord")) {
                        if (this.get("allowrecord"))
                            order.push("record");
                        if (this.get("allowscreen"))
                            order.push("screen");
                        if (this.get("allowupload"))
                            order.push("upload");
                    } else {
                        if (this.get("allowscreen"))
                            order.push("screen");
                        if (this.get("allowupload"))
                            order.push("upload");
                        if (this.get("allowrecord"))
                            order.push("record");
                    }
                    var actions = this.get("actions");
                    order.forEach(function(act, index) {
                        switch (act) {
                            case "record":
                                actions.add({
                                    type: "record",
                                    index: index,
                                    icon: !this.get("onlyaudio") ? 'videocam' : 'volume-up',
                                    label: this.string(this.get("onlyaudio") ? "record-audio" : "record-video"),
                                    select: Info.isMobile() && !(Info.isAndroid() && Info.isCordova()) && this.get("recordviafilecapture"),
                                    capture: true,
                                    accept: "video/*,video/mp4;capture=camcorder"
                                });
                                break;
                            case "upload":
                                actions.add({
                                    type: "upload",
                                    index: index,
                                    icon: "upload",
                                    label: this.string("upload-video"),
                                    select: !(Info.isiOS() && Info.isCordova()),
                                    accept: Info.isMobile() && !(Info.isAndroid() && Info.isCordova()) ? "video/*,video/mp4" : custom_accept_string
                                });
                                break;
                            case "screen":
                                actions.add({
                                    type: "screen",
                                    index: index,
                                    icon: "television",
                                    label: this.string("record-screen")
                                });
                                break;
                        }
                    }, this);
                },

                functions: {

                    click_action: function(action) {
                        if (action.get("select"))
                            return;
                        if (action.get("type") === "screen") {
                            this.trigger("record-screen");
                            return;
                        }
                        if (Info.isMobile() && Info.isCordova()) {
                            var self = this;
                            if (Info.isAndroid()) {
                                navigator.device.capture.captureVideo(function(mediaFiles) {
                                    self.trigger("upload", mediaFiles[0]);
                                }, function(error) {}, {
                                    limit: 1,
                                    duration: this.get("timelimit")
                                });
                            } else if (Info.isiOS()) {
                                navigator.camera.getPicture(function(url) {
                                    self.trigger("upload", {
                                        localURL: url,
                                        fullPath: url
                                    });
                                }, function(error) {}, {
                                    destinationType: Camera.DestinationType.FILE_URI,
                                    sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                                    mediaType: Camera.MediaType.VIDEO
                                });
                            }
                        } else
                            this.trigger("record");
                    },

                    select_file_action: function(action, domEvent) {
                        if (!action.get("select"))
                            return;
                        this.trigger("upload", domEvent[0].target);
                    }

                }

            };
        })
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "actions": function (obj) { with (obj) { return actions; } }, "click_action(action)": function (obj) { with (obj) { return click_action(action); } }, "action.index": function (obj) { with (obj) { return action.index; } }, "action.select && action.capture": function (obj) { with (obj) { return action.select && action.capture; } }, "select_file_action(action, domEvent)": function (obj) { with (obj) { return select_file_action(action, domEvent); } }, "action.accept": function (obj) { with (obj) { return action.accept; } }, "action.select && !action.capture": function (obj) { with (obj) { return action.select && !action.capture; } }, "csscommon": function (obj) { with (obj) { return csscommon; } }, "action.icon": function (obj) { with (obj) { return action.icon; } }, "action.label": function (obj) { with (obj) { return action.label; } }/**/ })
        .register("ba-videorecorder-chooser")
        .attachStringTable(Assets.strings)
        .addStrings({
            "record-video": "Record Video",
            "record-audio": "Record Audio",
            "record-screen": "Record Screen",
            "upload-video": "Upload Video"
        });
});
Scoped.define("module:VideoRecorder.Dynamics.Controlbar", [
    "dynamics:Dynamic",
    "module:Assets",
    "base:Timers.Timer"
], [
    "dynamics:Partials.ShowPartial",
    "dynamics:Partials.RepeatPartial"
], function(Class, Assets, Timer, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "<div class=\"{{css}}-dashboard\">\n\t<div class=\"{{css}}-backbar\"></div>\n\t<div data-selector=\"recorder-settings\" class=\"{{css}}-settings\" ba-show=\"{{settingsvisible && settingsopen}}\">\n\t\t<div class=\"{{css}}-settings-backbar\"></div>\n\t\t<div data-selector=\"settings-list-front\" class=\"{{css}}-settings-front\">\n\t\t\t<ul data-selector=\"camera-settings\" ba-repeat=\"{{camera :: cameras}}\" ba-show=\"{{!novideo && !allowscreen}}\">\n\t\t\t\t<li>\n\t\t\t\t\t<input tabindex=\"0\"\n\t\t\t\t\t\t   ba-hotkey:space^enter=\"{{selectCamera(camera.id)}}\" onmouseout=\"this.blur()\"\n\t\t\t\t\t\t   type='radio' name='camera' value=\"{{selectedcamera == camera.id}}\" onclick=\"{{selectCamera(camera.id)}}\"\n\t\t\t\t\t/>\n\t\t\t\t\t<span></span>\n\t\t\t\t\t<label tabindex=\"0\"\n\t\t\t\t\t\t   ba-hotkey:space^enter=\"{{selectCamera(camera.id)}}\" onmouseout=\"this.blur()\"\n\t\t\t\t\t\t   onclick=\"{{selectCamera(camera.id)}}\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{{camera.label}}\n\t\t\t\t\t</label>\n\t\t\t\t </li>\n\t\t\t</ul>\n\t\t\t<hr ba-show=\"{{(!noaudio && !novideo) || !allowscreen}}\"/>\n\t\t\t<ul data-selector=\"microphone-settings\" ba-repeat=\"{{microphone :: microphones}}\" ba-show=\"{{!noaudio && !allowscreen}}\">\n\t\t\t\t<li tabindex=\"0\"\n\t\t\t\t\tba-hotkey:space^enter=\"{{selectMicrophone(microphone.id)}}\" onmouseout=\"this.blur()\"\n\t\t\t\t\tonclick=\"{{selectMicrophone(microphone.id)}}\"\n\t\t\t\t>\n\t\t\t\t\t<input type='radio' name='microphone' value=\"{{selectedmicrophone == microphone.id}}\" />\n\t\t\t\t\t<span></span>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t{{microphone.label}}\n\t\t\t\t\t</label>\n\t\t\t\t </li>\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n\t<div data-selector=\"controlbar\" class=\"{{css}}-controlbar\">\n\n        <div class=\"{{css}}-leftbutton-container\" ba-show=\"{{settingsvisible}}\">\n            <div tabindex=\"0\"\n\t\t\t\t ba-hotkey:space^enter=\"{{settingsopen=!settingsopen}}\" onmouseout=\"this.blur()\"\n\t\t\t\t data-selector=\"record-button-icon-cog\" class=\"{{css}}-button-inner {{css}}-button-{{settingsopen ? 'selected' : 'unselected'}}\"\n                 onclick=\"{{settingsopen=!settingsopen}}\"\n                 onmouseenter=\"{{hover(string('settings'))}}\"\n                 onmouseleave=\"{{unhover()}}\"\n\t\t\t>\n                <i class=\"{{csscommon}}-icon-cog\"></i>\n            </div>\n        </div>\n\n        <div class=\"{{css}}-lefticon-container\" ba-show=\"{{settingsvisible && !novideo && !allowscreen}}\">\n            <div data-selector=\"record-button-icon-videocam\" class=\"{{csscommon}}-icon-inner\"\n                 onmouseenter=\"{{hover(string(camerahealthy ? 'camerahealthy' : 'cameraunhealthy'))}}\"\n                 onmouseleave=\"{{unhover()}}\"\n\t\t\t>\n                <i class=\"{{csscommon}}-icon-videocam {{csscommon}}-icon-state-{{camerahealthy ? 'good' : 'bad' }}\"></i>\n            </div>\n        </div>\n\n        <div class=\"{{css}}-lefticon-container\" ba-show=\"{{settingsvisible && !noaudio && !allowscreen}}\">\n            <div data-selector=\"record-button-icon-mic\" class=\"{{csscommon}}-icon-inner\"\n                 onmouseenter=\"{{hover(string(microphonehealthy ? 'microphonehealthy' : 'microphoneunhealthy'))}}\"\n                 onmouseleave=\"{{unhover()}}\"\n\t\t\t>\n                <i class=\"{{csscommon}}-icon-mic {{csscommon}}-icon-state-{{microphonehealthy ? 'good' : 'bad' }}\"></i>\n            </div>\n        </div>\n\n        <div class=\"{{css}}-lefticon-container\" ba-show=\"{{stopvisible && recordingindication}}\">\n            <div data-selector=\"recording-indicator\" class=\"{{css}}-recording-indication\">\n            </div>\n        </div>\n\n        <div class=\"{{css}}-label-container\" ba-show=\"{{controlbarlabel}}\">\n        \t<div data-selector=\"record-label-block\" class=\"{{css}}-label-label\">\n        \t\t{{controlbarlabel}}\n        \t</div>\n        </div>\n\n        <div class=\"{{css}}-rightbutton-container\" ba-show=\"{{recordvisible}}\">\n        \t<div tabindex=\"0\"\n\t\t\t\t ba-hotkey:space^enter=\"{{record()}}\" onmouseout=\"this.blur()\"\n\t\t\t\t data-selector=\"record-primary-button\" class=\"{{css}}-button-primary\"\n                 onclick=\"{{record()}}\"\n                 onmouseenter=\"{{hover(string('record-tooltip'))}}\"\n                 onmouseleave=\"{{unhover()}}\"\n\t\t\t>\n        \t\t{{string('record')}}\n        \t</div>\n        </div>\n\n        <div class=\"{{css}}-rightbutton-container\" ba-if=\"{{uploadcovershotvisible}}\">\n        \t<div data-selector=\"covershot-primary-button\" class=\"{{css}}-button-primary\"\n                 onmouseenter=\"{{hover(string('upload-covershot-tooltip'))}}\"\n                 onmouseleave=\"{{unhover()}}\">\n                 <input type=\"file\"\n\t\t\t\t       class=\"{{css}}-chooser-file\"\n\t\t\t\t       style=\"height:100\"\n\t\t\t\t       onchange=\"{{uploadCovershot(domEvent)}}\"\n\t\t\t\t       accept=\"{{covershot_accept_string}}\"\n\t\t\t\t />\n                 <span>\n        \t\t\t{{string('upload-covershot')}}\n        \t\t</span>\n        \t</div>\n        </div>\n\n        <div class=\"{{css}}-rightbutton-container\" ba-show=\"{{rerecordvisible}}\">\n        \t<div tabindex=\"0\"\n\t\t\t\t ba-hotkey:space^enter=\"{{rerecord()}}\" onmouseout=\"this.blur()\"\n\t\t\t\t data-selector=\"rerecord-primary-button\" class=\"{{css}}-button-primary\"\n                 onclick=\"{{rerecord()}}\"\n\t\t\t>\n        \t\t{{string('rerecord')}}\n        \t</div>\n        </div>\n\n\t\t<div class=\"{{css}}-rightbutton-container\" ba-show=\"{{cancelvisible}}\">\n\t\t\t<div tabindex=\"0\"\n\t\t\t\t ba-hotkey:space^enter=\"{{cancel()}}\" onmouseout=\"this.blur()\"\n\t\t\t\t data-selector=\"cancel-primary-button\" class=\"{{css}}-button-primary\"\n\t\t\t\t onclick=\"{{cancel()}}\"\n\t\t\t>\n\t\t\t\t{{string('cancel')}}\n\t\t\t</div>\n\t\t</div>\n\n        <div class=\"{{css}}-rightbutton-container\" ba-show=\"{{stopvisible}}\">\n        \t<div tabindex=\"0\"\n\t\t\t\t ba-hotkey:space^enter=\"{{stop()}}\" onmouseout=\"this.blur()\"\n\t\t\t\t data-selector=\"stop-primary-button\" class=\"{{css}}-button-primary {{mintimeindicator ? css + '-disabled': ''}}\"\n\t\t\t\t title=\"{{mintimeindicator ? string('stop-available-after').replace('%d', timeminlimit) : string('stop-tooltip')}}\"\n                 onclick=\"{{stop()}}\"\n\t\t\t>\n        \t\t{{string('stop')}}\n        \t</div>\n        </div>\n\n        <div class=\"{{css}}-centerbutton-container\" ba-show=\"{{skipvisible}}\">\n        \t<div tabindex=\"0\"\n\t\t\t\t ba-hotkey:space^enter=\"{{skip()}}\"  onmouseout=\"this.blur()\"\n\t\t\t\t data-selector=\"skip-primary-button\" class=\"{{css}}-button-primary\"\n                 onclick=\"{{skip()}}\"\n\t\t\t>\n        \t\t{{string('skip')}}\n        \t</div>\n        </div>\n\t</div>\n</div>\n",

                attrs: {
                    "css": "ba-videorecorder",
                    "csscommon": "ba-commoncss",
                    "cssrecorder": "ba-recorder",
                    "hovermessage": "",
                    "recordingindication": true,
                    "covershot_accept_string": "image/*,image/png,image/jpg,image/jpeg"
                },

                create: function() {
                    this.auto_destroy(new Timer({
                        context: this,
                        fire: function() {
                            this.set("recordingindication", !this.get("recordingindication"));
                        },
                        delay: 500
                    }));
                },

                functions: {
                    selectCamera: function(cameraId) {
                        this.trigger("select-camera", cameraId);
                    },
                    selectMicrophone: function(microphoneId) {
                        this.trigger("select-microphone", microphoneId);
                    },
                    hover: function(text) {
                        this.set("hovermessage", text);
                    },
                    unhover: function() {
                        this.set("hovermessage", "");
                    },
                    record: function() {
                        this.trigger("invoke-record");
                    },
                    rerecord: function() {
                        this.trigger("invoke-rerecord");
                    },
                    stop: function() {
                        this.trigger("invoke-stop");
                    },
                    skip: function() {
                        this.trigger("invoke-skip");
                    },
                    cancel: function() {
                        this.trigger("invoke-cancel");
                    },
                    uploadCovershot: function(domEvent) {
                        this.trigger("upload-covershot", domEvent[0].target);
                    }
                }

            };
        })
        .register("ba-videorecorder-controlbar")
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "settingsvisible && settingsopen": function (obj) { with (obj) { return settingsvisible && settingsopen; } }, "cameras": function (obj) { with (obj) { return cameras; } }, "!novideo && !allowscreen": function (obj) { with (obj) { return !novideo && !allowscreen; } }, "selectCamera(camera.id)": function (obj) { with (obj) { return selectCamera(camera.id); } }, "selectedcamera == camera.id": function (obj) { with (obj) { return selectedcamera == camera.id; } }, "camera.label": function (obj) { with (obj) { return camera.label; } }, "(!noaudio && !novideo) || !allowscreen": function (obj) { with (obj) { return (!noaudio && !novideo) || !allowscreen; } }, "microphones": function (obj) { with (obj) { return microphones; } }, "!noaudio && !allowscreen": function (obj) { with (obj) { return !noaudio && !allowscreen; } }, "selectMicrophone(microphone.id)": function (obj) { with (obj) { return selectMicrophone(microphone.id); } }, "selectedmicrophone == microphone.id": function (obj) { with (obj) { return selectedmicrophone == microphone.id; } }, "microphone.label": function (obj) { with (obj) { return microphone.label; } }, "settingsvisible": function (obj) { with (obj) { return settingsvisible; } }, "settingsopen=!settingsopen": function (obj) { with (obj) { return settingsopen=!settingsopen; } }, "settingsopen ? 'selected' : 'unselected'": function (obj) { with (obj) { return settingsopen ? 'selected' : 'unselected'; } }, "hover(string('settings'))": function (obj) { with (obj) { return hover(string('settings')); } }, "unhover()": function (obj) { with (obj) { return unhover(); } }, "csscommon": function (obj) { with (obj) { return csscommon; } }, "settingsvisible && !novideo && !allowscreen": function (obj) { with (obj) { return settingsvisible && !novideo && !allowscreen; } }, "hover(string(camerahealthy ? 'camerahealthy' : 'cameraunhealthy'))": function (obj) { with (obj) { return hover(string(camerahealthy ? 'camerahealthy' : 'cameraunhealthy')); } }, "camerahealthy ? 'good' : 'bad'": function (obj) { with (obj) { return camerahealthy ? 'good' : 'bad'; } }, "settingsvisible && !noaudio && !allowscreen": function (obj) { with (obj) { return settingsvisible && !noaudio && !allowscreen; } }, "hover(string(microphonehealthy ? 'microphonehealthy' : 'microphoneunhealthy'))": function (obj) { with (obj) { return hover(string(microphonehealthy ? 'microphonehealthy' : 'microphoneunhealthy')); } }, "microphonehealthy ? 'good' : 'bad'": function (obj) { with (obj) { return microphonehealthy ? 'good' : 'bad'; } }, "stopvisible && recordingindication": function (obj) { with (obj) { return stopvisible && recordingindication; } }, "controlbarlabel": function (obj) { with (obj) { return controlbarlabel; } }, "recordvisible": function (obj) { with (obj) { return recordvisible; } }, "record()": function (obj) { with (obj) { return record(); } }, "hover(string('record-tooltip'))": function (obj) { with (obj) { return hover(string('record-tooltip')); } }, "string('record')": function (obj) { with (obj) { return string('record'); } }, "uploadcovershotvisible": function (obj) { with (obj) { return uploadcovershotvisible; } }, "hover(string('upload-covershot-tooltip'))": function (obj) { with (obj) { return hover(string('upload-covershot-tooltip')); } }, "uploadCovershot(domEvent)": function (obj) { with (obj) { return uploadCovershot(domEvent); } }, "covershot_accept_string": function (obj) { with (obj) { return covershot_accept_string; } }, "string('upload-covershot')": function (obj) { with (obj) { return string('upload-covershot'); } }, "rerecordvisible": function (obj) { with (obj) { return rerecordvisible; } }, "rerecord()": function (obj) { with (obj) { return rerecord(); } }, "string('rerecord')": function (obj) { with (obj) { return string('rerecord'); } }, "cancelvisible": function (obj) { with (obj) { return cancelvisible; } }, "cancel()": function (obj) { with (obj) { return cancel(); } }, "string('cancel')": function (obj) { with (obj) { return string('cancel'); } }, "stopvisible": function (obj) { with (obj) { return stopvisible; } }, "stop()": function (obj) { with (obj) { return stop(); } }, "mintimeindicator ? css + '-disabled': ''": function (obj) { with (obj) { return mintimeindicator ? css + '-disabled': ''; } }, "mintimeindicator ? string('stop-available-after').replace('%d', timeminlimit) : string('stop-tooltip')": function (obj) { with (obj) { return mintimeindicator ? string('stop-available-after').replace('%d', timeminlimit) : string('stop-tooltip'); } }, "string('stop')": function (obj) { with (obj) { return string('stop'); } }, "skipvisible": function (obj) { with (obj) { return skipvisible; } }, "skip()": function (obj) { with (obj) { return skip(); } }, "string('skip')": function (obj) { with (obj) { return string('skip'); } }/**/ })
        .attachStringTable(Assets.strings)
        .addStrings({
            "settings": "Settings",
            "camerahealthy": "Lighting is good",
            "cameraunhealthy": "Lighting is not optimal",
            "microphonehealthy": "Sound is good",
            "microphoneunhealthy": "Cannot pick up any sound",
            "record": "Start",
            "record-tooltip": "Click here to record.",
            "rerecord": "Redo",
            "rerecord-tooltip": "Click here to redo.",
            "upload-covershot": "Upload Cover",
            "upload-covershot-tooltip": "Click here to upload custom cover shot",
            "stop": "Done",
            "stop-tooltip": "Click here to stop.",
            "skip": "Skip",
            "skip-tooltip": "Click here to skip.",
            "stop-available-after": "Minimum recording time is %d seconds",
            "cancel": "Cancel",
            "cancel-tooltip": "Click here to cancel."
        });
});
Scoped.define("module:VideoRecorder.Dynamics.Faceoutline", [
    "dynamics:Dynamic"
], function(Class, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "<svg viewBox=\"0 0 301 171\" style=\"width:100%; height:100%\">\n    <g>\n        <path fill=\"none\" stroke=\"white\" stroke-width=\"2\" stroke-miterlimit=\"10\" stroke-dasharray=\"3.0228,3.0228\" d=\"M198.5,79.831c0,40.542-22.752,78.579-47.5,78.579c-24.749,0-47.5-38.036-47.5-78.579c0-40.543,17.028-68.24,47.5-68.24C185.057,11.591,198.5,39.288,198.5,79.831z\"></path>\n    </g>\n</svg>"

            };
        })
        .registerFunctions({ /**//**/ })
        .register("ba-videorecorder-faceoutline");
});
Scoped.define("module:VideoRecorder.Dynamics.Imagegallery", [
    "dynamics:Dynamic",
    "base:Collections.Collection",
    "base:Properties.Properties",
    "base:Timers.Timer",
    "browser:Dom",
    "browser:Info"
], [
    "dynamics:Partials.StylesPartial"
], function(Class, Collection, Properties, Timer, Dom, Info, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "<div data-selector=\"slider-left-button\" class=\"{{css}}-imagegallery-leftbutton\">\n\t<div tabindex=\"0\" data-selector=\"slider-left-inner-button\"\n\t\t ba-hotkey:space^enter^left=\"{{left()}}\" onmouseout=\"this.blur()\"\n\t\t class=\"{{css}}-imagegallery-button-inner\" onclick=\"{{left()}}\"\n\t>\n\t\t<i class=\"{{css}}-icon-left-dir\"></i>\n\t</div>\n</div>\n\n<div data-selector=\"images-imagegallery-container\" ba-repeat=\"{{image::images}}\"\n\t class=\"{{css}}-imagegallery-container\" data-gallery-container>\n     <div tabindex=\"0\" class=\"{{css}}-imagegallery-image\"\n\t\t  ba-hotkey:space^enter=\"{{select(image)}}\" onmouseout=\"this.blur()\"\n          ba-styles=\"{{{left: image.left + 'px', top: image.top + 'px', width: image.width + 'px', height: image.height + 'px'}}}\"\n          onclick=\"{{select(image)}}\"\n\t >\n\t\t <div class=\"{{css}}-imagegallery-image-compat\" ba-show=\"{{ie10below}}\"></div>\n     </div>\n</div>\n\n<div data-selector=\"slider-right-button\" class=\"{{css}}-imagegallery-rightbutton\">\n\t<div tabindex=\"0\" data-selector=\"slider-right-inner-button\"\n\t\t ba-hotkey:space^enter^right=\"{{right()}}\" onmouseout=\"this.blur()\"\n\t\t class=\"{{css}}-imagegallery-button-inner\" onclick=\"{{right()}}\"\n\t>\n\t\t<i class=\"{{css}}-icon-right-dir\"></i>\n\t</div>\n</div>\n",

                attrs: {
                    "css": "ba-videorecorder",
                    "csscommon": "ba-commoncss",
                    "cssrecorder": "ba-recorder",
                    "imagecount": 5,
                    "imagenativewidth": 0,
                    "imagenativeheight": 0,
                    "snapshotindex": 0,
                    "selectedindex": 0,
                    "containerwidth": 0,
                    "containerheight": 0,
                    "containeroffset": 0,
                    "deltafrac": 1 / 8
                },

                computed: {
                    "imagewidth:imagecount,containerwidth,deltafrac": function() {
                        if (this.get("imagecount") <= 0)
                            return 0.0;
                        return this.get("containerwidth") * (1 - this.get("deltafrac")) / this.get("imagecount");
                    },
                    "imagedelta:imagecount,containerwidth,deltafrac": function() {
                        if (this.get("imagecount") <= 1)
                            return 0.0;
                        return this.get("containerwidth") * (this.get("deltafrac")) / (this.get("imagecount") - 1);
                    },
                    "imageheight:imagewidth,imagenativewidth,imagenativeheight": function() {
                        return this.get("imagenativeheight") * this.get("imagewidth") / this.get("imagenativewidth");
                    }
                },

                create: function() {
                    this.set("ie10below", Info.isInternetExplorer() && Info.internetExplorerVersion() <= 10);
                    var images = this.auto_destroy(new Collection());
                    this.set("images", images);
                    this.set("snapshotindex", 0);
                    this.set("selectedindex", images.length);
                    this._updateImageCount();
                    this.on("change:imagecount", this._updateImageCount, this);
                    this.on("change:imagewidth change:imageheight change:imagedelta", this._recomputeImageBoxes, this);
                    this.auto_destroy(new Timer({
                        context: this,
                        delay: 1000,
                        fire: function() {
                            this.updateContainerSize();
                        }
                    }));
                },

                destroy: function() {
                    this.get("images").iterate(function(image) {
                        if (image.snapshotDisplay && this.parent().recorder)
                            this.parent().recorder.removeSnapshotDisplay(image.snapshotDisplay);
                    }, this);
                    inherited.destroy.call(this);
                },

                _updateImageCount: function() {
                    var images = this.get("images");
                    var n = this.get("imagecount");
                    while (images.count() < n) {
                        var image = new Properties({
                            index: images.count()
                        });
                        this._recomputeImageBox(image);
                        images.add(image);
                    }
                    while (images.count() > n)
                        images.remove(images.getByIndex(images.count() - 1));
                },

                _recomputeImageBoxes: function() {
                    this.get("images").iterate(function(image) {
                        this._recomputeImageBox(image);
                    }, this);
                },

                _recomputeImageBox: function(image) {
                    if (!this.parent().recorder)
                        return;
                    var i = image.get("index");
                    var iw = this.get("imagewidth");
                    var ih = this.get("imageheight");
                    var id = this.get("imagedelta");
                    var h = this.get("containerheight");
                    image.set("left", 1 + Math.round(i * (iw + id)));
                    image.set("top", 1 + Math.round(h - ih - 24));
                    image.set("width", 1 + Math.round(iw));
                    image.set("height", 1 + Math.round(ih));
                    if (image.snapshot && image.snapshotDisplay) {
                        this.parent().recorder.updateSnapshotDisplay(
                            image.snapshot,
                            image.snapshotDisplay,
                            image.get("left") + this.get("containeroffset"),
                            image.get("top"),
                            image.get("width"),
                            image.get("height")
                        );
                    }
                },

                updateContainerSize: function() {
                    var container = this.activeElement().querySelector("[data-gallery-container]");
                    var offset = Dom.elementOffset(container);
                    var videoOffset = Dom.elementOffset(this.parent().recorder._element);
                    var left = offset.left - videoOffset.left;
                    var dimensions = Dom.elementDimensions(container);
                    this.set("containeroffset", left);
                    this.set("containerheight", dimensions.height);
                    this.set("containerwidth", dimensions.width);
                },

                _afterActivate: function(element) {
                    inherited._afterActivate.apply(this, arguments);
                    this.updateContainerSize();
                },

                loadImageSnapshot: function(image, snapshotindex) {
                    if (image.snapshotDisplay) {
                        this.parent().recorder.removeSnapshotDisplay(image.snapshotDisplay);
                        image.snapshotDisplay = null;
                    }
                    var snapshots = this.parent().snapshots;
                    image.snapshot = snapshots[((snapshotindex % snapshots.length) + snapshots.length) % snapshots.length];
                    image.snapshotDisplay = this.parent().recorder.createSnapshotDisplay(
                        this.activeElement(),
                        image.snapshot,
                        image.get("left") + this.get("containeroffset"),
                        image.get("top"),
                        image.get("width"),
                        image.get("height")
                    );
                },

                loadSnapshots: function() {
                    this.get("images").iterate(function(image) {
                        this.loadImageSnapshot(image, this.get("snapshotindex") + image.get("index"));
                    }, this);
                },

                nextSnapshots: function(snapshotindex) {
                    this.set("snapshotindex", snapshotindex + this.get("imagecount"));
                    this.loadSnapshots();
                },

                prevSnapshots: function(snapshotindex) {
                    this.set("snapshotindex", snapshotindex - this.get("imagecount"));
                    this.loadSnapshots();
                },

                functions: {
                    left: function() {
                        this.prevSnapshots(this.get("snapshotindex"));
                    },
                    right: function() {
                        this.nextSnapshots(this.get("snapshotindex"));
                    },
                    select: function(image) {
                        this.trigger("image-selected", image.snapshot);
                    },
                    hover: function(image) {
                        var snapshotindex = this.get("snapshotindex");
                        this.set("selectedindex", snapshotindex + image.get("index"));
                        this.trigger("image-hovered", image.snapshot);
                    }
                }

            };
        })
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "left()": function (obj) { with (obj) { return left(); } }, "images": function (obj) { with (obj) { return images; } }, "select(image)": function (obj) { with (obj) { return select(image); } }, "{left: image.left + 'px', top: image.top + 'px', width: image.width + 'px', height: image.height + 'px'}": function (obj) { with (obj) { return {left: image.left + 'px', top: image.top + 'px', width: image.width + 'px', height: image.height + 'px'}; } }, "ie10below": function (obj) { with (obj) { return ie10below; } }, "right()": function (obj) { with (obj) { return right(); } }/**/ })
        .register("ba-videorecorder-imagegallery");
});
Scoped.define("module:VideoRecorder.Dynamics.Loader", [
    "dynamics:Dynamic",
    "module:Assets"
], [
    "dynamics:Partials.ShowPartial"
], function(Class, Assets, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div class=\"{{cssrecorder}}-loader-container\">\n    <div data-selector=\"recorder-loader-block\" class=\"{{cssrecorder}}-loader-loader\" title=\"{{tooltip || ''}}\">\n    </div>\n</div>\n<div data-selector=\"recorder-loader-label-container\" class=\"{{cssrecorder}}-loader-label\" ba-show=\"{{label}}\">\n\t{{label}}\n</div>\n",

                attrs: {
                    "css": "ba-videorecorder",
                    "csscommon": "ba-commoncss",
                    "cssrecorder": "ba-recorder",
                    "tooltip": "",
                    "label": "",
                    "message": "",
                    "hovermessage": ""
                }

            };
        })
        .registerFunctions({ /**/"cssrecorder": function (obj) { with (obj) { return cssrecorder; } }, "tooltip || ''": function (obj) { with (obj) { return tooltip || ''; } }, "label": function (obj) { with (obj) { return label; } }/**/ })
        .register("ba-videorecorder-loader")
        .attachStringTable(Assets.strings)
        .addStrings({});
});
Scoped.define("module:VideoRecorder.Dynamics.Message", [
    "dynamics:Dynamic"
], [
    "dynamics:Partials.ClickPartial"
], function(Class, Templates, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div data-selector=\"recorder-message-container\" class=\"{{css}}-message-container\" ba-click=\"{{click()}}\">\n    <div data-selector=\"recorder-message-block\" class='{{css}}-message-message'>\n        <p>\n            {{message || \"\"}}\n        </p>\n        <ul ba-if=\"{{links && links.length > 0}}\" ba-repeat=\"{{link :: links}}\">\n            <li>\n                <a href=\"javascript:;\" ba-click=\"{{linkClick(link)}}\">\n                    {{link.title}}\n                </a>\n            </li>\n        </ul>\n    </div>\n</div>\n",

                attrs: {
                    "css": "ba-videorecorder",
                    "csscommon": "ba-commoncss",
                    "cssrecorder": "ba-recorder",
                    "message": '',
                    "links": null,
                    "uploading": false
                },

                functions: {

                    click: function() {
                        this.trigger("click");
                    },

                    linkClick: function(link) {
                        this.trigger("link", link);
                    }

                }

            };
        })
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "click()": function (obj) { with (obj) { return click(); } }, "message || \"\"": function (obj) { with (obj) { return message || ""; } }, "links && links.length > 0": function (obj) { with (obj) { return links && links.length > 0; } }, "links": function (obj) { with (obj) { return links; } }, "linkClick(link)": function (obj) { with (obj) { return linkClick(link); } }, "link.title": function (obj) { with (obj) { return link.title; } }/**/ })
        .register("ba-videorecorder-message");
});
Scoped.define("module:VideoRecorder.Dynamics.Recorder", [
    "dynamics:Dynamic",
    "module:Assets",
    "browser:Info",
    "browser:Dom",
    "browser:Upload.MultiUploader",
    "browser:Upload.FileUploader",
    "media:Recorder.VideoRecorderWrapper",
    "media:WebRTC.Support",
    "base:Types",
    "base:Objs",
    "base:Strings",
    "base:Time",
    "base:Timers",
    "base:States.Host",
    "base:Classes.ClassRegistry",
    "base:Collections.Collection",
    "base:Promise",
    "module:VideoRecorder.Dynamics.RecorderStates.Initial",
    "module:VideoRecorder.Dynamics.RecorderStates"
], [
    "module:VideoRecorder.Dynamics.Imagegallery",
    "module:VideoRecorder.Dynamics.Loader",
    "module:VideoRecorder.Dynamics.Controlbar",
    "module:VideoRecorder.Dynamics.Message",
    "module:VideoRecorder.Dynamics.Topmessage",
    "module:VideoRecorder.Dynamics.Chooser",
    "module:VideoRecorder.Dynamics.Faceoutline",
    "dynamics:Partials.ShowPartial",
    "dynamics:Partials.IfPartial",
    "dynamics:Partials.EventPartial",
    "dynamics:Partials.OnPartial",
    "dynamics:Partials.DataPartial",
    "dynamics:Partials.AttrsPartial",
    "dynamics:Partials.StylesPartial",
    "dynamics:Partials.TemplatePartial",
    "dynamics:Partials.HotkeyPartial"
], function(Class, Assets, Info, Dom, MultiUploader, FileUploader, VideoRecorderWrapper, WebRTCSupport, Types, Objs, Strings, Time, Timers, Host, ClassRegistry, Collection, Promise, InitialState, RecorderStates, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div data-selector=\"video-recorder-container\" ba-show=\"{{!player_active}}\"\n     class=\"{{css}}-container {{csstheme}} {{css}}-size-{{csssize}}\n     {{iecss}}-{{ie8 ? 'ie8' : 'noie8'}} {{css}}-{{ fullscreened ? 'fullscreen' : 'normal' }}-view\n     {{cssrecorder}}-{{ firefox ? 'firefox' : 'common'}}-browser\n     {{cssrecorder}}-{{themecolor}}-color\"\n     ba-styles=\"{{widthHeightStyles}}\"\n>\n\n    <video tabindex=\"-1\" data-selector=\"recorder-status\" class=\"{{css}}-video {{css}}-{{hasrecorder ? 'hasrecorder' : 'norecorder'}}\" data-video=\"video\" playsinline></video>\n\t<ba-videorecorder-faceoutline class=\"{{css}}-overlay\" ba-if=\"{{faceoutline && hasrecorder}}\">\n\t</ba-videorecorder-faceoutline>\n    <div data-selector=\"recorder-overlay\" class='{{cssrecorder}}-overlay' ba-show=\"{{!hideoverlay}}\" data-overlay=\"overlay\">\n\t\t<ba-{{dynloader}}\n\t\t    ba-css=\"{{cssloader || css}}\"\n\t\t\tba-cssrecorder=\"{{cssrecorder || css}}\"\n\t\t\tba-themecolor=\"{{themecolor}}\"\n\t\t    ba-template=\"{{tmplloader}}\"\n\t\t    ba-show=\"{{loader_active}}\"\n\t\t    ba-tooltip=\"{{loadertooltip}}\"\n\t\t\tba-hovermessage=\"{{=hovermessage}}\"\n\t\t    ba-label=\"{{loaderlabel}}\"\n\t\t></ba-{{dynloader}}>\n\n\t\t<ba-{{dynmessage}}\n\t\t    ba-css=\"{{cssmessage || css}}\"\n\t\t\tba-themecolor=\"{{themecolor}}\"\n\t\t\tba-cssrecorder=\"{{cssrecorder || css}}\"\n\t\t    ba-template=\"{{tmplmessage}}\"\n\t\t    ba-show=\"{{message_active}}\"\n\t\t    ba-message=\"{{message}}\"\n        ba-message_uploading=\"{{message_uploading}}\"\n\t\t\tba-links=\"{{message_links}}\"\n\t\t    ba-event:click=\"message_click\"\n\t\t\tba-event:link=\"message_link_click\"\n\t\t></ba-{{dynmessage}}>\n\n\t\t<ba-{{dyntopmessage}}\n\t\t    ba-css=\"{{csstopmessage || css}}\"\n\t\t\tba-themecolor=\"{{themecolor}}\"\n\t\t\tba-cssrecorder=\"{{cssrecorder || css}}\"\n\t\t    ba-template=\"{{tmpltopmessage}}\"\n\t\t    ba-show=\"{{topmessage_active && (topmessage || hovermessage)}}\"\n\t\t    ba-topmessage=\"{{hovermessage || topmessage}}\"\n\t\t></ba-{{dyntopmessage}}>\n\n\t\t<ba-{{dynchooser}}\n\t\t\tba-onlyaudio=\"{{onlyaudio}}\"\n\t\t\tba-recordviafilecapture=\"{{recordviafilecapture}}\"\n\t\t    ba-css=\"{{csschooser || css}}\"\n\t\t\tba-themecolor=\"{{themecolor}}\"\n\t\t\tba-cssrecorder=\"{{cssrecorder || css}}\"\n\t\t    ba-template=\"{{tmplchooser}}\"\n\t\t\tba-allowscreen=\"{{allowscreen}}\"\n\t\t    ba-if=\"{{chooser_active && !is_initial_state}}\"\n\t\t    ba-allowrecord=\"{{allowrecord}}\"\n\t\t    ba-allowupload=\"{{allowupload}}\"\n\t\t    ba-allowcustomupload=\"{{allowcustomupload}}\"\n\t\t    ba-allowedextensions=\"{{allowedextensions}}\"\n\t\t    ba-primaryrecord=\"{{primaryrecord}}\"\n\t\t    ba-timelimit=\"{{timelimit}}\"\n\t\t    ba-event:record=\"record_video\"\n\t\t\tba-event:record-screen=\"record_screen\"\n\t\t    ba-event:upload=\"video_file_selected\"\n\t\t></ba-{{dynchooser}}>\n\n\t\t<ba-{{dynimagegallery}}\n\t\t    ba-css=\"{{cssimagegallery || css}}\"\n\t\t\tba-themecolor=\"{{themecolor}}\"\n\t\t\tba-cssrecorder=\"{{cssrecorder || css}}\"\n\t\t    ba-template=\"{{tmplimagegallery}}\"\n\t\t    ba-if=\"{{imagegallery_active}}\"\n        ba-snapshotindex={{snapshotindex}}\n        ba-selectedindex={{selectedindex}}\n\t\t    ba-imagecount=\"{{gallerysnapshots}}\"\n\t\t    ba-imagenativewidth=\"{{nativeRecordingWidth}}\"\n\t\t    ba-imagenativeheight=\"{{nativeRecordingHeight}}\"\n\t\t    ba-event:image-selected=\"select_image\"\n        ba-event:image-hovered=\"hover_image\"\n\t\t></ba-{{dynimagegallery}}>\n\n\t\t<ba-{{dyncontrolbar}}\n\t\t    ba-css=\"{{csscontrolbar || css}}\"\n\t\t\tba-cssrecorder=\"{{cssrecorder || css}}\"\n\t\t\tba-csstheme=\"{{csstheme || css}}\"\n\t\t\tba-themecolor=\"{{themecolor}}\"\n\t\t    ba-template=\"{{tmplcontrolbar}}\"\n\t\t    ba-show=\"{{controlbar_active}}\"\n\t\t    ba-cameras=\"{{cameras}}\"\n\t\t    ba-microphones=\"{{microphones}}\"\n\t\t    ba-noaudio=\"{{noaudio}}\"\n\t\t\tba-novideo=\"{{onlyaudio}}\"\n\t\t\tba-allowscreen=\"{{record_media==='screen'}}\"\n\t\t    ba-selectedcamera=\"{{selectedcamera || 0}}\"\n\t\t    ba-selectedmicrophone=\"{{selectedmicrophone || 0}}\"\n\t\t    ba-camerahealthy=\"{{camerahealthy}}\"\n\t\t    ba-microphonehealthy=\"{{microphonehealthy}}\"\n\t\t    ba-hovermessage=\"{{=hovermessage}}\"\n\t\t    ba-settingsvisible=\"{{settingsvisible}}\"\n\t\t    ba-recordvisible=\"{{recordvisible}}\"\n\t\t\tba-cancelvisible=\"{{allowcancel && cancancel}}\"\n\t\t    ba-uploadcovershotvisible=\"{{uploadcovershotvisible}}\"\n\t\t    ba-rerecordvisible=\"{{rerecordvisible}}\"\n\t\t    ba-stopvisible=\"{{stopvisible}}\"\n\t\t    ba-skipvisible=\"{{skipvisible}}\"\n\t\t    ba-controlbarlabel=\"{{controlbarlabel}}\"\n\t\t\tba-mintimeindicator=\"{{mintimeindicator}}\"\n\t\t\tba-timeminlimit=\"{{timeminlimit}}\"\n\t\t    ba-event:select-camera=\"select_camera\"\n\t\t    ba-event:select-microphone=\"select_microphone\"\n\t\t    ba-event:invoke-record=\"record\"\n\t\t    ba-event:invoke-rerecord=\"rerecord\"\n\t\t    ba-event:invoke-stop=\"stop\"\n\t\t    ba-event:invoke-skip=\"invoke_skip\"\n\t\t    ba-event:upload-covershot=\"upload_covershot\"\n\t\t></ba-{{dyncontrolbar}}>\n    </div>\n</div>\n\n<div data-selector=\"recorder-player\" ba-if=\"{{player_active}}\" ba-styles=\"{{widthHeightStyles}}\">\n\t<span ba-show=\"{{ie8}}\">&nbsp;</span>\n\t<ba-{{dynvideoplayer}}\n\t    ba-theme=\"{{theme || 'default'}}\"\n        ba-themecolor=\"{{themecolor}}\"\n\t\tba-cssrecorder=\"{{cssrecorder || css}}\"\n        ba-source=\"{{playbacksource}}\"\n        ba-poster=\"{{playbackposter}}\"\n        ba-hideoninactivity=\"{{false}}\"\n        ba-forceflash=\"{{forceflash}}\"\n        ba-noflash=\"{{noflash}}\"\n        ba-stretch=\"{{stretch}}\"\n\t\tba-onlyaudio=\"{{onlyaudio}}\"\n        ba-attrs=\"{{playerattrs}}\"\n        ba-data:id=\"player\"\n        ba-width=\"{{width}}\"\n        ba-height=\"{{height}}\"\n        ba-totalduration=\"{{duration / 1000}}\"\n        ba-rerecordable=\"{{rerecordable && (recordings === null || recordings > 0)}}\"\n        ba-submittable=\"{{manualsubmit && verified}}\"\n        ba-reloadonplay=\"{{true}}\"\n        ba-autoplay=\"{{autoplay}}\"\n        ba-nofullscreen=\"{{nofullscreen}}\"\n        ba-topmessage=\"{{playertopmessage}}\"\n        ba-allowtexttrackupload=\"{{allowtexttrackupload}}\"\n        ba-uploadtexttracksvisible=\"{{uploadtexttracksvisible}}\"\n        ba-tracktags=\"{{tracktags}}\"\n        ba-tracktagsstyled=\"{{tracktagsstyled}}\"\n        ba-trackcuetext=\"{{trackcuetext}}\"\n        ba-acceptedtracktexts=\"{{acceptedtracktexts}}\"\n\t\tba-event:loaded=\"ready_to_play\"\n        ba-event:rerecord=\"rerecord\"\n        ba-event:playing=\"playing\"\n        ba-event:paused=\"paused\"\n        ba-event:ended=\"ended\"\n        ba-event:submit=\"manual_submit\"\n        ba-event:upload-text-tracks=\"upload_text_tracks\"\n\t\tba-tracksshowselection=\"{{tracksshowselection}}\"\n\t\tba-trackselectorhovered=\"{{trackselectorhovered}}\"\n\t\tba-uploadlocales=\"{{uploadlocales}}\"\n\t\tba-event:selected_label_value=\"selected_label_value\"\n\t\tba-event:move_to_option=\"move_to_option\"\n\t>\n\t</ba-{{dynvideoplayer}}>\n</div>\n",

                attrs: {
                    /* CSS */
                    "css": "ba-videorecorder",
                    "csscommon": "ba-commoncss",
                    "cssrecorder": "ba-recorder",
                    "iecss": "ba-videorecorder",
                    "cssimagegallery": "",
                    "cssloader": "",
                    "csscontrolbar": "",
                    "cssmessage": "",
                    "csstopmessage": "",
                    "csschooser": "",
                    "width": "",
                    "height": "",
                    "gallerysnapshots": 5,

                    /* Themes */
                    "theme": "",
                    "csstheme": "",

                    /* Dynamics */
                    "dynimagegallery": "videorecorder-imagegallery",
                    "dynloader": "videorecorder-loader",
                    "dyncontrolbar": "videorecorder-controlbar",
                    "dynmessage": "videorecorder-message",
                    "dyntopmessage": "videorecorder-topmessage",
                    "dynchooser": "videorecorder-chooser",
                    "dynvideoplayer": "videoplayer",

                    /* Templates */
                    "tmplimagegallery": "",
                    "tmplloader": "",
                    "tmplcontrolbar": "",
                    "tmplmessage": "",
                    "tmpltopmessage": "",
                    "tmplchooser": "",

                    /* Attributes */
                    "autorecord": false,
                    "autoplay": false,
                    "allowrecord": true,
                    "allowupload": true,
                    "allowcustomupload": true,
                    "manual-upload": false,
                    "camerafacefront": false,
                    "primaryrecord": true,
                    "allowscreen": false,
                    "nofullscreen": false,
                    "recordingwidth": undefined,
                    "recordingheight": undefined,
                    "minuploadingwidth": undefined,
                    "maxuploadingwidth": undefined,
                    "minuploadingheight": undefined,
                    "maxuploadingheight": undefined,
                    "message_uploading": false,
                    "countdown": 3,
                    "snapshotmax": 15,
                    "framerate-warning": null,
                    "framerate": null,
                    "audiobitrate": null,
                    "videobitrate": null,
                    "snapshottype": "jpg",
                    "picksnapshots": true,
                    "playbacksource": "",
                    "screen": {},
                    "playbackposter": "",
                    "recordermode": true,
                    "skipinitial": false,
                    "skipinitialonrerecord": false,
                    "timelimit": null,
                    "timeminlimit": null,
                    "rtmpstreamtype": "mp4",
                    "rtmpmicrophonecodec": "speex",
                    "webrtcstreaming": false,
                    "webrtconmobile": false,
                    "webrtcstreamingifnecessary": false,
                    "microphone-volume": 1.0,
                    "flip-camera": false,
                    "early-rerecord": false,
                    "custom-covershots": false,
                    "manualsubmit": false,
                    "allowedextensions": null,
                    "filesizelimit": null,
                    "faceoutline": false,
                    "display-timer": true,

                    /* Configuration */
                    "forceflash": false,
                    "simulate": false,
                    "noflash": false,
                    "onlyaudio": false,
                    "noaudio": false,
                    "flashincognitosupport": false,
                    "enforce-duration": null,
                    "localplayback": false,
                    "uploadoptions": {},
                    "playerattrs": {},
                    "shortMessage": true,

                    /* Options */
                    "rerecordable": true,
                    "allowcancel": false,
                    "recordings": null,
                    "ready": true,
                    "orientation": false,
                    "stretch": false,
                    "audio-test-mandatory": false,

                    "allowtexttrackupload": false,
                    "uploadlocales": [{
                        lang: 'en',
                        label: 'English'
                    }]


                },

                computed: {
                    "nativeRecordingWidth:recordingwidth,record_media": function() {
                        return this.get("recordingwidth") || (this.get("record_media") !== "screen" ? 640 : (window.innerWidth || document.body.clientWidth));
                    },
                    "nativeRecordingHeight:recordingheight,record_media": function() {
                        return this.get("recordingheight") || (this.get("record_media") !== "screen" ? 480 : (window.innerHeight || document.body.clientHeight));
                    },
                    "widthHeightStyles:width,height": function() {
                        var result = {};
                        var width = this.get("width");
                        var height = this.get("height");
                        if (width)
                            result.width = width + ((width + '').match(/^\d+$/g) ? 'px' : '');
                        if (height)
                            result.height = height + ((height + '').match(/^\d+$/g) ? 'px' : '');
                        return result;
                    },
                    "canswitchcamera:recordviafilecapture": function() {
                        return !this.get("recordviafilecapture") && Info.isMobile();
                    }
                },

                scopes: {
                    player: ">[id='player']"
                },

                types: {
                    "allowscreen": "boolean",
                    "forceflash": "boolean",
                    "noflash": "boolean",
                    "rerecordable": "boolean",
                    "ready": "boolean",
                    "stretch": "boolean",
                    "autorecord": "boolean",
                    "autoplay": "boolean",
                    "allowrecord": "boolean",
                    "allowupload": "boolean",
                    "allowcustomupload": "boolean",
                    "primaryrecord": "boolean",
                    "flashincognitosupport": "boolean",
                    "recordermode": "boolean",
                    "nofullscreen": "boolean",
                    "skipinitialonrerecord": "boolean",
                    "picksnapshots": "boolean",
                    "localplayback": "boolean",
                    "camerafacefront": "boolean",
                    "noaudio": "boolean",
                    "skipinitial": "boolean",
                    "enforce-duration": "bool",
                    "webrtcstreaming": "boolean",
                    "webrtconmobile": "boolean",
                    "manual-upload": "boolean",
                    "webrtcstreamingifnecessary": "boolean",
                    "microphone-volume": "float",
                    "audiobitrate": "int",
                    "videobitrate": "int",
                    "minuploadingwidth": "int",
                    "maxuploadingwidth": "int",
                    "minuploadingheight": "int",
                    "maxuploadingheight": "int",
                    "framerate-warning": "int",
                    "flip-camera": "boolean",
                    "faceoutline": "boolean",
                    "early-rerecord": "boolean",
                    "custom-covershots": "boolean",
                    "manualsubmit": "boolean",
                    "simulate": "boolean",
                    "allowedextensions": "array",
                    "onlyaudio": "boolean",
                    "allowcancel": "boolean",
                    "display-timer": "boolean",
                    "audio-test-mandatory": "boolean",
                    "allowtexttrackupload": "boolean",
                    "uploadlocales": "array",
                    "message_uploading": "bool"
                },

                extendables: ["states"],

                remove_on_destroy: true,

                events: {
                    "change:camerahealthy": function(value) {
                        this.trigger("camerahealth", value);
                    },
                    "change:microphonehealthy": function(value) {
                        this.trigger("microphonehealth", value);
                    },
                    "change:webrtconmobile": function() {
                        this.set("recordviafilecapture", Info.isMobile() && (!this.get("webrtconmobile") || !VideoRecorderWrapper.anySupport(this._videoRecorderWrapperOptions())));
                    },
                    "change:recordviafilecapture": function() {
                        if (this.get("recordviafilecapture")) {
                            this.set("skipinitial", false);
                            this.set("skipinitialonrerecord", false);
                            this.set("allowscreen", false);
                            this.set("autorecord", false);
                        }
                    }
                },

                create: function() {
                    // Init Audio Context
                    WebRTCSupport.globals();
                    if (this.get("theme") in Assets.recorderthemes) {
                        Objs.iter(Assets.recorderthemes[this.get("theme")], function(value, key) {
                            if (!this.isArgumentAttr(key))
                                this.set(key, value);
                        }, this);
                    }
                    this.set("ie8", Info.isInternetExplorer() && Info.internetExplorerVersion() < 9);
                    this.set("hideoverlay", false);

                    this.set("canswitchcamera", false);
                    this.set("recordviafilecapture", Info.isMobile() && (!this.get("webrtconmobile") || !VideoRecorderWrapper.anySupport(this._videoRecorderWrapperOptions())));

                    if (this.get("recordviafilecapture")) {
                        this.set("skipinitial", false);
                        this.set("skipinitialonrerecord", false);
                        this.set("allowscreen", false);
                        this.set("autorecord", false);
                    }

                    this.__attachRequested = false;
                    this.__activated = false;
                    this._bound = false;
                    this.__recording = false;
                    this.__error = null;
                    this.__currentStretch = null;

                    this.on("change:stretch", function() {
                        this._updateStretch();
                    }, this);
                    this.host = new Host({
                        stateRegistry: new ClassRegistry(this.cls.recorderStates())
                    });
                    this.host.dynamic = this;
                    this.host.initialize(InitialState);

                    this._timer = new Timers.Timer({
                        context: this,
                        fire: this._timerFire,
                        delay: 250,
                        start: true
                    });

                    this.__cameraResponsive = true;
                    this.__cameraSignal = true;

                    if (this.get("onlyaudio")) {
                        this.set("picksnapshots", false);
                        this.set("allowupload", false);
                        this.set("orientation", false);
                    }
                    if (!Info.isMobile())
                        this.set("orientation", false);
                    this.set("currentorientation", window.innerHeight > window.innerWidth ? "portrait" : "landscape");
                },

                state: function() {
                    return this.host.state();
                },

                recorderAttached: function() {
                    return !!this.recorder;
                },

                videoError: function() {
                    return this.__error;
                },

                _error: function(error_type, error_code) {
                    this.__error = {
                        error_type: error_type,
                        error_code: error_code
                    };
                    this.trigger("error:" + error_type, error_code);
                    this.trigger("error", error_type, error_code);
                },

                _clearError: function() {
                    this.__error = null;
                },

                _detachRecorder: function() {
                    if (this.recorder)
                        this.recorder.weakDestroy();
                    this.recorder = null;
                    this.set("hasrecorder", false);
                },

                _videoRecorderWrapperOptions: function() {
                    return {
                        simulate: this.get("simulate"),
                        forceflash: this.get("forceflash"),
                        noflash: this.get("noflash"),
                        recordVideo: !this.get("onlyaudio"),
                        recordAudio: !this.get("noaudio"),
                        recordingWidth: this.get("nativeRecordingWidth"),
                        recordingHeight: this.get("nativeRecordingHeight"),
                        audioBitrate: this.get("audiobitrate"),
                        videoBitrate: this.get("videobitrate"),
                        flashFullSecurityDialog: !this.get("flashincognitosupport"),
                        rtmpStreamType: this.get("rtmpstreamtype"),
                        rtmpMicrophoneCodec: this.get("rtmpmicrophonecodec"),
                        webrtcStreaming: !!this.get("webrtcstreaming"),
                        webrtcStreamingIfNecessary: !!this.get("webrtcstreamingifnecessary"),
                        // webrtcOnMobile: !!this.get("webrtconmobile"),
                        localPlaybackRequested: this.get("localplayback"),
                        screen: this.get("allowscreen") && this.get("record_media") === "screen" ? this.get("screen") : null,
                        framerate: this.get("framerate"),
                        flip: this.get("flip-camera")
                    };
                },

                _attachRecorder: function() {
                    if (this.recorderAttached())
                        return;
                    if (!this.__activated) {
                        this.__attachRequested = true;
                        return;
                    }
                    this.set("hasrecorder", true);
                    this.snapshots = [];
                    this.__attachRequested = false;
                    var video = this.activeElement().querySelector("[data-video='video']");
                    this._clearError();
                    this.recorder = VideoRecorderWrapper.create(Objs.extend({
                        element: video
                    }, this._videoRecorderWrapperOptions()));
                    if (this.recorder)
                        this.trigger("attached");
                    else
                        this._error("attach");
                },

                _softwareDependencies: function() {
                    if (!this.recorderAttached() || !this.recorder)
                        return Promise.error("No recorder attached.");
                    return this.recorder.softwareDependencies();
                },

                _bindMedia: function() {
                    if (this._bound || !this.recorderAttached() || !this.recorder)
                        return;
                    this.recorder.ready.success(function() {
                        this.recorder.on("require_display", function() {
                            this.set("hideoverlay", true);
                        }, this);
                        this.recorder.bindMedia().error(function(e) {
                            this.trigger("access_forbidden", e);
                            this.set("hideoverlay", false);
                            this.off("require_display", null, this);
                            this._error("bind", e);
                        }, this).success(function() {
                            this.trigger("access_granted");
                            this.recorder.setVolumeGain(this.get("microphone-volume"));
                            this.set("hideoverlay", false);
                            this.off("require_display", null, this);
                            this.recorder.enumerateDevices().success(function(devices) {
                                var selected = this.recorder.currentDevices();
                                this.set("selectedcamera", selected.video);
                                this.set("selectedmicrophone", selected.audio);
                                this.set("cameras", new Collection(Objs.values(devices.video)));
                                this.set("microphones", new Collection(Objs.values(devices.audio)));
                                this.trigger(Types.is_empty(devices.video) ? "no_camera" : "has_camera");
                                this.trigger(Types.is_empty(devices.audio) ? "no_microphone" : "has_microphone");
                            }, this);
                            if (!this.get("noaudio"))
                                this.recorder.testSoundLevel(true);
                            this.set("devicetesting", true);
                            this._updateStretch();
                            while (this.snapshots.length > 0) {
                                var snapshot = this.snapshots.unshift();
                                this.recorder.removeSnapshot(snapshot);
                            }
                            this._bound = true;
                            this.trigger("bound");
                        }, this);
                    }, this);
                },

                isFlash: function() {
                    return this.recorder && this.recorder.isFlash();
                },

                _initializeUploader: function() {
                    if (this._dataUploader)
                        this._dataUploader.weakDestroy();
                    this._dataUploader = new MultiUploader();
                },

                _unbindMedia: function() {
                    if (!this._bound)
                        return;
                    this.recorder.unbindMedia();
                    this._bound = false;
                },

                _uploadCovershot: function(image) {
                    if (this.get("simulate"))
                        return;
                    this.__lastCovershotUpload = image;
                    var uploader = this.recorder.createSnapshotUploader(image, this.get("snapshottype"), this.get("uploadoptions").image);
                    uploader.upload();
                    this._dataUploader.addUploader(uploader);
                },

                _uploadCovershotFile: function(file) {
                    if (this.get("simulate"))
                        return;
                    this.__lastCovershotUpload = file;
                    var uploader = FileUploader.create(Objs.extend({
                        source: file
                    }, this.get("uploadoptions").image));
                    uploader.upload();
                    this._dataUploader.addUploader(uploader);
                },

                _uploadVideoFile: function(file) {
                    if (this.get("simulate"))
                        return;
                    var uploader = FileUploader.create(Objs.extend({
                        source: file
                    }, this.get("uploadoptions").video));
                    uploader.upload();
                    this._dataUploader.addUploader(uploader);
                },

                _prepareRecording: function() {
                    return Promise.create(true);
                },

                _startRecording: function() {
                    if (this.__recording)
                        return Promise.error(true);
                    if (!this.get("noaudio"))
                        this.recorder.testSoundLevel(false);
                    this.set("devicetesting", false);
                    return this.recorder.startRecord({
                        rtmp: this.get("uploadoptions").rtmp,
                        video: this.get("uploadoptions").video,
                        audio: this.get("uploadoptions").audio,
                        webrtcStreaming: this.get("uploadoptions").webrtcStreaming
                    }).success(function() {
                        this.__recording = true;
                        this.__recording_start_time = Time.now();
                    }, this);
                },

                _stopRecording: function() {
                    if (!this.__recording)
                        return Promise.error(true);
                    return this.recorder.stopRecord({
                        rtmp: this.get("uploadoptions").rtmp,
                        video: this.get("uploadoptions").video,
                        audio: this.get("uploadoptions").audio,
                        webrtcStreaming: this.get("uploadoptions").webrtcStreaming
                    }).success(function(uploader) {
                        this.__recording = false;
                        uploader.upload();
                        this._dataUploader.addUploader(uploader);
                    }, this);
                },

                isRecording: function() {
                    return this.__recording;
                },

                _verifyRecording: function() {
                    return Promise.create(true);
                },

                _afterActivate: function(element) {
                    inherited._afterActivate.call(this, element);
                    this.__activated = true;
                    if (this.__attachRequested)
                        this._attachRecorder();
                },

                _showBackgroundSnapshot: function() {
                    if (this.get("onlyaudio"))
                        return;
                    this._hideBackgroundSnapshot();
                    this._displayBackgroundSnapshot(this.recorder.createSnapshot(this.get("snapshottype")));
                },

                _displayBackgroundSnapshot: function(snapshot) {
                    this.__backgroundSnapshot = snapshot;
                    var el = this.activeElement().querySelector("[data-video]");
                    var dimensions = Dom.elementDimensions(el);
                    this.__backgroundSnapshotDisplay = this.recorder.createSnapshotDisplay(el, this.__backgroundSnapshot, 0, 0, dimensions.width, dimensions.height);
                },

                _hideBackgroundSnapshot: function() {
                    if (this.get("onlyaudio"))
                        return;
                    if (this.__backgroundSnapshotDisplay)
                        this.recorder.removeSnapshotDisplay(this.__backgroundSnapshotDisplay);
                    delete this.__backgroundSnapshotDisplay;
                    if (this.__backgroundSnapshot)
                        this.recorder.removeSnapshot(this.__backgroundSnapshot);
                    delete this.__backgroundSnapshot;
                },

                object_functions: ["record", "rerecord", "stop", "play", "pause", "reset"],

                functions: {

                    cancel: function() {
                        if (confirm(this.stringUnicode("cancel-confirm")))
                            this.execute("reset");
                    },

                    record: function() {
                        this.host.state().record();
                    },

                    record_video: function() {
                        this.host.state().selectRecord();
                    },

                    record_screen: function() {
                        this.host.state().selectRecordScreen();
                    },

                    video_file_selected: function(file) {
                        this.__selected_video_file = file;
                        if (!this.get("manual-upload"))
                            this.execute("upload_video");
                    },

                    upload_video: function(file) {
                        this.host.state().selectUpload(file || this.__selected_video_file);
                    },

                    upload_covershot: function(file) {
                        this.host.state().uploadCovershot(file);
                    },

                    select_camera: function(camera_id) {
                        if (this.recorder) {
                            this.recorder.setCurrentDevices({
                                video: camera_id
                            });
                            this.set("selectedcamera", camera_id);
                        }
                    },

                    select_microphone: function(microphone_id) {
                        if (this.recorder) {
                            this.recorder.setCurrentDevices({
                                audio: microphone_id
                            });
                            this.recorder.testSoundLevel(true);
                            this.set("selectedmicrophone", microphone_id);
                        }
                        this.set("microphonehealthy", false);
                    },

                    select_camera_face: function(faceFront) {
                        if (this.recorder) {
                            this.recorder.setCameraFace(faceFront);
                            this.set("camerafacefront", faceFront);
                        }
                    },

                    invoke_skip: function() {
                        this.trigger("invoke-skip");
                    },

                    select_image: function(image) {
                        this.trigger("select-image", image);
                    },

                    hover_image: function(snapshot) {
                        this.trigger("hover-image", snapshot);
                    },

                    rerecord: function() {
                        if (confirm(this.stringUnicode("rerecord-confirm")))
                            this.host.state().rerecord();
                    },

                    stop: function() {
                        this.host.state().stop();
                    },

                    play: function() {
                        this.host.state().play();
                    },

                    pause: function() {
                        this.host.state().pause();
                    },

                    message_click: function() {
                        this.trigger("message-click");
                    },

                    message_link_click: function(link) {
                        this.trigger("message-link-click", link);
                    },

                    playing: function() {
                        this.trigger("playing");
                    },

                    paused: function() {
                        this.trigger("paused");
                    },

                    ended: function() {
                        this.trigger("ended");
                    },

                    reset: function() {
                        this._stopRecording().callback(function() {
                            this._unbindMedia();
                            this._hideBackgroundSnapshot();
                            this._detachRecorder();
                            this.host.state().next("Initial");
                        }, this);
                    },

                    manual_submit: function() {
                        this.set("rerecordable", false);
                        this.set("manualsubmit", false);
                        this.trigger("manually_submitted");
                    },

                    ready_to_play: function() {
                        this.trigger("ready_to_play");
                    }

                },

                destroy: function() {
                    this._timer.destroy();
                    this.host.destroy();
                    this._detachRecorder();
                    inherited.destroy.call(this);
                },

                deltaCoefficient: function() {
                    return this.recorderAttached() ? this.recorder.deltaCoefficient() : null;
                },

                blankLevel: function() {
                    return this.recorderAttached() ? this.recorder.blankLevel() : null;
                },

                lightLevel: function() {
                    return this.recorderAttached() ? this.recorder.lightLevel() : null;
                },

                soundLevel: function() {
                    return this.recorderAttached() ? this.recorder.soundLevel() : null;
                },

                _timerFire: function() {
                    if (this.destroyed())
                        return;
                    this.set("currentorientation", window.innerHeight > window.innerWidth ? "portrait" : "landscape");
                    try {
                        if (this.recorderAttached() && this.get("devicetesting")) {
                            var lightLevel = this.lightLevel();
                            this.set("camerahealthy", lightLevel >= 100 && lightLevel <= 200);
                            if (!this.get("noaudio") && !this.get("microphonehealthy") && this.soundLevel() >= 1.01) {
                                this.set("microphonehealthy", true);
                                this.recorder.testSoundLevel(false);
                            }
                        }
                    } catch (e) {}

                    if (!this.get("onlyaudio")) {
                        if (this.__recording && this.__recording_start_time + 500 < Time.now()) {
                            var p = this.snapshots.length < this.get("snapshotmax") ? 0.25 : 0.05;
                            if (Math.random() <= p) {
                                var snap = this.recorder.createSnapshot(this.get("snapshottype"));
                                if (snap) {
                                    if (this.snapshots.length < this.get("snapshotmax")) {
                                        this.snapshots.push(snap);
                                    } else {
                                        var i = Math.floor(Math.random() * this.get("snapshotmax"));
                                        this.recorder.removeSnapshot(this.snapshots[i]);
                                        this.snapshots[i] = snap;
                                    }
                                }
                            }
                        }
                    }

                    try {
                        if (this.recorderAttached() && this._timer.fire_count() % 20 === 0 && this._accessing_camera) {
                            var signal = this.blankLevel() >= 0.01;
                            if (signal !== this.__cameraSignal) {
                                this.__cameraSignal = signal;
                                this.trigger(signal ? "camera_signal" : "camera_nosignal");
                            }
                        }
                        if (this.recorderAttached() && this._timer.fire_count() % 20 === 10 && this._accessing_camera) {
                            var delta = this.recorder.deltaCoefficient();
                            var responsive = delta === null || delta >= 0.5;
                            if (responsive !== this.__cameraResponsive) {
                                this.__cameraResponsive = responsive;
                                this.trigger(responsive ? "camera_responsive" : "camera_unresponsive");
                            }
                        }
                    } catch (e) {}

                    this._updateStretch();
                    this._updateCSSSize();
                },

                _updateCSSSize: function() {
                    var width = Dom.elementDimensions(this.activeElement()).width;
                    this.set("csssize", width > 400 ? "normal" : (width > 300 ? "medium" : "small"));
                },

                videoHeight: function() {
                    return this.recorderAttached() ? this.recorder.cameraHeight() : NaN;
                },

                videoWidth: function() {
                    return this.recorderAttached() ? this.recorder.cameraWidth() : NaN;
                },

                aspectRatio: function() {
                    return this.videoWidth() / this.videoHeight();
                },

                parentWidth: function() {
                    return this.get("width") || Dom.elementDimensions(this.activeElement()).width;
                },

                parentHeight: function() {
                    return this.get("height") || Dom.elementDimensions(this.activeElement()).height;
                },

                parentAspectRatio: function() {
                    return this.parentWidth() / this.parentHeight();
                },

                averageFrameRate: function() {
                    return this.recorderAttached() ? this.recorder.averageFrameRate() : null;
                },

                _updateStretch: function() {
                    var newStretch = null;
                    if (this.get("stretch")) {
                        var ar = this.aspectRatio();
                        if (isFinite(ar)) {
                            var par = this.parentAspectRatio();
                            if (isFinite(par)) {
                                if (par > ar)
                                    newStretch = "height";
                                if (par < ar)
                                    newStretch = "width";
                            } else if (par === Infinity)
                                newStretch = "height";
                        }
                    }
                    if (this.__currentStretch !== newStretch) {
                        if (this.__currentStretch)
                            Dom.elementRemoveClass(this.activeElement(), this.get("css") + "-stretch-" + this.__currentStretch);
                        if (newStretch)
                            Dom.elementAddClass(this.activeElement(), this.get("css") + "-stretch-" + newStretch);
                    }
                    this.__currentStretch = newStretch;
                }

            };
        }, {

            recorderStates: function() {
                return [RecorderStates];
            }

        })
        .register("ba-videorecorder")
        .registerFunctions({ /**/"!player_active": function (obj) { with (obj) { return !player_active; } }, "css": function (obj) { with (obj) { return css; } }, "csstheme": function (obj) { with (obj) { return csstheme; } }, "csssize": function (obj) { with (obj) { return csssize; } }, "iecss": function (obj) { with (obj) { return iecss; } }, "ie8 ? 'ie8' : 'noie8'": function (obj) { with (obj) { return ie8 ? 'ie8' : 'noie8'; } }, "fullscreened ? 'fullscreen' : 'normal'": function (obj) { with (obj) { return fullscreened ? 'fullscreen' : 'normal'; } }, "cssrecorder": function (obj) { with (obj) { return cssrecorder; } }, "firefox ? 'firefox' : 'common'": function (obj) { with (obj) { return firefox ? 'firefox' : 'common'; } }, "themecolor": function (obj) { with (obj) { return themecolor; } }, "widthHeightStyles": function (obj) { with (obj) { return widthHeightStyles; } }, "hasrecorder ? 'hasrecorder' : 'norecorder'": function (obj) { with (obj) { return hasrecorder ? 'hasrecorder' : 'norecorder'; } }, "faceoutline && hasrecorder": function (obj) { with (obj) { return faceoutline && hasrecorder; } }, "!hideoverlay": function (obj) { with (obj) { return !hideoverlay; } }, "dynloader": function (obj) { with (obj) { return dynloader; } }, "cssloader || css": function (obj) { with (obj) { return cssloader || css; } }, "cssrecorder || css": function (obj) { with (obj) { return cssrecorder || css; } }, "tmplloader": function (obj) { with (obj) { return tmplloader; } }, "loader_active": function (obj) { with (obj) { return loader_active; } }, "loadertooltip": function (obj) { with (obj) { return loadertooltip; } }, "hovermessage": function (obj) { with (obj) { return hovermessage; } }, "loaderlabel": function (obj) { with (obj) { return loaderlabel; } }, "dynmessage": function (obj) { with (obj) { return dynmessage; } }, "cssmessage || css": function (obj) { with (obj) { return cssmessage || css; } }, "tmplmessage": function (obj) { with (obj) { return tmplmessage; } }, "message_active": function (obj) { with (obj) { return message_active; } }, "message": function (obj) { with (obj) { return message; } }, "message_uploading": function (obj) { with (obj) { return message_uploading; } }, "message_links": function (obj) { with (obj) { return message_links; } }, "dyntopmessage": function (obj) { with (obj) { return dyntopmessage; } }, "csstopmessage || css": function (obj) { with (obj) { return csstopmessage || css; } }, "tmpltopmessage": function (obj) { with (obj) { return tmpltopmessage; } }, "topmessage_active && (topmessage || hovermessage)": function (obj) { with (obj) { return topmessage_active && (topmessage || hovermessage); } }, "hovermessage || topmessage": function (obj) { with (obj) { return hovermessage || topmessage; } }, "dynchooser": function (obj) { with (obj) { return dynchooser; } }, "onlyaudio": function (obj) { with (obj) { return onlyaudio; } }, "recordviafilecapture": function (obj) { with (obj) { return recordviafilecapture; } }, "csschooser || css": function (obj) { with (obj) { return csschooser || css; } }, "tmplchooser": function (obj) { with (obj) { return tmplchooser; } }, "allowscreen": function (obj) { with (obj) { return allowscreen; } }, "chooser_active && !is_initial_state": function (obj) { with (obj) { return chooser_active && !is_initial_state; } }, "allowrecord": function (obj) { with (obj) { return allowrecord; } }, "allowupload": function (obj) { with (obj) { return allowupload; } }, "allowcustomupload": function (obj) { with (obj) { return allowcustomupload; } }, "allowedextensions": function (obj) { with (obj) { return allowedextensions; } }, "primaryrecord": function (obj) { with (obj) { return primaryrecord; } }, "timelimit": function (obj) { with (obj) { return timelimit; } }, "dynimagegallery": function (obj) { with (obj) { return dynimagegallery; } }, "cssimagegallery || css": function (obj) { with (obj) { return cssimagegallery || css; } }, "tmplimagegallery": function (obj) { with (obj) { return tmplimagegallery; } }, "imagegallery_active": function (obj) { with (obj) { return imagegallery_active; } }, "snapshotindex": function (obj) { with (obj) { return snapshotindex; } }, "selectedindex": function (obj) { with (obj) { return selectedindex; } }, "gallerysnapshots": function (obj) { with (obj) { return gallerysnapshots; } }, "nativeRecordingWidth": function (obj) { with (obj) { return nativeRecordingWidth; } }, "nativeRecordingHeight": function (obj) { with (obj) { return nativeRecordingHeight; } }, "dyncontrolbar": function (obj) { with (obj) { return dyncontrolbar; } }, "csscontrolbar || css": function (obj) { with (obj) { return csscontrolbar || css; } }, "csstheme || css": function (obj) { with (obj) { return csstheme || css; } }, "tmplcontrolbar": function (obj) { with (obj) { return tmplcontrolbar; } }, "controlbar_active": function (obj) { with (obj) { return controlbar_active; } }, "cameras": function (obj) { with (obj) { return cameras; } }, "microphones": function (obj) { with (obj) { return microphones; } }, "noaudio": function (obj) { with (obj) { return noaudio; } }, "record_media==='screen'": function (obj) { with (obj) { return record_media==='screen'; } }, "selectedcamera || 0": function (obj) { with (obj) { return selectedcamera || 0; } }, "selectedmicrophone || 0": function (obj) { with (obj) { return selectedmicrophone || 0; } }, "camerahealthy": function (obj) { with (obj) { return camerahealthy; } }, "microphonehealthy": function (obj) { with (obj) { return microphonehealthy; } }, "settingsvisible": function (obj) { with (obj) { return settingsvisible; } }, "recordvisible": function (obj) { with (obj) { return recordvisible; } }, "allowcancel && cancancel": function (obj) { with (obj) { return allowcancel && cancancel; } }, "uploadcovershotvisible": function (obj) { with (obj) { return uploadcovershotvisible; } }, "rerecordvisible": function (obj) { with (obj) { return rerecordvisible; } }, "stopvisible": function (obj) { with (obj) { return stopvisible; } }, "skipvisible": function (obj) { with (obj) { return skipvisible; } }, "controlbarlabel": function (obj) { with (obj) { return controlbarlabel; } }, "mintimeindicator": function (obj) { with (obj) { return mintimeindicator; } }, "timeminlimit": function (obj) { with (obj) { return timeminlimit; } }, "player_active": function (obj) { with (obj) { return player_active; } }, "ie8": function (obj) { with (obj) { return ie8; } }, "dynvideoplayer": function (obj) { with (obj) { return dynvideoplayer; } }, "theme || 'default'": function (obj) { with (obj) { return theme || 'default'; } }, "playbacksource": function (obj) { with (obj) { return playbacksource; } }, "playbackposter": function (obj) { with (obj) { return playbackposter; } }, "false": function (obj) { with (obj) { return false; } }, "forceflash": function (obj) { with (obj) { return forceflash; } }, "noflash": function (obj) { with (obj) { return noflash; } }, "stretch": function (obj) { with (obj) { return stretch; } }, "playerattrs": function (obj) { with (obj) { return playerattrs; } }, "width": function (obj) { with (obj) { return width; } }, "height": function (obj) { with (obj) { return height; } }, "duration / 1000": function (obj) { with (obj) { return duration / 1000; } }, "rerecordable && (recordings === null || recordings > 0)": function (obj) { with (obj) { return rerecordable && (recordings === null || recordings > 0); } }, "manualsubmit && verified": function (obj) { with (obj) { return manualsubmit && verified; } }, "true": function (obj) { with (obj) { return true; } }, "autoplay": function (obj) { with (obj) { return autoplay; } }, "nofullscreen": function (obj) { with (obj) { return nofullscreen; } }, "playertopmessage": function (obj) { with (obj) { return playertopmessage; } }, "allowtexttrackupload": function (obj) { with (obj) { return allowtexttrackupload; } }, "uploadtexttracksvisible": function (obj) { with (obj) { return uploadtexttracksvisible; } }, "tracktags": function (obj) { with (obj) { return tracktags; } }, "tracktagsstyled": function (obj) { with (obj) { return tracktagsstyled; } }, "trackcuetext": function (obj) { with (obj) { return trackcuetext; } }, "acceptedtracktexts": function (obj) { with (obj) { return acceptedtracktexts; } }, "tracksshowselection": function (obj) { with (obj) { return tracksshowselection; } }, "trackselectorhovered": function (obj) { with (obj) { return trackselectorhovered; } }, "uploadlocales": function (obj) { with (obj) { return uploadlocales; } }/**/ })
        .attachStringTable(Assets.strings)
        .addStrings({
            "recorder-error": "An error occurred, please try again later. Click to retry.",
            "attach-error": "We could not access the media interface. Depending on the device and browser, you might need to install Flash or access the page via SSL.",
            "software-required": "Please click below to install / activate the following requirements in order to proceed.",
            "software-waiting": "Waiting for the requirements to be installed / activated. You might need to refresh the page after completion.",
            "access-forbidden": "Access to the media was forbidden. Click to retry.",
            "pick-covershot": "Pick a covershot.",
            "framerate-warning": "The video frame rate is very low. We recommend closing all other programs and browser tabs or to use a faster computer.",
            "uploading": "Uploading video",
            "uploading-failed": "Uploading failed - click here to retry.",
            "upload-error-duration": "Length of the uploaded video does not meet the requirements - click here to retry.",
            "resolution-constraint-error": "The file you've selected does not match the required resolution - click here to retry.",
            "verifying": "Verifying",
            "verifying-failed": "Verifying failed - click here to retry.",
            "rerecord-confirm": "Do you really want to redo your video?",
            "cancel-confirm": "Do you really want to cancel your video upload?",
            "video_file_too_large": "Your video file is too large (%s) - click here to try again with a smaller video file.",
            "unsupported_video_type": "Please upload: %s - click here to retry.",
            "orientation-portrait-required": "Please rotate your device to record in portrait mode.",
            "orientation-landscape-required": "Please rotate your device to record in landscape mode."
        });
});
Scoped.define("module:VideoRecorder.Dynamics.RecorderStates.State", [
    "base:States.State",
    "base:Events.ListenMixin",
    "base:Objs"
], function(State, ListenMixin, Objs, scoped) {
    return State.extend({
        scoped: scoped
    }, [ListenMixin, {

        dynamics: [],

        _start: function() {
            this.dyn = this.host.dynamic;
            Objs.iter(Objs.extend({
                "message": false,
                "message_uploading": false,
                "chooser": false,
                "topmessage": false,
                "controlbar": false,
                "loader": false,
                "imagegallery": false
            }, Objs.objectify(this.dynamics)), function(value, key) {
                this.dyn.set(key + "_active", value);
            }, this);
            this.dyn.set("playertopmessage", "");
            this.dyn.set("message_links", null);
            this.dyn._accessing_camera = false;
            this._started();
        },

        _started: function() {},

        record: function() {
            this.dyn.set("autorecord", true);
        },

        stop: function() {
            this.dyn.scopes.player.execute('stop');
        },

        play: function() {
            this.dyn.scopes.player.execute('play');
        },

        pause: function() {
            this.dyn.scopes.player.execute('pause');
        },

        rerecord: function() {},

        selectRecord: function() {},

        selectRecordScreen: function() {},

        selectUpload: function(file) {},

        uploadCovershot: function(file) {}

    }]);
});



Scoped.define("module:VideoRecorder.Dynamics.RecorderStates.FatalError", [
    "module:VideoRecorder.Dynamics.RecorderStates.State",
    "browser:Info",
    "base:Timers.Timer"
], function(State, Info, Timer, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["message"],
        _locals: ["message", "retry"],

        _started: function() {
            this.dyn.set("message", this._message || this.dyn.string("recorder-error"));
            this.dyn.set("shortMessage", this.dyn.get("message").length < 30);
            this.listenOn(this.dyn, "message-click", function() {
                if (this._retry)
                    this.next(this._retry);
            });
        }

    });
});


Scoped.define("module:VideoRecorder.Dynamics.RecorderStates.Initial", [
    "module:VideoRecorder.Dynamics.RecorderStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        _started: function() {
            this.dyn.set("is_initial_state", true);
            this.dyn.set("verified", false);
            this.dyn.set("playbacksource", null);
            this.dyn.set("playbackposter", null);
            this.dyn.set("player_active", false);
            this.dyn._videoFileName = null;
            this.dyn._videoFile = null;
            this.dyn._videoFilePlaybackable = false;
            this.dyn._initializeUploader();
            if (!this.dyn.get("recordermode")) {
                if (!this.dyn.get("video")) {
                    console.warn("recordermode:false requires an existing video to be present and provided.");
                    this.dyn.set("recordermode", true);
                } else
                    this.next("Player");
            } else if (this.dyn.get("autorecord") || this.dyn.get("skipinitial"))
                this.eventualNext("RequiredSoftwareCheck");
            else
                this.next("Chooser");
        },

        _end: function() {
            this.dyn.set("is_initial_state", false);
        }

    });
});


Scoped.define("module:VideoRecorder.Dynamics.RecorderStates.Player", [
    "module:VideoRecorder.Dynamics.RecorderStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        rerecord: function() {
            this.dyn.trigger("rerecord");
            this.dyn.set("recordermode", true);
            this.next("Initial");
        },

        _started: function() {
            this.dyn.set("player_active", true);
            if (this.dyn.get("allowtexttrackupload"))
                this.dyn.set("uploadtexttracksvisible", true);
        },

        _end: function() {
            this.dyn.set("player_active", false);
            this.dyn.set("uploadtexttracksvisible", false);
        }

    });
});


Scoped.define("module:VideoRecorder.Dynamics.RecorderStates.Chooser", [
    "module:VideoRecorder.Dynamics.RecorderStates.State",
    "base:Strings",
    "browser:Info",
    "media:Player.Support"
], function(State, Strings, Info, PlayerSupport, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["chooser"],

        _started: function() {
            this.listenOn(this.dyn, "change:orientation change:currentorientation", function() {
                var orientation = this.dyn.get("orientation");
                var currentorientation = this.dyn.get("currentorientation");
                var result = orientation && orientation !== currentorientation;
                if (result)
                    this.dyn.set("message", this.dyn.string("orientation-" + orientation + "-required"));
                this.dyn.set("message_active", result);
                this.dyn.set("chooser_active", !result);
            }, this, {
                initcall: true
            });
            var that = this;
            window.setTimeout(function() {
                that.selectRecord();
            }, 100);
        },

        record: function() {
            this.dyn.set("autorecord", true);
            this.selectRecord();
        },

        selectRecordScreen: function() {
            this.dyn.set("record_media", "screen");
            this.next("RequiredSoftwareCheck");
        },

        selectRecord: function() {
            this.dyn.set("record_media", "camera");
            this.next("RequiredSoftwareCheck");
        },

        selectUpload: function(file) {
            if (!(Info.isMobile() && Info.isAndroid() && Info.isCordova())) {
                if (this.dyn.get("allowedextensions")) {
                    var filename = (file.files[0].name || "").toLowerCase();
                    var found = false;
                    this.dyn.get("allowedextensions").forEach(function(extension) {
                        if (Strings.ends_with(filename, "." + extension.toLowerCase()))
                            found = true;
                    }, this);
                    if (!found) {
                        this.next("FatalError", {
                            message: this.dyn.string("unsupported_video_type").replace("%s", this.dyn.get("allowedextensions").join(" / ")),
                            retry: "Chooser"
                        });
                        return;
                    }
                }
                if (this.dyn.get("filesizelimit") && file.files && file.files.length > 0 && file.files[0].size && file.files[0].size > this.dyn.get("filesizelimit")) {
                    var fact = "KB";
                    var size = Math.round(file.files[0].size / 1000);
                    var limit = Math.round(this.dyn.get("filesizelimit") / 1000);
                    if (size > 999) {
                        fact = "MB";
                        size = Math.round(size / 1000);
                        limit = Math.round(limit / 1000);
                    }
                    this.next("FatalError", {
                        message: this.dyn.string("video_file_too_large").replace("%s", size + fact + " / " + limit + fact),
                        retry: "Chooser"
                    });
                    return;
                }
            }
            try {
                PlayerSupport.videoFileInfo(file.files[0]).success(function(data) {
                    if (data.duration && this.dyn.get("enforce-duration")) {
                        if ((this.dyn.get("timeminlimit") && data.duration < this.dyn.get("timeminlimit")) || (this.dyn.get("timelimit") && data.duration > this.dyn.get("timelimit"))) {
                            this.next("FatalError", {
                                message: this.dyn.string("upload-error-duration"),
                                retry: "Chooser"
                            });
                            return;
                        }
                    }
                    if ((data.width && this.dyn.get("minuploadingwidth") && this.dyn.get("minuploadingwidth") > data.width) ||
                        (data.width && this.dyn.get("maxuploadingwidth") && this.dyn.get("maxuploadingwidth") < data.width) ||
                        (data.height && this.dyn.get("minuploadingheight") && this.dyn.get("minuploadingheight") > data.height) ||
                        (data.height && this.dyn.get("maxuploadingheight") && this.dyn.get("maxuploadingheight") < data.height)) {
                        this.next("FatalError", {
                            message: this.dyn.string("resolution-constraint-error"),
                            retry: "Chooser"
                        });
                        return;
                    }
                    this.dyn._videoFilePlaybackable = true;
                    this._uploadFile(file);
                }, this).error(function() {
                    this._uploadFile(file);
                }, this);
            } catch (e) {
                this._uploadFile(file);
            }
        },

        _uploadFile: function(file) {
            this.dyn.set("creation-type", Info.isMobile() ? "mobile" : "upload");
            try {
                this.dyn._videoFileName = file.files[0].name;
                this.dyn._videoFile = file.files[0];
            } catch (e) {}
            this.dyn._prepareRecording().success(function() {
                this.dyn.trigger("upload_selected", file);
                this.dyn._uploadVideoFile(file);
                this._setValueToEmpty(file);
                this.next("Uploading");
            }, this).error(function(s) {
                this._setValueToEmpty(file);
                this.next("FatalError", {
                    message: s,
                    retry: "Chooser"
                });
            }, this);
        },

        /**
         * Try to fix twice file upload behaviour, (on change event won't be executed twice with the same file)
         * Don't set null to value, will not solve an issue
         * @param {HTMLInputElement} file
         */
        _setValueToEmpty: function(file) {
            try {
                file.value = '';
            } catch (e) {}
        }

    });
});


Scoped.define("module:VideoRecorder.Dynamics.RecorderStates.RequiredSoftwareCheck", [
    "module:VideoRecorder.Dynamics.RecorderStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader"],

        _started: function() {
            this.dyn.set("settingsvisible", false);
            this.dyn.set("recordvisible", false);
            this.dyn.set("rerecordvisible", false);
            this.dyn.set("stopvisible", false);
            this.dyn.set("skipvisible", false);
            this.dyn.set("controlbarlabel", "");
            this.dyn.set("loaderlabel", "");
            this.listenOn(this.dyn, "error", function(s) {
                this.next("FatalError", {
                    message: this.dyn.string("attach-error"),
                    retry: "Initial"
                });
            }, this);
            this.dyn._attachRecorder();
            if (this.dyn) {
                this.dyn.on("message-link-click", function(link) {
                    link.execute();
                    this.next("RequiredSoftwareWait");
                }, this);
                this.dyn._softwareDependencies().error(function(dependencies) {
                    this.dyn.set("message_links", dependencies);
                    this.dyn.set("loader_active", false);
                    this.dyn.set("message_active", true);
                    this.dyn.set("message", this.dyn.string("software-required"));
                }, this).success(function() {
                    this.next("CameraAccess");
                }, this);
            }
        }

    });
});


Scoped.define("module:VideoRecorder.Dynamics.RecorderStates.RequiredSoftwareWait", [
    "module:VideoRecorder.Dynamics.RecorderStates.State",
    "base:Promise",
    "browser:Dom"
], function(State, Promise, Dom, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["message"],

        _started: function() {
            this.dyn.set("settingsvisible", false);
            this.dyn.set("recordvisible", false);
            this.dyn.set("rerecordvisible", false);
            this.dyn.set("stopvisible", false);
            this.dyn.set("skipvisible", false);
            this.dyn.set("controlbarlabel", "");
            this.dyn.set("loaderlabel", "");
            this.dyn.set("message", this.dyn.string("software-waiting"));
            Promise.resilience(function() {
                if (Dom.isTabHidden())
                    return Promise.error("Not ready");
                return this.dyn._softwareDependencies();
            }, this, 120, [], 1000).success(function() {
                this.next("CameraAccess");
            }, this).error(function() {
                this.next("RequiredSoftwareCheck");
            }, this);
            this.dyn.on("message-click", function() {
                this.next("RequiredSoftwareCheck");
            }, this);
        }

    });
});



Scoped.define("module:VideoRecorder.Dynamics.RecorderStates.CameraAccess", [
    "module:VideoRecorder.Dynamics.RecorderStates.State",
    "base:Timers.Timer"
], function(State, Timer, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader"],

        _started: function() {
            this.dyn.set("settingsvisible", true);
            this.dyn.set("recordvisible", true);
            this.dyn.set("rerecordvisible", false);
            this.dyn.set("stopvisible", false);
            this.dyn.set("skipvisible", false);
            this.dyn.set("controlbarlabel", "");
            this.dyn.set("loaderlabel", "");
            this.listenOn(this.dyn, "bound", function() {
                this.dyn.set("creation-type", this.dyn.isFlash() ? "flash" : "webrtc");
                if (this.dyn.get("onlyaudio") || this.dyn.get("record_media") === "screen") {
                    this.next("CameraHasAccess");
                    return;
                }
                var timer = this.auto_destroy(new Timer({
                    start: true,
                    delay: 100,
                    context: this,
                    fire: function() {
                        if (this.dyn.blankLevel() >= 0.01 && this.dyn.deltaCoefficient() >= 0.01) {
                            timer.stop();
                            this.next("CameraHasAccess");
                        }
                    }
                }));
            }, this);
            this.listenOn(this.dyn, "error", function(s) {
                this.next("FatalError", {
                    message: this.dyn.string("attach-error"),
                    retry: "Initial"
                });
            }, this);
            this.listenOn(this.dyn, "access_forbidden", function() {
                this.next("FatalError", {
                    message: this.dyn.string("access-forbidden"),
                    retry: "Initial"
                });
            }, this);
            this.dyn._bindMedia();
        }

    });
});


Scoped.define("module:VideoRecorder.Dynamics.RecorderStates.CameraHasAccess", [
    "module:VideoRecorder.Dynamics.RecorderStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["topmessage", "controlbar"],

        _started: function() {
            this.dyn.trigger("ready_to_record");
            this._preparePromise = null;
            if (this.dyn.get("countdown") > 0 && this.dyn.recorder && this.dyn.recorder.recordDelay(this.dyn.get("uploadoptions")) > this.dyn.get("countdown") * 1000)
                this._preparePromise = this.dyn._prepareRecording();
            this.dyn.set("hovermessage", "");
            this.dyn.set("topmessage", "");
            this.dyn.set("settingsvisible", true);
            this.dyn.set("recordvisible", true);
            this.dyn.set("rerecordvisible", false);
            this.dyn.set("stopvisible", false);
            this.dyn.set("skipvisible", false);
            this.dyn.set("controlbarlabel", "");
            if (this.dyn.get("autorecord"))
                this.next("RecordPrepare", {
                    preparePromise: this._preparePromise
                });
        },

        record: function() {
            if (this.dyn.get("autorecord"))
                return;
            if (this.dyn.get("audio-test-mandatory") && !this.dyn.get("microphonehealthy") && !this._preparePromise)
                return;
            this.next("RecordPrepare", {
                preparePromise: this._preparePromise
            });
        }

    });
});


Scoped.define("module:VideoRecorder.Dynamics.RecorderStates.RecordPrepare", [
    "module:VideoRecorder.Dynamics.RecorderStates.State",
    "base:Timers.Timer",
    "base:Time"
], function(State, Timer, Time, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader"],
        _locals: ["preparePromise"],

        _started: function() {
            var countdownSpeed = 700;
            this.dyn.set("message", "");
            this.dyn.set("loaderlabel", "");
            var startedRecording = false;
            this.dyn._accessing_camera = true;
            this._preparePromise = this._preparePromise || this.dyn._prepareRecording();
            var countdown = this.dyn.get("countdown") ? this.dyn.get("countdown") * countdownSpeed : 0;
            var delay = this.dyn.recorder.recordDelay(this.dyn.get("uploadoptions")) || 0;
            if (countdown) {
                var displayDenominator = countdownSpeed;
                var silentTime = 0;
                var startTime = Time.now();
                var endTime = startTime + Math.max(delay, countdown);
                if (delay > countdown) {
                    silentTime = Math.min(500, delay - countdown);
                    displayDenominator = (delay - silentTime) / countdown * countdownSpeed;
                } else
                    this.dyn.set("loaderlabel", "" + this.dyn.get("countdown") + "...");
                var timer = new Timer({
                    context: this,
                    delay: 50,
                    fire: function() {
                        var now = Time.now();
                        var time_left = Math.max(0, endTime - now);
                        if (now > silentTime + startTime) {
                            this.dyn.set("loaderlabel", "" + Math.ceil((time_left - silentTime) / displayDenominator) + "...");
                            this.dyn.trigger("countdown", Math.round((time_left - silentTime) / displayDenominator * countdownSpeed));
                        }
                        if (endTime <= now) {
                            this.dyn.set("loaderlabel", "");
                            timer.stop();
                        }
                        if ((time_left <= delay) && !startedRecording) {
                            startedRecording = true;
                            this._startRecording();
                        }
                    }
                });
                this.auto_destroy(timer);
            } else
                this._startRecording();
        },

        record: function() {
            this._startRecording();
        },

        _startRecording: function() {
            this._preparePromise.success(function() {
                this.dyn._startRecording().success(function() {
                    this.next("Recording");
                }, this).error(function(s) {
                    this.next("FatalError", {
                        message: s,
                        retry: "RequiredSoftwareCheck"
                    });
                }, this);
            }, this).error(function(s) {
                this.next("FatalError", {
                    message: s,
                    retry: "RequiredSoftwareCheck"
                });
            }, this);
        }

    });
});


Scoped.define("module:VideoRecorder.Dynamics.RecorderStates.Recording", [
    "module:VideoRecorder.Dynamics.RecorderStates.State",
    "base:Timers.Timer",
    "base:Time",
    "base:TimeFormat",
    "base:Async"
], function(State, Timer, Time, TimeFormat, Async, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["topmessage", "controlbar"],

        _started: function() {
            this.dyn.set("hovermessage", "");
            this.dyn.set("topmessage", "");
            this.dyn._accessing_camera = true;
            this.dyn.trigger("recording");
            this.dyn.set("settingsvisible", false);
            this.dyn.set("rerecordvisible", false);
            this.dyn.set("recordvisible", false);
            this.dyn.set("stopvisible", true);
            this.dyn.set("skipvisible", false);
            this._startTime = Time.now();
            this._stopping = false;
            this._timer = this.auto_destroy(new Timer({
                immediate: true,
                delay: 10,
                context: this,
                fire: this._timerFire
            }));
            this._framerateWarning = false;
        },

        _timerFire: function() {
            var limit = this.dyn.get("timelimit");
            var current = Time.now();
            var display = Math.max(0, limit ? (this._startTime + limit * 1000 - current) : (current - this._startTime));
            this.dyn.trigger("recording_progress", current - this._startTime);
            this.dyn.set("controlbarlabel", this.dyn.get("display-timer") ? TimeFormat.format(TimeFormat.ELAPSED_MINUTES_SECONDS, display) : "");

            if (this.dyn.get("timeminlimit"))
                this.dyn.set("mintimeindicator", (Time.now() - this._startTime) / 1000 <= this.dyn.get("timeminlimit"));

            if (limit && this._startTime + limit * 1000 <= current) {
                this._timer.stop();
                this.stop();
            }


            if (this.dyn.get("framerate-warning") && this.dyn.averageFrameRate()) {
                var framerateWarning = this.dyn.averageFrameRate() < this.dyn.get("framerate-warning");
                if (framerateWarning != this._framerateWarning) {
                    this._framerateWarning = framerateWarning;
                    if (framerateWarning)
                        this.dyn.set("hovermessage", this.dyn.string("framerate-warning"));
                    else
                        this.dyn.set("hovermessage", "");
                }
            }
        },

        stop: function() {
            var minlimit = this.dyn.get("timeminlimit");
            if (minlimit) {
                var delta = (Time.now() - this._startTime) / 1000;
                if (delta < minlimit) {
                    var limit = this.dyn.get("timelimit");
                    if (!limit || limit > delta)
                        return;
                }
            }
            if (this._stopping)
                return;
            this.dyn.set("loader_active", true);
            this.dyn.set("controlbar_active", false);
            this.dyn.set("topmessage_active", false);
            this.dyn.set("message_active", true);
            this.dyn.set("message", "");
            this._stopping = true;
            Async.eventually(function() {
                this.dyn._stopRecording().success(function() {
                    this._hasStopped();
                    if (this.dyn.get("picksnapshots") && this.dyn.snapshots.length >= this.dyn.get("gallerysnapshots"))
                        this.next("CovershotSelection");
                    else
                        this.next("Uploading");
                }, this).error(function(s) {
                    this.next("FatalError", {
                        message: s,
                        retry: "RequiredSoftwareCheck"
                    });
                }, this);
            }, this);
        },

        _hasStopped: function() {
            this.dyn.set("duration", Time.now() - this._startTime);
            this.dyn._showBackgroundSnapshot();
            this.dyn._unbindMedia();
            this.dyn.trigger("recording_stopped");
        }

    });
});


Scoped.define("module:VideoRecorder.Dynamics.RecorderStates.CovershotSelection", [
    "module:VideoRecorder.Dynamics.RecorderStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["imagegallery", "topmessage", "controlbar"],

        _started: function() {
            this.dyn.set("settingsvisible", false);
            this.dyn.set("recordvisible", false);
            this.dyn.set("stopvisible", false);
            this.dyn.set("skipvisible", true);
            this.dyn.set("controlbarlabel", "");
            this.dyn.set("rerecordvisible", this.dyn.get("early-rerecord"));
            this.dyn.set("uploadcovershotvisible", this.dyn.get("custom-covershots"));
            this.dyn.set("hovermessage", "");
            this.dyn.set("topmessage", "");
            this.dyn.trigger("pick_cover_start");
            var imagegallery = this.dyn.scope(">[tagname='ba-videorecorder-imagegallery']").materialize(true);
            imagegallery.loadSnapshots();
            imagegallery.updateContainerSize();
            this.listenOn(this.dyn, "invoke-skip", function() {
                this._nextUploading(true);
            }, this);
            this.listenOn(this.dyn, "select-image", function(image) {
                this.dyn._uploadCovershot(image);
                this._nextUploading(false);
            }, this);
            this.listenOn(this.dyn, "hover-image", function(snapshot) {
                this.dyn._hideBackgroundSnapshot();
                this.dyn._displayBackgroundSnapshot(snapshot);
            }, this);
        },

        rerecord: function() {
            this.dyn._hideBackgroundSnapshot();
            this.dyn._detachRecorder();
            this.dyn.trigger("rerecord");
            this.dyn.set("recordermode", true);
            this.next("Initial");
        },

        uploadCovershot: function(file) {
            this.dyn._uploadCovershotFile(file);
            this._nextUploading(false);
        },

        _nextUploading: function(skippedCovershot) {
            this.dyn.trigger("pick_cover_end");
            this.next("Uploading");
        }

    });
});


Scoped.define("module:VideoRecorder.Dynamics.RecorderStates.Uploading", [
    "module:VideoRecorder.Dynamics.RecorderStates.State",
    "base:Time",
    "base:Async",
    "base:Objs"
], function(State, Time, Async, Objs, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader", "message"],

        _started: function() {
            this.dyn.set("cancancel", true);
            this.dyn.set("skipinitial", this.dyn.get("skipinitial") || this.dyn.get("skipinitialonrerecord"));
            this.dyn.set("settingsvisible", false);
            this.dyn.set("recordvisible", false);
            this.dyn.set("stopvisible", false);
            this.dyn.set("loadlabel", "");
            this.dyn.set("controlbarlabel", "");
            this.dyn.trigger("uploading");
            this.dyn.set("rerecordvisible", this.dyn.get("early-rerecord"));
            if (this.dyn.get("early-rerecord"))
                this.dyn.set("controlbar_active", true);
            this.dyn.set("hovermessage", "");
            this.dyn.set("topmessage", "");
            this.dyn.set("message", this.dyn.string("uploading"));
            this.dyn.set("playertopmessage", this.dyn.get("message"));
            var uploader = this.dyn._dataUploader;
            this.listenOn(uploader, "success", function() {
                Async.eventually(function() {
                    if (this.destroyed())
                        return;
                    this._finished();
                    this.next("Verifying");
                }, this);
            });
            this.listenOn(uploader, "error", function(e) {
                var bestError = this.dyn.string("uploading-failed");
                try {
                    e.forEach(function(ee) {
                        for (var key in ee)
                            if (this.dyn.string("upload-error-" + key))
                                bestError = this.dyn.string("upload-error-" + key);
                    }, this);
                } catch (err) {}
                this.dyn.set("player_active", false);
                this.next("FatalError", {
                    message: bestError,
                    retry: this.dyn.recorderAttached() ? "Uploading" : "Initial"
                });
            });
            this.listenOn(uploader, "progress", function(uploaded, total) {
                this.dyn.trigger("upload_progress", uploaded, total);
                if (total !== 0 && total > 0 && uploaded >= 0) {
                    this.dyn.set("message_uploading", true);
                    var up = Math.min(100, Math.round(uploaded / total * 100));
                    if (!isNaN(up)) {
                        this.dyn.set("message", this.dyn.string("uploading") + " (" + up + "% complete)");
                        this.dyn.set("playertopmessage", this.dyn.get("message"));
                    }
                } else
                    this.dyn.set("message_uploading", false);
            });
            if (this.dyn.get("localplayback") && ((this.dyn.recorder && this.dyn.recorder.supportsLocalPlayback()) || this.dyn._videoFilePlaybackable)) {
                if (this.dyn.recorder && this.dyn.recorder.supportsLocalPlayback())
                    this.dyn.set("playbacksource", this.dyn.recorder.localPlaybackSource());
                else
                    this.dyn.set("playbacksource", (window.URL || window.webkitURL).createObjectURL(this.dyn._videoFile));
                if (this.dyn.__lastCovershotUpload && this.dyn.recorder)
                    this.dyn.set("playbackposter", this.dyn.recorder.snapshotToLocalPoster(this.dyn.__lastCovershotUpload));
                this.dyn.set("loader_active", false);
                this.dyn.set("message_active", false);
                this.dyn._hideBackgroundSnapshot();
                this.dyn.set("player_active", true);
            }
            this.dyn.set("start-upload-time", Time.now());
            uploader.reset();
            uploader.upload();
        },

        rerecord: function() {
            this.dyn._hideBackgroundSnapshot();
            this.dyn._detachRecorder();
            this.dyn.trigger("rerecord");
            this.dyn.set("recordermode", true);
            this.next("Initial");
        },

        _finished: function() {
            this.dyn.set("cancancel", false);
            this.dyn.trigger("uploaded");
            this.dyn.set("end-upload-time", Time.now());
        }

    });
});


Scoped.define("module:VideoRecorder.Dynamics.RecorderStates.Verifying", [
    "module:VideoRecorder.Dynamics.RecorderStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader", "message"],

        _started: function() {
            this.dyn.set("loadlabel", "");
            this.dyn.trigger("verifying");
            this.dyn.set("message", this.dyn.string("verifying") + "...");
            this.dyn.set("playertopmessage", this.dyn.get("message"));
            if (this.dyn.get("localplayback") && ((this.dyn.recorder && this.dyn.recorder.supportsLocalPlayback()) || this.dyn._videoFilePlaybackable)) {
                this.dyn.set("loader_active", false);
                this.dyn.set("message_active", false);
            } else {
                this.dyn.set("rerecordvisible", this.dyn.get("early-rerecord"));
                if (this.dyn.get("early-rerecord"))
                    this.dyn.set("controlbar_active", true);
            }
            this.dyn._verifyRecording().success(function() {
                this.dyn.trigger("verified");
                this.dyn._hideBackgroundSnapshot();
                this.dyn._detachRecorder();
                if (this.dyn.get("recordings"))
                    this.dyn.set("recordings", this.dyn.get("recordings") - 1);
                this.dyn.set("message", "");
                this.dyn.set("playertopmessage", "");
                this.dyn.set("verified", true);
                this.next("Player");
            }, this).error(function() {
                this.dyn.set("player_active", false);
                this.next("FatalError", {
                    message: this.dyn.string("verifying-failed"),
                    retry: this.dyn.recorderAttached() ? "Verifying" : "Initial"
                });
            }, this);
        },

        rerecord: function() {
            this.dyn._hideBackgroundSnapshot();
            this.dyn._detachRecorder();
            this.dyn.trigger("rerecord");
            this.dyn.set("recordermode", true);
            this.next("Initial");
        }

    });
});
Scoped.define("module:VideoRecorder.Dynamics.Topmessage", [
    "dynamics:Dynamic"
], function(Class, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div class=\"{{css}}-topmessage-container\">\n    <div class='{{css}}-topmessage-background'>\n    </div>\n    <div data-selector=\"recorder-topmessage-block\" class='{{css}}-topmessage-message'>\n        {{topmessage}}\n    </div>\n</div>\n",

                attrs: {
                    "css": "ba-videorecorder",
                    "csscommon": "ba-commoncss",
                    "cssrecorder": "ba-recorder",
                    "topmessage": ''
                }

            };
        })
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "topmessage": function (obj) { with (obj) { return topmessage; } }/**/ })
        .register("ba-videorecorder-topmessage");
});
Scoped.define("module:ImageViewer.Dynamics.Controlbar", [
    "dynamics:Dynamic",
    "module:Assets",
    "browser:Info"
], [
    "dynamics:Partials.ShowPartial",
    "dynamics:Partials.IfPartial",
    "dynamics:Partials.ClickPartial"
], function(Class, Assets, Info, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div class=\"{{css}}-dashboard {{activitydelta > 5000 && hideoninactivity ? (css + '-dashboard-hidden') : ''}}\">\n\t<div class=\"{{css}}-backbar\"></div>\n\n\t<div class=\"{{css}}-controlbar\">\n\n        <div tabindex=\"0\" data-selector=\"submit-image-button\"\n\t\t\t ba-hotkey:space^enter=\"{{submit()}}\" onmouseout=\"this.blur()\"\n\t\t\t class=\"{{css}}-leftbutton-container\"\n\t\t\t ba-if=\"{{submittable}}\" ba-click=\"{{submit()}}\">\n            <div class=\"{{css}}-button-inner\">\n                {{string('submit-image')}}\n            </div>\n        </div>\n\n        <div tabindex=\"0\" data-selector=\"button-icon-ccw\"\n\t\t\t ba-hotkey:space^enter=\"{{rerecord()}}\" onmouseout=\"this.blur()\"\n\t\t\t class=\"{{css}}-leftbutton-container\" ba-if=\"{{rerecordable}}\"\n\t\t\t ba-click=\"{{rerecord()}}\" title=\"{{string('rerecord-image')}}\"\n\t\t>\n            <div class=\"{{css}}-button-inner\">\n                <i class=\"{{csscommon}}-icon-ccw\"></i>\n            </div>\n        </div>\n\n\t\t<div data-selector=\"image-title-block\" class=\"{{css}}-image-title-container\" ba-if=\"{{title}}\">\n\t\t\t<p class=\"{{css}}-image-title\">\n\t\t\t\t{{title}}\n\t\t\t</p>\n\t\t</div>\n\n\t\t<div tabindex=\"8\" data-selector=\"button-icon-resize-full\"\n\t\t\t ba-hotkey:space^enter=\"{{toggle_fullscreen()}}\" onmouseout=\"this.blur()\"\n\t\t\t class=\"{{css}}-rightbutton-container\"\n\t\t\t onkeydown=\"{{tab_index_move(domEvent)}}\" ba-if=\"{{fullscreen}}\"\n\t\t\t ba-click=\"{{toggle_fullscreen()}}\" title=\"{{ fullscreened ? string('exit-fullscreen-image') : string('fullscreen-image') }}\">\n\t\t\t<div class=\"{{css}}-button-inner\">\n\t\t\t\t<i class=\"{{csscommon}}-icon-resize-{{fullscreened ? 'small' : 'full'}}\"></i>\n\t\t\t</div>\n\t\t</div>\n\n\t</div>\n</div>\n",

                attrs: {
                    "css": "ba-imageviewer",
                    "rerecordable": false,
                    "submittable": false,
                    "fullscreen": true,
                    "fullscreened": false,
                    "activitydelta": 0,
                    "title": ""
                },

                functions: {

                    toggle_fullscreen: function() {
                        this.trigger("fullscreen");
                    },

                    rerecord: function() {
                        this.trigger("rerecord");
                    },

                    submit: function() {
                        this.set("submittable", false);
                        this.set("rerecordable", false);
                        this.trigger("submit");
                    },

                    tab_index_move: function(ev, nextSelector, focusingSelector) {
                        this.trigger("tab_index_move", ev[0], nextSelector, focusingSelector);
                    }
                },

                create: function() {
                    this.set("ismobile", Info.isMobile());
                }
            };
        })
        .register("ba-imageviewer-controlbar")
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "activitydelta > 5000 && hideoninactivity ? (css + '-dashboard-hidden') : ''": function (obj) { with (obj) { return activitydelta > 5000 && hideoninactivity ? (css + '-dashboard-hidden') : ''; } }, "submit()": function (obj) { with (obj) { return submit(); } }, "submittable": function (obj) { with (obj) { return submittable; } }, "string('submit-image')": function (obj) { with (obj) { return string('submit-image'); } }, "rerecord()": function (obj) { with (obj) { return rerecord(); } }, "rerecordable": function (obj) { with (obj) { return rerecordable; } }, "string('rerecord-image')": function (obj) { with (obj) { return string('rerecord-image'); } }, "csscommon": function (obj) { with (obj) { return csscommon; } }, "title": function (obj) { with (obj) { return title; } }, "toggle_fullscreen()": function (obj) { with (obj) { return toggle_fullscreen(); } }, "tab_index_move(domEvent)": function (obj) { with (obj) { return tab_index_move(domEvent); } }, "fullscreen": function (obj) { with (obj) { return fullscreen; } }, "fullscreened ? string('exit-fullscreen-image') : string('fullscreen-image')": function (obj) { with (obj) { return fullscreened ? string('exit-fullscreen-image') : string('fullscreen-image'); } }, "fullscreened ? 'small' : 'full'": function (obj) { with (obj) { return fullscreened ? 'small' : 'full'; } }/**/ })
        .attachStringTable(Assets.strings)
        .addStrings({
            "rerecord-image": "Redo?",
            "submit-image": "Confirm",
            "fullscreen-image": "Enter fullscreen",
            "exit-fullscreen-image": "Exit fullscreen"
        });
});
Scoped.define("module:ImageViewer.Dynamics.Message", [
    "dynamics:Dynamic"
], [
    "dynamics:Partials.ClickPartial"
], function(Class, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div class=\"{{css}}-message-container\" ba-click=\"{{click()}}\">\n    <div data-selector=\"message-block\" class='{{css}}-message-message'>\n        {{message}}\n    </div>\n</div>\n",

                attrs: {
                    "css": "ba-imageviewer",
                    "message": ''
                },

                functions: {

                    click: function() {
                        this.trigger("click");
                    }

                }

            };
        })
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "click()": function (obj) { with (obj) { return click(); } }, "message": function (obj) { with (obj) { return message; } }/**/ })
        .register("ba-imageviewer-message");
});
Scoped.define("module:ImageViewer.Dynamics.Topmessage", [
    "dynamics:Dynamic"
], function(Class, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div class=\"{{css}}-topmessage-container\">\n    <div class='{{css}}-topmessage-background'>\n    </div>\n    <div data-selector=\"topmessage-message-block\" class='{{css}}-topmessage-message'>\n        {{topmessage}}\n    </div>\n</div>\n",

                attrs: {
                    "css": "ba-imageviewer",
                    "topmessage": ''
                }

            };
        })
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "topmessage": function (obj) { with (obj) { return topmessage; } }/**/ })
        .register("ba-imageviewer-topmessage");
});
Scoped.define("module:ImageViewer.Dynamics.ImageViewer", [
    "dynamics:Dynamic",
    "module:Assets",
    "browser:Info",
    "browser:Dom",
    "base:Types",
    "base:Objs",
    "base:Strings",
    "base:Time",
    "base:Timers",
    "base:Classes.ClassRegistry",
    "base:Async",
    "browser:Events"
], [
    "module:ImageViewer.Dynamics.Message",
    "module:ImageViewer.Dynamics.Controlbar",
    "dynamics:Partials.EventPartial",
    "dynamics:Partials.OnPartial",
    "dynamics:Partials.TemplatePartial",
    "dynamics:Partials.HotkeyPartial"
], function(Class, Assets, Info, Dom, Types, Objs, Strings, Time, Timers, ClassRegistry, Async, DomEvents, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "<div itemscope itemtype=\"http://schema.org/ImageObject\"\n    class=\"{{css}}-container {{css}}-size-{{csssize}} {{iecss}}-{{ie8 ? 'ie8' : 'noie8'}}\n    {{csstheme}} {{css}}-{{ fullscreened ? 'fullscreen' : 'normal' }}-view {{css}}-{{ firefox ? 'firefox' : 'common'}}-browser\n    {{css}}-{{themecolor}}-color\"\n    ba-on:mousemove=\"{{user_activity()}}\"\n    ba-on:mousedown=\"{{user_activity(true)}}\"\n    ba-on:touchstart=\"{{user_activity(true)}}\"\n\tba-styles=\"{{widthHeightStyles}}\"\n>\n    <img tabindex=\"-1\" class=\"{{css}}-image\" data-image=\"image\" />\n    <div class=\"{{css}}-overlay\">\n\t    <ba-{{dyncontrolbar}}\n\t\t    ba-css=\"{{csscontrolbar || css}}\"\n\t\t\tba-csscommon=\"{{csscommon || css}}\"\n\t\t\tba-themecolor=\"{{themecolor}}\"\n\t\t    ba-template=\"{{tmplcontrolbar}}\"\n\t\t    ba-show=\"{{controlbar_active}}\"\n\t\t    ba-event:rerecord=\"rerecord\"\n\t\t    ba-event:submit=\"submit\"\n\t\t    ba-event:fullscreen=\"toggle_fullscreen\"\n\t\t\tba-event:tab_index_move=\"tab_index_move\"\n\t\t\tba-tabindex=\"{{tabindex}}\"\n\t\t    ba-title=\"{{title}}\"\n\t\t    ba-activitydelta=\"{{activity_delta}}\"\n\t\t    ba-hideoninactivity=\"{{hideoninactivity}}\"\n\t\t    ba-rerecordable=\"{{rerecordable}}\"\n\t\t    ba-submittable=\"{{submittable}}\"\n\t\t    ba-fullscreen=\"{{fullscreensupport && !nofullscreen}}\"\n            ba-fullscreened=\"{{fullscreened}}\"\n            ba-source=\"{{source}}\"\n\t\t></ba-{{dyncontrolbar}}>\n\n\t\t<ba-{{dynmessage}}\n\t\t    ba-css=\"{{cssmessage || css}}\"\n\t\t\tba-csscommon=\"{{csscommon || css}}\"\n\t\t\tba-theme-color=\"{{themecolor}}\"\n\t\t    ba-template=\"{{tmplmessage}}\"\n\t\t    ba-show=\"{{message_active}}\"\n\t\t    ba-message=\"{{message}}\"\n\t\t    ba-event:click=\"message_click\"\n\t\t></ba-{{dynmessage}}>\n\n\t\t<ba-{{dyntopmessage}}\n\t\t    ba-css=\"{{csstopmessage || css}}\"\n\t\t\tba-csscommon=\"{{csscommon || css}}\"\n\t\t\tba-theme-color=\"{{themecolor}}\"\n\t\t    ba-template=\"{{tmpltopmessage}}\"\n\t\t    ba-show=\"{{topmessage}}\"\n\t\t    ba-topmessage=\"{{topmessage}}\"\n\t\t></ba-{{dyntopmessage}}>\n\t\t\n\t\t<meta itemprop=\"caption\" content=\"{{title}}\" />\n\t\t<meta itemprop=\"thumbnailUrl\" content=\"{{poster}}\"/>\n\t\t<meta itemprop=\"contentUrl\" content=\"{{source}}\"/>\n    </div>\n</div>\n",

                attrs: {
                    /* CSS */
                    "css": "ba-imageviewer",
                    "csscommon": "ba-commoncss",
                    "iecss": "ba-imageviewer",
                    "cssmessage": "",
                    "csstopmessage": "",
                    "csscontrolbar": "",
                    "width": "",
                    "height": "",
                    "popup-width": "",
                    "popup-height": "",
                    /* Themes */
                    "theme": "",
                    "csstheme": "",
                    "themecolor": "",
                    /* Dynamics */
                    "dynmessage": "imageviewer-message",
                    "dyntopmessage": "imageviewer-topmessage",
                    "dyncontrolbar": "imageviewer-controlbar",
                    /* Templates */
                    "tmplmessage": "",
                    "tmpltopmessage": "",
                    "tmplcontrolbar": "",
                    /* Attributes */
                    "source": "",
                    "title": "",
                    "fullscreened": false,
                    "visibilityfraction": 0.8,

                    /* Options */
                    "rerecordable": false,
                    "submittable": false,
                    "popup": false,
                    "nofullscreen": false,
                    "ready": true,
                    "stretch": false,
                    "popup-stretch": false,
                    "hideoninactivity": true,
                    "topmessage": "",
                    "closebuttonvisible": false,
                    "customcaptionvisible": false,
                    "initialoptions": {
                        "hideoninactivity": null
                    }
                },

                types: {
                    "rerecordable": "boolean",
                    "ready": "boolean",
                    "nofullscreen": "boolean",
                    "stretch": "boolean",
                    "hideoninactivity": "boolean",
                    "popup": "boolean",
                    "popup-stretch": "boolean",
                    "popup-width": "int",
                    "popup-height": "int",
                    "fullscreened": "boolean",
                    "themecolor": "string",
                    "closebuttonvisible": "boolean",
                    "customcaptionvisible": "boolean"
                },

                computed: {
                    "widthHeightStyles:width,height": function() {
                        var result = {};
                        var width = this.get("width");
                        var height = this.get("height");
                        if (width)
                            result.width = width + ((width + '').match(/^\d+$/g) ? 'px' : '');
                        if (height)
                            result.height = height + ((height + '').match(/^\d+$/g) ? 'px' : '');
                        return result;
                    }
                },

                events: {
                    "change:source": function() {
                        var img = this.image();
                        if (img)
                            img.src = this.get("source");
                    }
                },

                remove_on_destroy: true,

                create: function() {
                    if (this.get("theme") in Assets.imageviewerthemes) {
                        Objs.iter(Assets.imageviewerthemes[this.get("theme")], function(value, key) {
                            if (!this.isArgumentAttr(key))
                                this.set(key, value);
                        }, this);
                    }

                    if (!this.get("themecolor"))
                        this.set("themecolor", "default");

                    this.set("ie8", Info.isInternetExplorer() && Info.internetExplorerVersion() < 9);
                    this.set("firefox", Info.isFirefox());
                    this.set("message", "");
                    this.set("fullscreensupport", Dom.elementSupportsFullscreen(this.activeElement()));
                    this.set("csssize", "normal");

                    this.set("controlbar_active", this.get("fullscreensupport") || this.get("submittable") || this.get("rerecordable"));
                    this.set("message_active", false);

                    this.set("last_activity", Time.now());
                    this.set("activity_delta", 0);

                    this.__currentStretch = null;
                    this.__imageViewer = {};

                    // Set initial options for further help actions
                    this.set("initialoptions", {
                        hideoninactivity: this.get("hideoninactivity")
                    });
                    this.activeElement().onkeydown = this._keyDownActivity.bind(this, this.activeElement());

                    this.on("change:stretch", function() {
                        this._updateStretch();
                    }, this);

                    this._timer = new Timers.Timer({
                        context: this,
                        fire: this._timerFire,
                        delay: 100,
                        start: true
                    });
                },

                _keyDownActivity: function(element, ev) {
                    var _keyCode = ev.which || ev.keyCode;
                    // Prevent whitespace browser center scroll and arrow buttons behaviours
                    if (_keyCode === 32 || _keyCode === 37 || _keyCode === 38 || _keyCode === 39 || _keyCode === 40) ev.preventDefault();

                    if (_keyCode === 32 || _keyCode === 13 || _keyCode === 9) {
                        this._resetActivity();
                        if (this.get("fullscreened") && this.get("hideoninactivity")) this.set("hideoninactivity", false);
                    }

                    if (_keyCode === 9 && ev.shiftKey) {
                        this._resetActivity();
                        this._findNextTabStop(element, ev, function(target, index) {
                            target.focus();
                        }, -1);
                    } else if (_keyCode === 9) {
                        this._resetActivity();
                        this._findNextTabStop(element, ev, function(target, index) {
                            target.focus();
                        });
                    }
                },

                _findNextTabStop: function(parentElement, ev, callback, direction) {
                    var _currentIndex, _direction, _tabIndexes, _tabIndexesArray, _maxIndex, _minIndex, _looked, _tabIndex, _delta, _element, _imagePlayersCount;
                    _maxIndex = _minIndex = 0;
                    _direction = direction || 1;
                    _element = ev.target;
                    _currentIndex = _element.tabIndex;
                    _tabIndexes = parentElement.querySelectorAll('[tabindex]');
                    _tabIndexesArray = Array.prototype.slice.call(_tabIndexes, 0);
                    _tabIndexes = _tabIndexesArray
                        .filter(function(element) {
                            if ((element.clientWidth > 0 || element.clientHeight > 0) && (element.tabIndex !== -1)) {
                                if (_maxIndex <= element.tabIndex) _maxIndex = element.tabIndex;
                                if (_minIndex >= element.tabIndex) _minIndex = element.tabIndex;
                                return true;
                            } else return false;
                        });

                    if ((_direction === 1 && _currentIndex === _maxIndex) || (direction === -1 && _currentIndex === _minIndex) || _maxIndex === 0) {
                        _imagePlayersCount = document.querySelectorAll('ba-imageviewer').length;
                        if (_imagePlayersCount > 1) {
                            parentElement.tabIndex = -1;
                            parentElement.blur();
                        }
                        return;
                    }

                    for (var i = 0; i < _tabIndexes.length; i++) {
                        if (!_tabIndexes[i])
                            continue;
                        _tabIndex = _tabIndexes[i].tabIndex;
                        _delta = _tabIndex - _currentIndex;
                        if (_tabIndex < _minIndex || _tabIndex > _maxIndex || Math.sign(_delta) !== _direction)
                            continue;

                        if (!_looked || Math.abs(_delta) < Math.abs(_looked.tabIndex - _currentIndex))
                            _looked = _tabIndexes[i];
                    }

                    if (_looked) {
                        ev.preventDefault();
                        callback(_looked, _looked.tabIndex);
                    }
                },

                _afterActivate: function(element) {
                    inherited._afterActivate.call(this, element);
                    this.image().src = this.get("source");
                },

                _resetActivity: function() {
                    this.set("last_activity", Time.now());
                    this.set("activity_delta", 0);
                },

                object_functions: ["rerecord"],

                functions: {

                    user_activity: function(strong) {
                        this.set("last_activity", Time.now());
                        this.set("activity_delta", 0);
                    },

                    message_click: function() {
                        this.trigger("message:click");
                    },

                    rerecord: function() {
                        if (!this.get("rerecordable"))
                            return;
                        this.trigger("rerecord");
                    },

                    toggle_fullscreen: function() {
                        if (this.get("fullscreened") && this.__imageViewer.imageWrapper) {
                            this._close_image();
                        } else {
                            this._open_image();
                        }
                    },

                    submit: function() {
                        if (!this.get("submittable"))
                            return;
                        this.trigger("submit");
                        this.set("submittable", false);
                        this.set("rerecordable", false);
                    },

                    tab_index_move: function(ev, nextSelector, focusingSelector) {
                        var _targetElement, _activeElement, _selector, _keyCode;
                        _keyCode = ev.which || ev.keyCode;
                        _activeElement = this.activeElement();
                        if (_keyCode === 13 || _keyCode === 32) {
                            if (focusingSelector) {
                                _selector = "[data-selector='" + focusingSelector + "']";
                                _targetElement = _activeElement.querySelector(_selector);
                                if (_targetElement)
                                    Async.eventually(function() {
                                        this.trigger("keyboardusecase", _activeElement);
                                        _targetElement.focus({
                                            preventScroll: false
                                        });
                                    }, this, 100);
                            } else {
                                _selector = '[data-image="image"]';
                                _targetElement = _activeElement.querySelector(_selector);
                                Async.eventually(function() {
                                    this.trigger("keyboardusecase", _activeElement);
                                    _targetElement.focus({
                                        preventScroll: true
                                    });
                                }, this, 100);
                            }
                        } else if (_keyCode === 9 && nextSelector) {
                            _selector = "[data-selector='" + nextSelector + "']";
                            _targetElement = _activeElement.querySelector(_selector);
                            if (_targetElement)
                                Async.eventually(function() {
                                    this.trigger("keyboardusecase", _activeElement);
                                    _targetElement.focus({
                                        preventScroll: false
                                    });
                                }, this, 100);

                        }
                    }
                },

                destroy: function() {
                    this._timer.destroy();
                    this.host.destroy();
                    inherited.destroy.call(this);
                },

                _open_image: function(sourceFile) {
                    this.__imageViewer.counter = 0;
                    // Main container
                    this.__imageViewer.imageViewer = document.createElement('div');

                    // Wrapper
                    this.__imageViewer.imageWrapper = document.createElement('div');
                    this.__imageViewer.imageWrapper.className = this.get('css') + '-image-viewer-wrapper';

                    // image viewer overlay
                    this.__imageViewer.overlayElement = document.createElement('div');
                    this.__imageViewer.overlayElement.className = this.get('css') + '-image-viewer-overlay';

                    this.__imageViewer.image = document.createElement('img');
                    this.__imageViewer.image.className = this.get('css') + '-image-viewer-expanded';
                    this.__imageViewer.image.src = sourceFile || this.get('source');

                    // Will show caption in the middle bottom side
                    if (this.get("customcaptionvisible")) {
                        var _titleText;
                        this.__imageViewer.title = document.createElement('div');
                        this.__imageViewer.title.className = this.get('css') + '-image-viewer-title';
                        _titleText = document.createTextNode(this.get('title'));
                        this.__imageViewer.title.appendChild(_titleText);
                    }

                    // Show close button on the top right corner
                    if (this.get("closebuttonvisible")) {
                        this.__imageViewer.closeButton = document.createElement('div');
                        this.__imageViewer.closeButton.className = this.get('css') + '-close-button';
                        this.__imageViewer.closeButton.tabIndex = 0;

                        // Listen event on close button
                        this.__imageViewer.clickEvent = this.auto_destroy(new DomEvents());
                        this.__imageViewer.clickEvent.on(this.__imageViewer.closeButton, "click", function() {
                            this._close_image();
                        }, this);
                        this.__imageViewer.clickEvent.on(this.__imageViewer.closeButton, "keydown", function() {
                            this._close_image();
                        }, this);
                    }


                    // Show title on the image, if require could be added as a future


                    this.__imageViewer.bodyOverlay = document.querySelector('ba-imageviewer');

                    this.__imageViewer.imageViewer.appendChild(this.__imageViewer.overlayElement);
                    this.__imageViewer.imageViewer.appendChild(this.__imageViewer.image);

                    if (this.get("customcaptionvisible"))
                        this.__imageViewer.imageViewer.appendChild(this.__imageViewer.title);
                    if (this.get("closebuttonvisible"))
                        this.__imageViewer.imageViewer.appendChild(this.__imageViewer.closeButton);

                    // Append child
                    this.__imageViewer.bodyOverlay.parentNode.insertBefore(this.__imageViewer.imageWrapper, this.__imageViewer.bodyOverlay);

                    this.__imageViewer.imageViewer.style.opacity = 0;
                    this.__imageViewer.imageWrapper.appendChild(this.__imageViewer.imageViewer);

                    // Start fadIn process
                    this.__imageViewer.fadeInCounter = new Timers.Timer({
                        context: this,
                        fire: this.__fadeIn,
                        delay: 40,
                        start: true
                    });

                    this.set("hideoninactivity", false);
                    this.set("fullscreened", true);
                },

                _close_image: function() {
                    this.set("fullscreened", false);
                    this.set("hideoninactivity", this.get("initialoptions").hideoninactivity);
                    this.__imageViewer.fadeInCounter = new Timers.Timer({
                        context: this,
                        fire: this.__fadeOut,
                        delay: 20,
                        start: true
                    });
                },

                __fadeIn: function() {
                    if (!this.__imageViewer.fadeInCounter) return;
                    if (this.__imageViewer.fadeInCounter.destroyed()) return;
                    if (this.__imageViewer.counter < 1.05) {
                        this.__imageViewer.imageViewer.style.opacity = this.__imageViewer.counter;
                        this.__imageViewer.counter += 0.05;
                    } else {
                        this.__imageViewer.imageViewer.opacity = 1.00;
                        this.__imageViewer.fadeInCounter.stop();
                    }
                },

                __fadeOut: function() {
                    if (!this.__imageViewer.fadeInCounter) return;
                    if (this.__imageViewer.fadeInCounter.destroyed()) return;
                    if (this.__imageViewer.counter > 0) {
                        this.__imageViewer.imageViewer.style.opacity = this.__imageViewer.counter;
                        this.__imageViewer.counter -= 0.05;
                    } else {
                        this.__imageViewer.fadeInCounter.stop();
                        this.__imageViewer.bodyOverlay.parentNode.removeChild(this.__imageViewer.imageWrapper);
                    }
                },

                _timerFire: function() {
                    if (this.destroyed())
                        return;
                    try {
                        this.set("activity_delta", Time.now() - this.get("last_activity"));
                    } catch (e) {}
                    try {
                        this._updateStretch();
                    } catch (e) {}
                    try {
                        this._updateCSSSize();
                    } catch (e) {}
                },

                _updateCSSSize: function() {
                    var width = Dom.elementDimensions(this.activeElement()).width;
                    this.set("csssize", width > 400 ? "normal" : (width > 300 ? "medium" : "small"));
                },

                image: function() {
                    return this.activeElement().querySelector("img");
                },

                imageHeight: function() {
                    return this.image().height;
                },

                imageWidth: function() {
                    return this.image().width;
                },

                aspectRatio: function() {
                    return this.imageWidth() / this.imageHeight();
                },

                parentWidth: function() {
                    return Dom.elementDimensions(this.activeElement().parentElement).width;
                },

                parentHeight: function() {
                    return Dom.elementDimensions(this.activeElement().parentElement).height;
                },

                parentAspectRatio: function() {
                    return this.parentWidth() / this.parentHeight();
                },

                _updateStretch: function() {
                    var newStretch = null;
                    if (this.get("stretch")) {
                        var ar = this.aspectRatio();
                        if (isFinite(ar)) {
                            var par = this.parentAspectRatio();
                            if (isFinite(par)) {
                                if (par > ar)
                                    newStretch = "height";
                                if (par < ar)
                                    newStretch = "width";
                            } else if (par === Infinity)
                                newStretch = "height";
                        }
                    }
                    if (this.__currentStretch !== newStretch) {
                        if (this.__currentStretch)
                            Dom.elementRemoveClass(this.activeElement(), this.get("css") + "-stretch-" + this.__currentStretch);
                        if (newStretch)
                            Dom.elementAddClass(this.activeElement(), this.get("css") + "-stretch-" + newStretch);
                    }
                    this.__currentStretch = newStretch;
                },

                cloneAttrs: function() {
                    return Objs.map(this.attrs, function(value, key) {
                        return this.get(key);
                    }, this);
                },

                popupAttrs: function() {
                    return {
                        popup: false,
                        width: this.get("popup-width"),
                        height: this.get("popup-height"),
                        stretch: this.get("popup-stretch")
                    };
                }

            };
        }, {

        }).register("ba-imageviewer")
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "csssize": function (obj) { with (obj) { return csssize; } }, "iecss": function (obj) { with (obj) { return iecss; } }, "ie8 ? 'ie8' : 'noie8'": function (obj) { with (obj) { return ie8 ? 'ie8' : 'noie8'; } }, "csstheme": function (obj) { with (obj) { return csstheme; } }, "fullscreened ? 'fullscreen' : 'normal'": function (obj) { with (obj) { return fullscreened ? 'fullscreen' : 'normal'; } }, "firefox ? 'firefox' : 'common'": function (obj) { with (obj) { return firefox ? 'firefox' : 'common'; } }, "themecolor": function (obj) { with (obj) { return themecolor; } }, "user_activity()": function (obj) { with (obj) { return user_activity(); } }, "user_activity(true)": function (obj) { with (obj) { return user_activity(true); } }, "widthHeightStyles": function (obj) { with (obj) { return widthHeightStyles; } }, "dyncontrolbar": function (obj) { with (obj) { return dyncontrolbar; } }, "csscontrolbar || css": function (obj) { with (obj) { return csscontrolbar || css; } }, "csscommon || css": function (obj) { with (obj) { return csscommon || css; } }, "tmplcontrolbar": function (obj) { with (obj) { return tmplcontrolbar; } }, "controlbar_active": function (obj) { with (obj) { return controlbar_active; } }, "tabindex": function (obj) { with (obj) { return tabindex; } }, "title": function (obj) { with (obj) { return title; } }, "activity_delta": function (obj) { with (obj) { return activity_delta; } }, "hideoninactivity": function (obj) { with (obj) { return hideoninactivity; } }, "rerecordable": function (obj) { with (obj) { return rerecordable; } }, "submittable": function (obj) { with (obj) { return submittable; } }, "fullscreensupport && !nofullscreen": function (obj) { with (obj) { return fullscreensupport && !nofullscreen; } }, "fullscreened": function (obj) { with (obj) { return fullscreened; } }, "source": function (obj) { with (obj) { return source; } }, "dynmessage": function (obj) { with (obj) { return dynmessage; } }, "cssmessage || css": function (obj) { with (obj) { return cssmessage || css; } }, "tmplmessage": function (obj) { with (obj) { return tmplmessage; } }, "message_active": function (obj) { with (obj) { return message_active; } }, "message": function (obj) { with (obj) { return message; } }, "dyntopmessage": function (obj) { with (obj) { return dyntopmessage; } }, "csstopmessage || css": function (obj) { with (obj) { return csstopmessage || css; } }, "tmpltopmessage": function (obj) { with (obj) { return tmpltopmessage; } }, "topmessage": function (obj) { with (obj) { return topmessage; } }, "poster": function (obj) { with (obj) { return poster; } }/**/ })
        .attachStringTable(Assets.strings)
        .addStrings({
            "image-error": "An error occurred, please try again later. Click to retry."
        });
});
Scoped.define("module:ImageCapture.Dynamics.Recorder", [
    "dynamics:Dynamic",
    "module:Assets",
    "browser:Info",
    "browser:Dom",
    "browser:Upload.MultiUploader",
    "browser:Upload.FileUploader",
    "media:ImageRecorder.ImageRecorderWrapper",
    "base:Types",
    "base:Objs",
    "base:Strings",
    "base:Time",
    "base:Timers",
    "base:States.Host",
    "base:Classes.ClassRegistry",
    "base:Collections.Collection",
    "base:Promise",
    "module:ImageCapture.Dynamics.RecorderStates.Initial",
    "module:ImageCapture.Dynamics.RecorderStates"
], [
    "module:ImageCapture.Dynamics.Loader",
    "module:ImageCapture.Dynamics.Controlbar",
    "module:ImageCapture.Dynamics.Message",
    "module:ImageCapture.Dynamics.Topmessage",
    "module:ImageCapture.Dynamics.Chooser",
    "module:ImageCapture.Dynamics.Faceoutline",
    "dynamics:Partials.ShowPartial",
    "dynamics:Partials.IfPartial",
    "dynamics:Partials.EventPartial",
    "dynamics:Partials.OnPartial",
    "dynamics:Partials.DataPartial",
    "dynamics:Partials.AttrsPartial",
    "dynamics:Partials.StylesPartial",
    "dynamics:Partials.TemplatePartial",
    "dynamics:Partials.HotkeyPartial"
], function(Class, Assets, Info, Dom, MultiUploader, FileUploader, ImageRecorderWrapper, Types, Objs, Strings, Time, Timers, Host, ClassRegistry, Collection, Promise, InitialState, RecorderStates, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div data-selector=\"capture-container\" ba-show=\"{{!player_active}}\"\n     class=\"{{css}}-container {{css}}-size-{{csssize}} {{iecss}}-{{ie8 ? 'ie8' : 'noie8'}} {{csstheme}}\n     \t{{css}}-{{ fullscreened ? 'fullscreen' : 'normal' }}-view {{css}}-{{ firefox ? 'firefox' : 'common'}}-browser\n    \t{{css}}-{{themecolor}}-color\"\n     ba-styles=\"{{widthHeightStyles}}\"\n>\n\n    <img tabindex=\"-1\" data-selector=\"recorder-status\" class=\"{{css}}-video {{css}}-{{hasrecorder ? 'hasrecorder' : 'norecorder'}}\" data-image=\"image\" />\n\t<ba-imagecapture-faceoutline class=\"{{css}}-overlay\" ba-if=\"{{faceoutline && hasrecorder}}\">\n\t</ba-imagecapture-faceoutline>\n    <div data-selector=\"recorder-overlay\" class='{{css}}-overlay' ba-show=\"{{!hideoverlay}}\" data-overlay=\"overlay\">\n\t\t<ba-{{dynloader}}\n\t\t    ba-css=\"{{cssloader || css}}\"\n\t\t\tba-themecolor=\"{{themecolor}}\"\n\t\t    ba-template=\"{{tmplloader}}\"\n\t\t    ba-show=\"{{loader_active}}\"\n\t\t    ba-tooltip=\"{{loadertooltip}}\"\n\t\t\tba-hovermessage=\"{{=hovermessage}}\"\n\t\t    ba-label=\"{{loaderlabel}}\"\n\t\t></ba-{{dynloader}}>\n\n\t\t<ba-{{dynmessage}}\n\t\t    ba-css=\"{{cssmessage || css}}\"\n\t\t\tba-themecolor=\"{{themecolor}}\"\n\t\t    ba-template=\"{{tmplmessage}}\"\n\t\t    ba-show=\"{{message_active}}\"\n\t\t    ba-message=\"{{message}}\"\n\t\t\tba-links=\"{{message_links}}\"\n\t\t    ba-event:click=\"message_click\"\n\t\t\tba-event:link=\"message_link_click\"\n\t\t></ba-{{dynmessage}}>\n\n\t\t<ba-{{dyntopmessage}}\n\t\t    ba-css=\"{{csstopmessage || css}}\"\n\t\t\tba-themecolor=\"{{themecolor}}\"\n\t\t    ba-template=\"{{tmpltopmessage}}\"\n\t\t    ba-show=\"{{topmessage_active && (topmessage || hovermessage)}}\"\n\t\t    ba-topmessage=\"{{hovermessage || topmessage}}\"\n\t\t></ba-{{dyntopmessage}}>\n\n\t\t<ba-{{dynchooser}}\n\t\t\tba-recordviafilecapture=\"{{recordviafilecapture}}\"\n\t\t    ba-css=\"{{csschooser || css}}\"\n\t\t\tba-themecolor=\"{{themecolor}}\"\n\t\t    ba-template=\"{{tmplchooser}}\"\n\t\t    ba-if=\"{{chooser_active && !is_initial_state}}\"\n\t\t    ba-allowrecord=\"{{allowrecord}}\"\n\t\t    ba-allowupload=\"{{allowupload}}\"\n\t\t    ba-allowcustomupload=\"{{allowcustomupload}}\"\n\t\t    ba-allowedextensions=\"{{allowedextensions}}\"\n\t\t    ba-primaryrecord=\"{{primaryrecord}}\"\n\t\t    ba-event:record=\"capture_image\"\n\t\t    ba-event:upload=\"upload_image\"\n\t\t></ba-{{dynchooser}}>\n\n\t\t<ba-{{dyncontrolbar}}\n\t\t    ba-css=\"{{csscontrolbar || css}}\"\n\t\t\tba-themecolor=\"{{themecolor}}\"\n\t\t    ba-template=\"{{tmplcontrolbar}}\"\n\t\t    ba-show=\"{{controlbar_active}}\"\n\t\t    ba-cameras=\"{{cameras}}\"\n\t\t    ba-selectedcamera=\"{{selectedcamera || 0}}\"\n\t\t    ba-camerahealthy=\"{{camerahealthy}}\"\n\t\t    ba-hovermessage=\"{{=hovermessage}}\"\n\t\t    ba-settingsvisible=\"{{settingsvisible}}\"\n\t\t    ba-recordvisible=\"{{recordvisible}}\"\n\t\t\tba-cancelvisible=\"{{allowcancel && cancancel}}\"\n\t\t    ba-rerecordvisible=\"{{rerecordvisible}}\"\n\t\t    ba-controlbarlabel=\"{{controlbarlabel}}\"\n\t\t    ba-event:select-camera=\"select_camera\"\n\t\t    ba-event:invoke-record=\"record\"\n\t\t    ba-event:invoke-rerecord=\"rerecord\"\n\t\t></ba-{{dyncontrolbar}}>\n    </div>\n</div>\n\n<div data-selector=\"recorder-player\" ba-if=\"{{player_active}}\" ba-styles=\"{{widthHeightStyles}}\">\n\t<span ba-show=\"{{ie8}}\">&nbsp;</span>\n\t<ba-{{dynimageviewer}}\n\t    ba-theme=\"{{theme || 'default'}}\"\n        ba-themecolor=\"{{themecolor}}\"\n        ba-source=\"{{playbacksource}}\"\n        ba-hideoninactivity=\"{{false}}\"\n        ba-stretch=\"{{stretch}}\"\n        ba-attrs=\"{{playerattrs}}\"\n        ba-data:id=\"player\"\n        ba-width=\"{{width}}\"\n        ba-height=\"{{height}}\"\n        ba-rerecordable=\"{{rerecordable && (recordings === null || recordings > 0)}}\"\n        ba-submittable=\"{{manualsubmit && verified}}\"\n        ba-nofullscreen=\"{{nofullscreen}}\"\n        ba-event:rerecord=\"rerecord\"\n        ba-event:submit=\"manual_submit\"\n\t>\n\t</ba-{{dynimageviewer}}>\n</div>\n",

                attrs: {
                    /* CSS */
                    "css": "ba-imagecapture",
                    "csscommon": "ba-commoncss",
                    "iecss": "ba-imagecapture",
                    "cssimagegallery": "",
                    "cssloader": "",
                    "csscontrolbar": "",
                    "cssmessage": "",
                    "csstopmessage": "",
                    "csschooser": "",
                    "width": "",
                    "height": "",
                    "gallerysnapshots": 3,

                    /* Themes */
                    "theme": "",
                    "csstheme": "",

                    /* Dynamics */
                    "dynloader": "imagecapture-loader",
                    "dyncontrolbar": "imagecapture-controlbar",
                    "dynmessage": "imagecapture-message",
                    "dyntopmessage": "imagecapture-topmessage",
                    "dynchooser": "imagecapture-chooser",
                    "dynimageviewer": "imageviewer",

                    /* Templates */
                    "tmplloader": "",
                    "tmplcontrolbar": "",
                    "tmplmessage": "",
                    "tmpltopmessage": "",
                    "tmplchooser": "",

                    /* Attributes */
                    "autorecord": false,
                    "allowrecord": true,
                    "allowupload": true,
                    "allowcustomupload": true,
                    "camerafacefront": false,
                    "primaryrecord": true,
                    "nofullscreen": false,
                    "recordingwidth": undefined,
                    "recordingheight": undefined,
                    "minuploadingwidth": undefined,
                    "maxuploadingwidth": undefined,
                    "minuploadingheight": undefined,
                    "maxuploadingheight": undefined,
                    "countdown": 3,
                    "webrtconmobile": "boolean",
                    "snapshottype": "jpg",
                    "playbacksource": "",
                    "recordermode": true,
                    "skipinitial": false,
                    "skipinitialonrerecord": false,
                    "flip-camera": false,
                    "early-rerecord": false,
                    "manualsubmit": false,
                    "allowedextensions": null,
                    "filesizelimit": null,
                    "faceoutline": false,

                    /* Configuration */
                    "forceflash": false,
                    "simulate": false,
                    "noflash": false,
                    "flashincognitosupport": false,
                    "localplayback": false,
                    "uploadoptions": {},
                    "playerattrs": {},
                    "shortMessage": true,

                    /* Options */
                    "rerecordable": true,
                    "recordings": null,
                    "ready": true,
                    "orientation": false,
                    "stretch": false

                },

                computed: {
                    "nativeRecordingWidth:recordingwidth,record_media": function() {
                        return this.get("recordingwidth") || (this.get("record_media") !== "screen" ? 640 : (window.innerWidth || document.body.clientWidth));
                    },
                    "nativeRecordingHeight:recordingheight,record_media": function() {
                        return this.get("recordingheight") || (this.get("record_media") !== "screen" ? 480 : (window.innerHeight || document.body.clientHeight));
                    },
                    "widthHeightStyles:width,height": function() {
                        var result = {};
                        var width = this.get("width");
                        var height = this.get("height");
                        if (width)
                            result.width = width + ((width + '').match(/^\d+$/g) ? 'px' : '');
                        if (height)
                            result.height = height + ((height + '').match(/^\d+$/g) ? 'px' : '');
                        return result;
                    },
                    "canswitchcamera:recordviafilecapture": function() {
                        return !this.get("recordviafilecapture") && Info.isMobile();
                    }
                },

                scopes: {
                    player: ">[id='player']"
                },

                types: {
                    "forceflash": "boolean",
                    "noflash": "boolean",
                    "rerecordable": "boolean",
                    "ready": "boolean",
                    "stretch": "boolean",
                    "autorecord": "boolean",
                    "allowrecord": "boolean",
                    "allowupload": "boolean",
                    "allowcustomupload": "boolean",
                    "primaryrecord": "boolean",
                    "flashincognitosupport": "boolean",
                    "recordermode": "boolean",
                    "nofullscreen": "boolean",
                    "skipinitialonrerecord": "boolean",
                    "localplayback": "boolean",
                    "camerafacefront": "boolean",
                    "skipinitial": "boolean",
                    "minuploadingwidth": "int",
                    "maxuploadingwidth": "int",
                    "minuploadingheight": "int",
                    "maxuploadingheight": "int",
                    "webrtconmobile": "boolean",
                    "flip-camera": "boolean",
                    "faceoutline": "boolean",
                    "early-rerecord": "boolean",
                    "manualsubmit": "boolean",
                    "simulate": "boolean",
                    "allowedextensions": "array"
                },

                extendables: ["states"],

                remove_on_destroy: true,

                events: {
                    "change:camerahealthy": function(value) {
                        this.trigger("camerahealth", value);
                    },
                    "change:webrtconmobile": function() {
                        this.set("recordviafilecapture", Info.isMobile() && (!this.get("webrtconmobile") || !ImageRecorderWrapper.anySupport(this._imageCaptureWrapperOptions())));
                    },
                    "change:recordviafilecapture": function() {
                        if (this.get("recordviafilecapture")) {
                            this.set("skipinitial", false);
                            this.set("skipinitialonrerecord", false);
                            this.set("allowscreen", false);
                            this.set("autorecord", false);
                        }
                    }
                },

                create: function() {
                    if (this.get("theme") in Assets.recorderthemes) {
                        Objs.iter(Assets.recorderthemes[this.get("theme")], function(value, key) {
                            if (!this.isArgumentAttr(key))
                                this.set(key, value);
                        }, this);
                    }
                    this.set("ie8", Info.isInternetExplorer() && Info.internetExplorerVersion() < 9);
                    this.set("hideoverlay", false);

                    this.set("canswitchcamera", false);
                    this.set("recordviafilecapture", Info.isMobile() && (!this.get("webrtconmobile") || !ImageRecorderWrapper.anySupport(this._imageCaptureWrapperOptions())));

                    if (this.get("recordviafilecapture")) {
                        this.set("skipinitial", false);
                        this.set("skipinitialonrerecord", false);
                        this.set("autorecord", false);
                    }

                    this.__attachRequested = false;
                    this.__activated = false;
                    this._bound = false;
                    this.__recording = false;
                    this.__error = null;
                    this.__currentStretch = null;

                    this.on("change:stretch", function() {
                        this._updateStretch();
                    }, this);
                    this.host = new Host({
                        stateRegistry: new ClassRegistry(this.cls.recorderStates())
                    });
                    this.host.dynamic = this;
                    this.host.initialize(InitialState);

                    this._timer = new Timers.Timer({
                        context: this,
                        fire: this._timerFire,
                        delay: 250,
                        start: true
                    });

                    this.__cameraResponsive = true;
                    this.__cameraSignal = true;

                    if (!Info.isMobile())
                        this.set("orientation", false);
                    this.set("currentorientation", window.innerHeight > window.innerWidth ? "portrait" : "landscape");
                },

                state: function() {
                    return this.host.state();
                },

                recorderAttached: function() {
                    return !!this.recorder;
                },

                imageError: function() {
                    return this.__error;
                },

                _error: function(error_type, error_code) {
                    this.__error = {
                        error_type: error_type,
                        error_code: error_code
                    };
                    this.trigger("error:" + error_type, error_code);
                    this.trigger("error", error_type, error_code);
                },

                _clearError: function() {
                    this.__error = null;
                },

                _detachRecorder: function() {
                    if (this.recorder)
                        this.recorder.weakDestroy();
                    this.recorder = null;
                    this.set("hasrecorder", false);
                },

                _imageCaptureWrapperOptions: function() {
                    return {
                        simulate: this.get("simulate"),
                        forceflash: this.get("forceflash"),
                        noflash: this.get("noflash"),
                        flashFullSecurityDialog: !this.get("flashincognitosupport"),
                        // webrtcOnMobile: !!this.get("webrtconmobile"),
                        localPlaybackRequested: this.get("localplayback"),
                        flip: this.get("flip-camera")
                    };
                },

                _attachRecorder: function() {
                    if (this.recorderAttached())
                        return;
                    if (!this.__activated) {
                        this.__attachRequested = true;
                        return;
                    }
                    this.set("hasrecorder", true);
                    this.__attachRequested = false;
                    var image = this.activeElement().querySelector("[data-image='image']");
                    this._clearError();
                    this.recorder = ImageRecorderWrapper.create(Objs.extend({
                        element: image
                    }, this._imageCaptureWrapperOptions()));
                    if (this.recorder)
                        this.trigger("attached");
                    else
                        this._error("attach");
                },

                _softwareDependencies: function() {
                    if (!this.recorderAttached() || !this.recorder)
                        return Promise.error("No recorder attached.");
                    return this.recorder.softwareDependencies();
                },

                _bindMedia: function() {
                    if (this._bound || !this.recorderAttached() || !this.recorder)
                        return;
                    this.recorder.ready.success(function() {
                        this.recorder.on("require_display", function() {
                            this.set("hideoverlay", true);
                        }, this);
                        this.recorder.bindMedia().error(function(e) {
                            this.trigger("access_forbidden", e);
                            this.set("hideoverlay", false);
                            this.off("require_display", null, this);
                            this._error("bind", e);
                        }, this).success(function() {
                            this.trigger("access_granted");
                            this.set("hideoverlay", false);
                            this.off("require_display", null, this);
                            this.recorder.enumerateDevices().success(function(devices) {
                                var selected = this.recorder.currentDevices();
                                this.set("selectedcamera", selected.video);
                                this.set("cameras", new Collection(Objs.values(devices.video)));
                            }, this);
                            this.set("devicetesting", true);
                            this._updateStretch();
                            this._bound = true;
                            this.trigger("bound");
                        }, this);
                    }, this);
                },

                isFlash: function() {
                    return this.recorder && this.recorder.isFlash();
                },

                _initializeUploader: function() {
                    if (this._dataUploader)
                        this._dataUploader.weakDestroy();
                    this._dataUploader = new MultiUploader();
                },

                _unbindMedia: function() {
                    if (!this._bound)
                        return;
                    this.recorder.unbindMedia();
                    this._bound = false;
                },

                _uploadImageFile: function(file) {
                    if (this.get("simulate"))
                        return;
                    var uploader = FileUploader.create(Objs.extend({
                        source: file
                    }, this.get("uploadoptions").image));
                    uploader.upload();
                    this._dataUploader.addUploader(uploader);
                },

                _prepareRecording: function() {
                    return Promise.create(true);
                },

                _captureImage: function() {
                    this._snapshot = this.recorder.createSnapshot(this.get("snapshottype"));
                },

                _uploadCapture: function() {
                    if (this.get("simulate"))
                        return;
                    var uploader = this.recorder.createSnapshotUploader(this._snapshot, this.get("snapshottype"), this.get("uploadoptions").image);
                    uploader.upload();
                    this._dataUploader.addUploader(uploader);
                },


                _verifyRecording: function() {
                    return Promise.create(true);
                },

                _afterActivate: function(element) {
                    inherited._afterActivate.call(this, element);
                    this.__activated = true;
                    if (this.__attachRequested)
                        this._attachRecorder();
                },

                object_functions: ["record", "rerecord", "reset"],

                functions: {

                    record: function() {
                        this.host.state().record();
                    },

                    record_image: function() {
                        this.host.state().selectRecord();
                    },

                    upload_image: function(file) {
                        this.host.state().selectUpload(file);
                    },

                    select_camera: function(camera_id) {
                        if (this.recorder) {
                            this.recorder.setCurrentDevices({
                                video: camera_id
                            });
                            this.set("selectedcamera", camera_id);
                        }
                    },

                    select_camera_face: function(faceFront) {
                        if (this.recorder) {
                            this.recorder.setCameraFace(faceFront);
                            this.set("camerafacefront", faceFront);
                        }
                    },

                    rerecord: function() {
                        if (confirm(this.stringUnicode("rerecord-confirm")))
                            this.host.state().rerecord();
                    },

                    message_click: function() {
                        this.trigger("message-click");
                    },

                    message_link_click: function(link) {
                        this.trigger("message-link-click", link);
                    },

                    reset: function() {
                        this._stopRecording().callback(function() {
                            this._unbindMedia();
                            this._detachRecorder();
                            this.host.state().next("Initial");
                        }, this);
                    },

                    manual_submit: function() {
                        this.set("rerecordable", false);
                        this.set("manualsubmit", false);
                        this.trigger("manually_submitted");
                    },

                    ready_to_play: function() {
                        this.trigger("ready_to_play");
                    }

                },

                destroy: function() {
                    this._timer.destroy();
                    this.host.destroy();
                    this._detachRecorder();
                    inherited.destroy.call(this);
                },

                deltaCoefficient: function() {
                    return this.recorderAttached() ? this.recorder.deltaCoefficient() : null;
                },

                blankLevel: function() {
                    return this.recorderAttached() ? this.recorder.blankLevel() : null;
                },

                lightLevel: function() {
                    return this.recorderAttached() ? this.recorder.lightLevel() : null;
                },

                _timerFire: function() {
                    if (this.destroyed())
                        return;
                    this.set("currentorientation", window.innerHeight > window.innerWidth ? "portrait" : "landscape");
                    try {
                        if (this.recorderAttached() && this.get("devicetesting")) {
                            var lightLevel = this.lightLevel();
                            this.set("camerahealthy", lightLevel >= 100 && lightLevel <= 200);
                        }
                    } catch (e) {}

                    try {
                        if (this.recorderAttached() && this._timer.fire_count() % 20 === 0 && this._accessing_camera) {
                            var signal = this.blankLevel() >= 0.01;
                            if (signal !== this.__cameraSignal) {
                                this.__cameraSignal = signal;
                                this.trigger(signal ? "camera_signal" : "camera_nosignal");
                            }
                        }
                        if (this.recorderAttached() && this._timer.fire_count() % 20 === 10 && this._accessing_camera) {
                            var delta = this.recorder.deltaCoefficient();
                            var responsive = delta === null || delta >= 0.5;
                            if (responsive !== this.__cameraResponsive) {
                                this.__cameraResponsive = responsive;
                                this.trigger(responsive ? "camera_responsive" : "camera_unresponsive");
                            }
                        }
                    } catch (e) {}

                    this._updateStretch();
                    this._updateCSSSize();
                },

                _updateCSSSize: function() {
                    var width = Dom.elementDimensions(this.activeElement()).width;
                    this.set("csssize", width > 400 ? "normal" : (width > 300 ? "medium" : "small"));
                },

                imageHeight: function() {
                    return this.recorderAttached() ? this.recorder.cameraHeight() : NaN;
                },

                imageWidth: function() {
                    return this.recorderAttached() ? this.recorder.cameraWidth() : NaN;
                },

                aspectRatio: function() {
                    return this.imageWidth() / this.imageHeight();
                },

                parentWidth: function() {
                    return this.get("width") || Dom.elementDimensions(this.activeElement()).width;
                },

                parentHeight: function() {
                    return this.get("height") || Dom.elementDimensions(this.activeElement()).height;
                },

                parentAspectRatio: function() {
                    return this.parentWidth() / this.parentHeight();
                },

                _updateStretch: function() {
                    var newStretch = null;
                    if (this.get("stretch")) {
                        var ar = this.aspectRatio();
                        if (isFinite(ar)) {
                            var par = this.parentAspectRatio();
                            if (isFinite(par)) {
                                if (par > ar)
                                    newStretch = "height";
                                if (par < ar)
                                    newStretch = "width";
                            } else if (par === Infinity)
                                newStretch = "height";
                        }
                    }
                    if (this.__currentStretch !== newStretch) {
                        if (this.__currentStretch)
                            Dom.elementRemoveClass(this.activeElement(), this.get("css") + "-stretch-" + this.__currentStretch);
                        if (newStretch)
                            Dom.elementAddClass(this.activeElement(), this.get("css") + "-stretch-" + newStretch);
                    }
                    this.__currentStretch = newStretch;
                }

            };
        }, {

            recorderStates: function() {
                return [RecorderStates];
            }

        })
        .register("ba-imagecapture")
        .registerFunctions({ /**/"!player_active": function (obj) { with (obj) { return !player_active; } }, "css": function (obj) { with (obj) { return css; } }, "csssize": function (obj) { with (obj) { return csssize; } }, "iecss": function (obj) { with (obj) { return iecss; } }, "ie8 ? 'ie8' : 'noie8'": function (obj) { with (obj) { return ie8 ? 'ie8' : 'noie8'; } }, "csstheme": function (obj) { with (obj) { return csstheme; } }, "fullscreened ? 'fullscreen' : 'normal'": function (obj) { with (obj) { return fullscreened ? 'fullscreen' : 'normal'; } }, "firefox ? 'firefox' : 'common'": function (obj) { with (obj) { return firefox ? 'firefox' : 'common'; } }, "themecolor": function (obj) { with (obj) { return themecolor; } }, "widthHeightStyles": function (obj) { with (obj) { return widthHeightStyles; } }, "hasrecorder ? 'hasrecorder' : 'norecorder'": function (obj) { with (obj) { return hasrecorder ? 'hasrecorder' : 'norecorder'; } }, "faceoutline && hasrecorder": function (obj) { with (obj) { return faceoutline && hasrecorder; } }, "!hideoverlay": function (obj) { with (obj) { return !hideoverlay; } }, "dynloader": function (obj) { with (obj) { return dynloader; } }, "cssloader || css": function (obj) { with (obj) { return cssloader || css; } }, "tmplloader": function (obj) { with (obj) { return tmplloader; } }, "loader_active": function (obj) { with (obj) { return loader_active; } }, "loadertooltip": function (obj) { with (obj) { return loadertooltip; } }, "hovermessage": function (obj) { with (obj) { return hovermessage; } }, "loaderlabel": function (obj) { with (obj) { return loaderlabel; } }, "dynmessage": function (obj) { with (obj) { return dynmessage; } }, "cssmessage || css": function (obj) { with (obj) { return cssmessage || css; } }, "tmplmessage": function (obj) { with (obj) { return tmplmessage; } }, "message_active": function (obj) { with (obj) { return message_active; } }, "message": function (obj) { with (obj) { return message; } }, "message_links": function (obj) { with (obj) { return message_links; } }, "dyntopmessage": function (obj) { with (obj) { return dyntopmessage; } }, "csstopmessage || css": function (obj) { with (obj) { return csstopmessage || css; } }, "tmpltopmessage": function (obj) { with (obj) { return tmpltopmessage; } }, "topmessage_active && (topmessage || hovermessage)": function (obj) { with (obj) { return topmessage_active && (topmessage || hovermessage); } }, "hovermessage || topmessage": function (obj) { with (obj) { return hovermessage || topmessage; } }, "dynchooser": function (obj) { with (obj) { return dynchooser; } }, "recordviafilecapture": function (obj) { with (obj) { return recordviafilecapture; } }, "csschooser || css": function (obj) { with (obj) { return csschooser || css; } }, "tmplchooser": function (obj) { with (obj) { return tmplchooser; } }, "chooser_active && !is_initial_state": function (obj) { with (obj) { return chooser_active && !is_initial_state; } }, "allowrecord": function (obj) { with (obj) { return allowrecord; } }, "allowupload": function (obj) { with (obj) { return allowupload; } }, "allowcustomupload": function (obj) { with (obj) { return allowcustomupload; } }, "allowedextensions": function (obj) { with (obj) { return allowedextensions; } }, "primaryrecord": function (obj) { with (obj) { return primaryrecord; } }, "dyncontrolbar": function (obj) { with (obj) { return dyncontrolbar; } }, "csscontrolbar || css": function (obj) { with (obj) { return csscontrolbar || css; } }, "tmplcontrolbar": function (obj) { with (obj) { return tmplcontrolbar; } }, "controlbar_active": function (obj) { with (obj) { return controlbar_active; } }, "cameras": function (obj) { with (obj) { return cameras; } }, "selectedcamera || 0": function (obj) { with (obj) { return selectedcamera || 0; } }, "camerahealthy": function (obj) { with (obj) { return camerahealthy; } }, "settingsvisible": function (obj) { with (obj) { return settingsvisible; } }, "recordvisible": function (obj) { with (obj) { return recordvisible; } }, "allowcancel && cancancel": function (obj) { with (obj) { return allowcancel && cancancel; } }, "rerecordvisible": function (obj) { with (obj) { return rerecordvisible; } }, "controlbarlabel": function (obj) { with (obj) { return controlbarlabel; } }, "player_active": function (obj) { with (obj) { return player_active; } }, "ie8": function (obj) { with (obj) { return ie8; } }, "dynimageviewer": function (obj) { with (obj) { return dynimageviewer; } }, "theme || 'default'": function (obj) { with (obj) { return theme || 'default'; } }, "playbacksource": function (obj) { with (obj) { return playbacksource; } }, "false": function (obj) { with (obj) { return false; } }, "stretch": function (obj) { with (obj) { return stretch; } }, "playerattrs": function (obj) { with (obj) { return playerattrs; } }, "width": function (obj) { with (obj) { return width; } }, "height": function (obj) { with (obj) { return height; } }, "rerecordable && (recordings === null || recordings > 0)": function (obj) { with (obj) { return rerecordable && (recordings === null || recordings > 0); } }, "manualsubmit && verified": function (obj) { with (obj) { return manualsubmit && verified; } }, "nofullscreen": function (obj) { with (obj) { return nofullscreen; } }/**/ })
        .attachStringTable(Assets.strings)
        .addStrings({
            "recorder-error": "An error occurred, please try again later. Click to retry.",
            "attach-error": "We could not access the media interface. Depending on the device and browser, you might need to install Flash or access the page via SSL.",
            "software-required": "Please click below to install / activate the following requirements in order to proceed.",
            "software-waiting": "Waiting for the requirements to be installed / activated. You might need to refresh the page after completion.",
            "access-forbidden": "Access to the media was forbidden. Click to retry.",
            "uploading": "Uploading",
            "uploading-failed": "Uploading failed - click here to retry.",
            "upload-error-duration": "Length of the uploaded image does not meet the requirements - click here to retry.",
            "resolution-constraint-error": "The file you've selected does not match the required resolution - click here to retry.",
            "verifying": "Verifying",
            "verifying-failed": "Verifying failed - click here to retry.",
            "rerecord-confirm": "Do you really want to retake your image?",
            "image_file_too_large": "Your image file is too large (%s) - click here to try again with a smaller image file.",
            "unsupported_image_type": "Please upload: %s - click here to retry.",
            "orientation-portrait-required": "Please rotate your device to record in portrait mode.",
            "orientation-landscape-required": "Please rotate your device to record in landscape mode."
        });
});
Scoped.define("module:ImageCapture.Dynamics.RecorderStates.State", [
    "base:States.State",
    "base:Events.ListenMixin",
    "base:Objs"
], function(State, ListenMixin, Objs, scoped) {
    return State.extend({
        scoped: scoped
    }, [ListenMixin, {

        dynamics: [],

        _start: function() {
            this.dyn = this.host.dynamic;
            Objs.iter(Objs.extend({
                "message": false,
                "chooser": false,
                "topmessage": false,
                "controlbar": false,
                "loader": false
            }, Objs.objectify(this.dynamics)), function(value, key) {
                this.dyn.set(key + "_active", value);
            }, this);
            this.dyn.set("playertopmessage", "");
            this.dyn.set("message_links", null);
            this.dyn._accessing_camera = false;
            this._started();
        },

        _started: function() {},

        record: function() {
            this.dyn.set("autorecord", true);
        },

        rerecord: function() {},

        selectRecord: function() {},

        selectUpload: function(file) {}

    }]);
});



Scoped.define("module:ImageCapture.Dynamics.RecorderStates.FatalError", [
    "module:ImageCapture.Dynamics.RecorderStates.State",
    "browser:Info",
    "base:Timers.Timer"
], function(State, Info, Timer, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["message"],
        _locals: ["message", "retry"],

        _started: function() {
            this.dyn.set("message", this._message || this.dyn.string("recorder-error"));
            this.dyn.set("shortMessage", this.dyn.get("message").length < 30);
            this.listenOn(this.dyn, "message-click", function() {
                if (this._retry)
                    this.next(this._retry);
            });
        }

    });
});


Scoped.define("module:ImageCapture.Dynamics.RecorderStates.Initial", [
    "module:ImageCapture.Dynamics.RecorderStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        _started: function() {
            this.dyn.set("is_initial_state", true);
            this.dyn.set("verified", false);
            this.dyn.set("playbacksource", null);
            this.dyn.set("player_active", false);
            this.dyn._imageFileName = null;
            this.dyn._imageFile = null;
            this.dyn._imageFilePlaybackable = false;
            this.dyn._initializeUploader();
            if (!this.dyn.get("recordermode")) {
                if (!this.dyn.get("image")) {
                    console.warn("recordermode:false requires an existing video to be present and provided.");
                    this.dyn.set("recordermode", true);
                } else
                    this.next("Player");
            } else if (this.dyn.get("autorecord") || this.dyn.get("skipinitial"))
                this.eventualNext("RequiredSoftwareCheck");
            else
                this.next("Chooser");
        },

        _end: function() {
            this.dyn.set("is_initial_state", false);
        }

    });
});


Scoped.define("module:ImageCapture.Dynamics.RecorderStates.Player", [
    "module:ImageCapture.Dynamics.RecorderStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        rerecord: function() {
            this.dyn.trigger("rerecord");
            this.dyn.set("recordermode", true);
            this.next("Initial");
        },

        _started: function() {
            this.dyn.set("player_active", true);
        },

        _end: function() {
            this.dyn.set("player_active", false);
        }

    });
});


Scoped.define("module:ImageCapture.Dynamics.RecorderStates.Chooser", [
    "module:ImageCapture.Dynamics.RecorderStates.State",
    "base:Strings",
    "browser:Info",
    "media:Player.Support"
], function(State, Strings, Info, PlayerSupport, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["chooser"],

        _started: function() {
            this.listenOn(this.dyn, "change:orientation change:currentorientation", function() {
                var orientation = this.dyn.get("orientation");
                var currentorientation = this.dyn.get("currentorientation");
                var result = orientation && orientation !== currentorientation;
                if (result)
                    this.dyn.set("message", this.dyn.string("orientation-" + orientation + "-required"));
                this.dyn.set("message_active", result);
                this.dyn.set("chooser_active", !result);
            }, this, {
                initcall: true
            });
        },

        record: function() {
            this.dyn.set("autorecord", true);
            this.selectRecord();
        },

        selectRecord: function() {
            this.dyn.set("record_media", "camera");
            this.next("RequiredSoftwareCheck");
        },

        selectUpload: function(file) {
            if (!(Info.isMobile() && Info.isAndroid() && Info.isCordova())) {
                if (this.dyn.get("allowedextensions")) {
                    var filename = (file.files[0].name || "").toLowerCase();
                    var found = false;
                    this.dyn.get("allowedextensions").forEach(function(extension) {
                        if (Strings.ends_with(filename, "." + extension.toLowerCase()))
                            found = true;
                    }, this);
                    if (!found) {
                        this.next("FatalError", {
                            message: this.dyn.string("unsupported_image_type").replace("%s", this.dyn.get("allowedextensions").join(" / ")),
                            retry: "Chooser"
                        });
                        return;
                    }
                }
                if (this.dyn.get("filesizelimit") && file.files && file.files.length > 0 && file.files[0].size && file.files[0].size > this.dyn.get("filesizelimit")) {
                    var fact = "KB";
                    var size = Math.round(file.files[0].size / 1000);
                    var limit = Math.round(this.dyn.get("filesizelimit") / 1000);
                    if (size > 999) {
                        fact = "MB";
                        size = Math.round(size / 1000);
                        limit = Math.round(limit / 1000);
                    }
                    this.next("FatalError", {
                        message: this.dyn.string("image_file_too_large").replace("%s", size + fact + " / " + limit + fact),
                        retry: "Chooser"
                    });
                    return;
                }
            }
            try {
                PlayerSupport.imageFileInfo(file.files[0]).success(function(data) {
                    if ((data.width && this.dyn.get("minuploadingwidth") && this.dyn.get("minuploadingwidth") > data.width) ||
                        (data.width && this.dyn.get("maxuploadingwidth") && this.dyn.get("maxuploadingwidth") < data.width) ||
                        (data.height && this.dyn.get("minuploadingheight") && this.dyn.get("minuploadingheight") > data.height) ||
                        (data.height && this.dyn.get("maxuploadingheight") && this.dyn.get("maxuploadingheight") < data.height)) {
                        this.next("FatalError", {
                            message: this.dyn.string("resolution-constraint-error"),
                            retry: "Chooser"
                        });
                        return;
                    }
                    this.dyn._imageFilePlaybackable = true;
                    this._uploadFile(file);
                }, this).error(function() {
                    this._uploadFile(file);
                }, this);
            } catch (e) {
                this._uploadFile(file);
            }
        },

        _uploadFile: function(file) {
            this.dyn.set("creation-type", Info.isMobile() ? "mobile" : "upload");
            try {
                this.dyn._imageFileName = file.files[0].name;
                this.dyn._imageFile = file.files[0];
            } catch (e) {}
            this.dyn._prepareRecording().success(function() {
                this.dyn.trigger("upload_selected", file);
                this.dyn._uploadImageFile(file);
                this.next("Uploading");
            }, this).error(function(s) {
                this.next("FatalError", {
                    message: s,
                    retry: "Chooser"
                });
            }, this);
        }

    });
});


Scoped.define("module:ImageCapture.Dynamics.RecorderStates.RequiredSoftwareCheck", [
    "module:ImageCapture.Dynamics.RecorderStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader"],

        _started: function() {
            this.dyn.set("settingsvisible", false);
            this.dyn.set("recordvisible", false);
            this.dyn.set("rerecordvisible", false);
            this.dyn.set("stopvisible", false);
            this.dyn.set("controlbarlabel", "");
            this.dyn.set("loaderlabel", "");
            this.listenOn(this.dyn, "error", function(s) {
                this.next("FatalError", {
                    message: this.dyn.string("attach-error"),
                    retry: "Initial"
                });
            }, this);
            this.dyn._attachRecorder();
            if (this.dyn) {
                this.dyn.on("message-link-click", function(link) {
                    link.execute();
                    this.next("RequiredSoftwareWait");
                }, this);
                this.dyn._softwareDependencies().error(function(dependencies) {
                    this.dyn.set("message_links", dependencies);
                    this.dyn.set("loader_active", false);
                    this.dyn.set("message_active", true);
                    this.dyn.set("message", this.dyn.string("software-required"));
                }, this).success(function() {
                    this.next("CameraAccess");
                }, this);
            }
        }

    });
});


Scoped.define("module:ImageCapture.Dynamics.RecorderStates.RequiredSoftwareWait", [
    "module:ImageCapture.Dynamics.RecorderStates.State",
    "base:Promise",
    "browser:Dom"
], function(State, Promise, Dom, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["message"],

        _started: function() {
            this.dyn.set("settingsvisible", false);
            this.dyn.set("recordvisible", false);
            this.dyn.set("rerecordvisible", false);
            this.dyn.set("stopvisible", false);
            this.dyn.set("controlbarlabel", "");
            this.dyn.set("loaderlabel", "");
            this.dyn.set("message", this.dyn.string("software-waiting"));
            Promise.resilience(function() {
                if (Dom.isTabHidden())
                    return Promise.error("Not ready");
                return this.dyn._softwareDependencies();
            }, this, 120, [], 1000).success(function() {
                this.next("CameraAccess");
            }, this).error(function() {
                this.next("RequiredSoftwareCheck");
            }, this);
            this.dyn.on("message-click", function() {
                this.next("RequiredSoftwareCheck");
            }, this);
        }

    });
});



Scoped.define("module:ImageCapture.Dynamics.RecorderStates.CameraAccess", [
    "module:ImageCapture.Dynamics.RecorderStates.State",
    "base:Timers.Timer"
], function(State, Timer, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader"],

        _started: function() {
            this.dyn.set("settingsvisible", true);
            this.dyn.set("recordvisible", true);
            this.dyn.set("rerecordvisible", false);
            this.dyn.set("controlbarlabel", "");
            this.dyn.set("loaderlabel", "");
            this.listenOn(this.dyn, "bound", function() {
                this.dyn.set("creation-type", this.dyn.isFlash() ? "flash" : "webrtc");
                var timer = this.auto_destroy(new Timer({
                    start: true,
                    delay: 100,
                    context: this,
                    fire: function() {
                        if (this.dyn.blankLevel() >= 0.01 && this.dyn.deltaCoefficient() >= 0.01) {
                            timer.stop();
                            this.next("CameraHasAccess");
                        }
                    }
                }));
            }, this);
            this.listenOn(this.dyn, "error", function(s) {
                this.next("FatalError", {
                    message: this.dyn.string("attach-error"),
                    retry: "Initial"
                });
            }, this);
            this.listenOn(this.dyn, "access_forbidden", function() {
                this.next("FatalError", {
                    message: this.dyn.string("access-forbidden"),
                    retry: "Initial"
                });
            }, this);
            this.dyn._bindMedia();
        }

    });
});


Scoped.define("module:ImageCapture.Dynamics.RecorderStates.CameraHasAccess", [
    "module:ImageCapture.Dynamics.RecorderStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["topmessage", "controlbar"],

        _started: function() {
            this.dyn.trigger("ready_to_record");
            this._preparePromise = null;
            if (this.dyn.get("countdown") > 0 && this.dyn.recorder && this.dyn.recorder.recordDelay(this.dyn.get("uploadoptions")) > this.dyn.get("countdown") * 1000)
                this._preparePromise = this.dyn._prepareRecording();
            this.dyn.set("hovermessage", "");
            this.dyn.set("topmessage", "");
            this.dyn.set("settingsvisible", true);
            this.dyn.set("recordvisible", true);
            this.dyn.set("rerecordvisible", false);
            this.dyn.set("stopvisible", false);
            this.dyn.set("controlbarlabel", "");
            if (this.dyn.get("autorecord"))
                this.next("RecordPrepare", {
                    preparePromise: this._preparePromise
                });
        },

        record: function() {
            if (this.dyn.get("autorecord"))
                return;
            this.next("RecordPrepare", {
                preparePromise: this._preparePromise
            });
        }

    });
});


Scoped.define("module:ImageCapture.Dynamics.RecorderStates.RecordPrepare", [
    "module:ImageCapture.Dynamics.RecorderStates.State",
    "base:Timers.Timer",
    "base:Time"
], function(State, Timer, Time, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader"],
        _locals: ["preparePromise"],

        _started: function() {
            this.dyn.set("message", "");
            this.dyn.set("loaderlabel", "");
            var startedRecording = false;
            this.dyn._accessing_camera = true;
            this._preparePromise = this._preparePromise || this.dyn._prepareRecording();
            var countdown = this.dyn.get("countdown") ? this.dyn.get("countdown") * 1000 : 0;
            var delay = this.dyn.recorder.recordDelay(this.dyn.get("uploadoptions")) || 0;
            if (countdown) {
                var displayDenominator = 1000;
                var silentTime = 0;
                var startTime = Time.now();
                var endTime = startTime + Math.max(delay, countdown);
                if (delay > countdown) {
                    silentTime = Math.min(500, delay - countdown);
                    displayDenominator = (delay - silentTime) / countdown * 1000;
                } else
                    this.dyn.set("loaderlabel", this.dyn.get("countdown"));
                var timer = new Timer({
                    context: this,
                    delay: 50,
                    fire: function() {
                        var now = Time.now();
                        var time_left = Math.max(0, endTime - now);
                        if (now > silentTime + startTime) {
                            this.dyn.set("loaderlabel", "" + Math.ceil((time_left - silentTime) / displayDenominator));
                            this.dyn.trigger("countdown", Math.round((time_left - silentTime) / displayDenominator * 1000));
                        }
                        if (endTime <= now) {
                            this.dyn.set("loaderlabel", "");
                            timer.stop();
                        }
                        if ((time_left <= delay) && !startedRecording) {
                            startedRecording = true;
                            this._startRecording();
                        }
                    }
                });
                this.auto_destroy(timer);
            } else
                this._startRecording();
        },

        record: function() {
            this._startRecording();
        },

        _startRecording: function() {
            this.next("Recording");
        }

    });
});


Scoped.define("module:ImageCapture.Dynamics.RecorderStates.Recording", [
    "module:ImageCapture.Dynamics.RecorderStates.State",
    "base:Timers.Timer",
    "base:Time",
    "base:TimeFormat",
    "base:Async"
], function(State, Timer, Time, TimeFormat, Async, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["topmessage", "controlbar"],

        _started: function() {
            this.dyn.set("hovermessage", "");
            this.dyn.set("topmessage", "");
            this.dyn._accessing_camera = true;
            this.dyn.trigger("recording");
            this.dyn.set("settingsvisible", false);
            this.dyn.set("rerecordvisible", false);
            this.dyn.set("recordvisible", false);
            this.dyn._captureImage();
            this.dyn._uploadCapture();
            this.dyn._unbindMedia();
            this.next("Uploading");
        }

    });
});


Scoped.define("module:ImageCapture.Dynamics.RecorderStates.Uploading", [
    "module:ImageCapture.Dynamics.RecorderStates.State",
    "base:Time",
    "base:Async",
    "base:Objs"
], function(State, Time, Async, Objs, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader", "message"],

        _started: function() {
            this.dyn.set("cancancel", true);
            this.dyn.set("skipinitial", this.dyn.get("skipinitial") || this.dyn.get("skipinitialonrerecord"));
            this.dyn.set("settingsvisible", false);
            this.dyn.set("recordvisible", false);
            this.dyn.set("loadlabel", "");
            this.dyn.set("controlbarlabel", "");
            this.dyn.trigger("uploading");
            this.dyn.set("rerecordvisible", this.dyn.get("early-rerecord"));
            if (this.dyn.get("early-rerecord"))
                this.dyn.set("controlbar_active", true);
            this.dyn.set("hovermessage", "");
            this.dyn.set("topmessage", "");
            this.dyn.set("message", this.dyn.string("uploading"));
            this.dyn.set("playertopmessage", this.dyn.get("message"));
            var uploader = this.dyn._dataUploader;
            this.listenOn(uploader, "success", function() {
                Async.eventually(function() {
                    if (this.destroyed())
                        return;
                    this._finished();
                    this.next("Verifying");
                }, this);
            });
            this.listenOn(uploader, "error", function(e) {
                var bestError = this.dyn.string("uploading-failed");
                try {
                    e.forEach(function(ee) {
                        for (var key in ee)
                            if (this.dyn.string("upload-error-" + key))
                                bestError = this.dyn.string("upload-error-" + key);
                    }, this);
                } catch (err) {}
                this.dyn.set("player_active", false);
                this.next("FatalError", {
                    message: bestError,
                    retry: this.dyn.recorderAttached() ? "Uploading" : "Initial"
                });
            });
            this.listenOn(uploader, "progress", function(uploaded, total) {
                this.dyn.trigger("upload_progress", uploaded, total);
                if (total !== 0 && total > 0 && uploaded >= 0) {
                    var up = Math.min(100, Math.round(uploaded / total * 100));
                    if (!isNaN(up)) {
                        this.dyn.set("message", this.dyn.string("uploading") + ": " + up + "%");
                        this.dyn.set("playertopmessage", this.dyn.get("message"));
                    }
                }
            });
            if (this.dyn.get("localplayback") && ((this.dyn.recorder && this.dyn.recorder.supportsLocalPlayback()) || this.dyn._imageFilePlaybackable)) {
                if (this.dyn.recorder && this.dyn.recorder.supportsLocalPlayback())
                    this.dyn.set("playbacksource", this.dyn.recorder.localPlaybackSource());
                else
                    this.dyn.set("playbacksource", (window.URL || window.webkitURL).createObjectURL(this.dyn._imageFile));
                this.dyn.set("loader_active", false);
                this.dyn.set("message_active", false);
                this.dyn.set("player_active", true);
            }
            this.dyn.set("start-upload-time", Time.now());
            uploader.reset();
            uploader.upload();
        },

        rerecord: function() {
            this.dyn._detachRecorder();
            this.dyn.trigger("rerecord");
            this.dyn.set("recordermode", true);
            this.next("Initial");
        },

        _finished: function() {
            this.dyn.set("cancancel", false);
            this.dyn.trigger("uploaded");
            this.dyn.set("end-upload-time", Time.now());
        }

    });
});


Scoped.define("module:ImageCapture.Dynamics.RecorderStates.Verifying", [
    "module:ImageCapture.Dynamics.RecorderStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader", "message"],

        _started: function() {
            this.dyn.set("loadlabel", "");
            this.dyn.trigger("verifying");
            this.dyn.set("message", this.dyn.string("verifying") + "...");
            this.dyn.set("playertopmessage", this.dyn.get("message"));
            if (this.dyn.get("localplayback") && ((this.dyn.recorder && this.dyn.recorder.supportsLocalPlayback()) || this.dyn._imageFilePlaybackable)) {
                this.dyn.set("loader_active", false);
                this.dyn.set("message_active", false);
            } else {
                this.dyn.set("rerecordvisible", this.dyn.get("early-rerecord"));
                if (this.dyn.get("early-rerecord"))
                    this.dyn.set("controlbar_active", true);
            }
            this.dyn._verifyRecording().success(function() {
                this.dyn.trigger("verified");
                this.dyn._detachRecorder();
                if (this.dyn.get("recordings"))
                    this.dyn.set("recordings", this.dyn.get("recordings") - 1);
                this.dyn.set("message", "");
                this.dyn.set("playertopmessage", "");
                this.dyn.set("verified", true);
                this.next("Player");
            }, this).error(function() {
                this.dyn.set("player_active", false);
                this.next("FatalError", {
                    message: this.dyn.string("verifying-failed"),
                    retry: this.dyn.recorderAttached() ? "Verifying" : "Initial"
                });
            }, this);
        },

        rerecord: function() {
            this.dyn._detachRecorder();
            this.dyn.trigger("rerecord");
            this.dyn.set("recordermode", true);
            this.next("Initial");
        }

    });
});
Scoped.define("module:ImageCapture.Dynamics.Chooser", [
    "dynamics:Dynamic",
    "module:Assets",
    "browser:Info"
], [
    "dynamics:Partials.ClickPartial",
    "dynamics:Partials.IfPartial"
], function(Class, Assets, Info, scoped) {

    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "<div class=\"{{css}}-chooser-container\">\n\t<div class=\"{{css}}-chooser-button-container\">\n\t\t<div ba-repeat=\"{{action :: actions}}\">\n\t\t\t<div ba-hotkey:space^enter=\"{{click_action(action)}}\" onmouseout=\"this.blur()\"\n\t\t\t\t tabindex=\"0\" class=\"{{css}}-chooser-button-{{action.index}}\"\n\t\t\t     ba-click=\"{{click_action(action)}}\"\n\t\t\t>\n\t\t\t\t<input ba-if=\"{{action.select && action.capture}}\"\n\t\t\t\t\t   type=\"file\"\n\t\t\t\t\t   class=\"{{css}}-chooser-file\"\n\t\t\t\t\t   onchange=\"{{select_file_action(action, domEvent)}}\"\n\t\t\t\t\t   accept=\"{{action.accept}}\"\n\t\t\t\t\t   capture />\n\t\t\t\t<input ba-if=\"{{action.select && !action.capture}}\"\n\t\t\t\t\t   type=\"file\"\n\t\t\t\t\t   class=\"{{css}}-chooser-file\"\n\t\t\t\t\t   onchange=\"{{select_file_action(action, domEvent)}}\"\n\t\t\t\t\t   accept=\"{{action.accept}}\"\n\t\t\t\t\t   />\n\t\t\t\t<i class=\"{{csscommon}}-icon-{{action.icon}}\"\n\t\t\t\t   ba-if=\"{{action.icon}}\"></i>\n\t\t\t\t<span>\n\t\t\t\t\t{{action.label}}\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n",

                attrs: {
                    "css": "ba-imagecapture",
                    "allowrecord": true,
                    "allowupload": true,

                    "primaryrecord": true,
                    "recordviafilecapture": false,

                    "allowcustomupload": true,
                    "allowedextensions": null

                },

                types: {
                    "allowedextensions": "array",
                    "recordviafilecapture": "boolean"
                },

                collections: ["actions"],

                create: function() {
                    var custom_accept_string = "";
                    if (this.get("allowedextensions") && this.get("allowedextensions").length > 0) {
                        var browser_support = Info.isEdge() || Info.isChrome() || Info.isOpera() || (Info.isFirefox() && Info.firefoxVersion() >= 42) || (Info.isInternetExplorer() && Info.internetExplorerVersion() >= 10);
                        if (browser_support)
                            custom_accept_string = "." + this.get("allowedextensions").join(",.");
                    } else if (!this.get("allowcustomupload")) {
                        custom_accept_string = "image/*,image/png";
                    }

                    var order = [];
                    if (this.get("primaryrecord")) {
                        if (this.get("allowrecord"))
                            order.push("record");
                        if (this.get("allowupload"))
                            order.push("upload");
                    } else {
                        if (this.get("allowupload"))
                            order.push("upload");
                        if (this.get("allowrecord"))
                            order.push("record");
                    }
                    var actions = this.get("actions");
                    order.forEach(function(act, index) {
                        switch (act) {
                            case "record":
                                actions.add({
                                    type: "record",
                                    index: index,
                                    icon: 'videocam',
                                    label: this.string("capture-image"),
                                    select: Info.isMobile() && !(Info.isAndroid() && Info.isCordova()) && this.get("recordviafilecapture"),
                                    capture: true,
                                    accept: "image/*,image/png;capture=camcorder"
                                });
                                break;
                            case "upload":
                                actions.add({
                                    type: "upload",
                                    index: index,
                                    icon: "upload",
                                    label: this.string("upload-image"),
                                    select: !(Info.isiOS() && Info.isCordova()),
                                    accept: Info.isMobile() && !(Info.isAndroid() && Info.isCordova()) ? "image/*,image/png" : custom_accept_string
                                });
                                break;
                        }
                    }, this);
                },

                functions: {

                    click_action: function(action) {
                        if (action.get("select"))
                            return;
                        if (Info.isMobile() && Info.isCordova()) {
                            var self = this;
                            if (Info.isAndroid()) {
                                navigator.device.capture.captureImage(function(mediaFiles) {
                                    self.trigger("upload", mediaFiles[0]);
                                }, function(error) {}, {
                                    limit: 1
                                });
                            } else if (Info.isiOS()) {
                                navigator.camera.getPicture(function(url) {
                                    self.trigger("upload", {
                                        localURL: url,
                                        fullPath: url
                                    });
                                }, function(error) {}, {
                                    destinationType: Camera.DestinationType.FILE_URI,
                                    sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                                    mediaType: Camera.MediaType.IMAGE
                                });
                            }
                        } else
                            this.trigger("record");
                    },

                    select_file_action: function(action, domEvent) {
                        if (!action.get("select"))
                            return;
                        this.trigger("upload", domEvent[0].target);
                    }

                }

            };
        })
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "actions": function (obj) { with (obj) { return actions; } }, "click_action(action)": function (obj) { with (obj) { return click_action(action); } }, "action.index": function (obj) { with (obj) { return action.index; } }, "action.select && action.capture": function (obj) { with (obj) { return action.select && action.capture; } }, "select_file_action(action, domEvent)": function (obj) { with (obj) { return select_file_action(action, domEvent); } }, "action.accept": function (obj) { with (obj) { return action.accept; } }, "action.select && !action.capture": function (obj) { with (obj) { return action.select && !action.capture; } }, "csscommon": function (obj) { with (obj) { return csscommon; } }, "action.icon": function (obj) { with (obj) { return action.icon; } }, "action.label": function (obj) { with (obj) { return action.label; } }/**/ })
        .register("ba-imagecapture-chooser")
        .attachStringTable(Assets.strings)
        .addStrings({
            "image-capture": "Capture Image",
            "upload-image": "Upload Image"
        });
});
Scoped.define("module:ImageCapture.Dynamics.Controlbar", [
    "dynamics:Dynamic",
    "module:Assets",
    "base:Timers.Timer"
], [
    "dynamics:Partials.ShowPartial",
    "dynamics:Partials.RepeatPartial"
], function(Class, Assets, Timer, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "<div class=\"{{css}}-dashboard\">\n\t<div class=\"{{css}}-backbar\"></div>\n\t<div data-selector=\"recorder-settings\" class=\"{{css}}-settings\" ba-show=\"{{settingsvisible && settingsopen}}\">\n\t\t<div class=\"{{css}}-settings-backbar\"></div>\n\t\t<div data-selector=\"settings-list-front\" class=\"{{css}}-settings-front\">\n\t\t\t<ul data-selector=\"camera-settings\" ba-repeat=\"{{camera :: cameras}}\">\n\t\t\t\t<li>\n\t\t\t\t\t<input tabindex=\"0\"\n\t\t\t\t\t\t   ba-hotkey:space^enter=\"{{selectCamera(camera.id)}}\" onmouseout=\"this.blur()\"\n\t\t\t\t\t\t   type='radio' name='camera' value=\"{{selectedcamera == camera.id}}\" onclick=\"{{selectCamera(camera.id)}}\"\n\t\t\t\t\t/>\n\t\t\t\t\t<span></span>\n\t\t\t\t\t<label tabindex=\"0\"\n\t\t\t\t\t\t   ba-hotkey:space^enter=\"{{selectCamera(camera.id)}}\" onmouseout=\"this.blur()\"\n\t\t\t\t\t\t   onclick=\"{{selectCamera(camera.id)}}\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{{camera.label}}\n\t\t\t\t\t</label>\n\t\t\t\t </li>\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n\t<div data-selector=\"controlbar\" class=\"{{css}}-controlbar\">\n\n        <div class=\"{{css}}-leftbutton-container\" ba-show=\"{{settingsvisible}}\">\n            <div tabindex=\"0\"\n\t\t\t\t ba-hotkey:space^enter=\"{{settingsopen=!settingsopen}}\" onmouseout=\"this.blur()\"\n\t\t\t\t data-selector=\"record-button-icon-cog\" class=\"{{css}}-button-inner {{css}}-button-{{settingsopen ? 'selected' : 'unselected'}}\"\n                 onclick=\"{{settingsopen=!settingsopen}}\"\n                 onmouseenter=\"{{hover(string('settings'))}}\"\n                 onmouseleave=\"{{unhover()}}\"\n\t\t\t>\n                <i class=\"{{csscommon}}-icon-cog\"></i>\n            </div>\n        </div>\n\n        <div class=\"{{css}}-lefticon-container\" ba-show=\"{{settingsvisible}}\">\n            <div data-selector=\"record-button-icon-videocam\" class=\"{{csscommon}}-icon-inner\"\n                 onmouseenter=\"{{hover(string(camerahealthy ? 'camerahealthy' : 'cameraunhealthy'))}}\"\n                 onmouseleave=\"{{unhover()}}\"\n\t\t\t>\n                <i class=\"{{csscommon}}-icon-videocam {{csscommon}}-icon-state-{{camerahealthy ? 'good' : 'bad' }}\"></i>\n            </div>\n        </div>\n\n        <div class=\"{{css}}-label-container\" ba-show=\"{{controlbarlabel}}\">\n        \t<div data-selector=\"record-label-block\" class=\"{{css}}-label-label\">\n        \t\t{{controlbarlabel}}\n        \t</div>\n        </div>\n\n        <div class=\"{{css}}-rightbutton-container\" ba-show=\"{{recordvisible}}\">\n        \t<div tabindex=\"0\"\n\t\t\t\t ba-hotkey:space^enter=\"{{record()}}\" onmouseout=\"this.blur()\"\n\t\t\t\t data-selector=\"record-primary-button\" class=\"{{css}}-button-primary\"\n                 onclick=\"{{record()}}\"\n                 onmouseenter=\"{{hover(string('record-tooltip'))}}\"\n                 onmouseleave=\"{{unhover()}}\"\n\t\t\t>\n        \t\t{{string('record')}}\n        \t</div>\n        </div>\n\n        <div class=\"{{css}}-rightbutton-container\" ba-show=\"{{rerecordvisible}}\">\n        \t<div tabindex=\"0\"\n\t\t\t\t ba-hotkey:space^enter=\"{{rerecord()}}\" onmouseout=\"this.blur()\"\n\t\t\t\t data-selector=\"rerecord-primary-button\" class=\"{{css}}-button-primary\"\n                 onclick=\"{{rerecord()}}\"\n                 onmouseenter=\"{{hover(string('rerecord-tooltip'))}}\"\n                 onmouseleave=\"{{unhover()}}\"\n\t\t\t>\n        \t\t{{string('rerecord')}}\n        \t</div>\n        </div>\n\n\t\t<div class=\"{{css}}-rightbutton-container\" ba-show=\"{{cancelvisible}}\">\n\t\t\t<div tabindex=\"0\"\n\t\t\t\t ba-hotkey:space^enter=\"{{cancel()}}\" onmouseout=\"this.blur()\"\n\t\t\t\t data-selector=\"cancel-primary-button\" class=\"{{css}}-button-primary\"\n\t\t\t\t onclick=\"{{cancel()}}\"\n\t\t\t\t onmouseenter=\"{{hover(string('cancel-tooltip'))}}\"\n\t\t\t\t onmouseleave=\"{{unhover()}}\"\n\t\t\t>\n\t\t\t\t{{string('cancel')}}\n\t\t\t</div>\n\t\t</div>\n\n\t</div>\n</div>\n",

                attrs: {
                    "css": "ba-imagecapture",
                    "hovermessage": ""
                },

                functions: {
                    selectCamera: function(cameraId) {
                        this.trigger("select-camera", cameraId);
                    },
                    hover: function(text) {
                        this.set("hovermessage", text);
                    },
                    unhover: function() {
                        this.set("hovermessage", "");
                    },
                    record: function() {
                        this.trigger("invoke-record");
                    },
                    rerecord: function() {
                        this.trigger("invoke-rerecord");
                    },
                    cancel: function() {
                        this.trigger("invoke-cancel");
                    }
                }

            };
        })
        .register("ba-imagecapture-controlbar")
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "settingsvisible && settingsopen": function (obj) { with (obj) { return settingsvisible && settingsopen; } }, "cameras": function (obj) { with (obj) { return cameras; } }, "selectCamera(camera.id)": function (obj) { with (obj) { return selectCamera(camera.id); } }, "selectedcamera == camera.id": function (obj) { with (obj) { return selectedcamera == camera.id; } }, "camera.label": function (obj) { with (obj) { return camera.label; } }, "settingsvisible": function (obj) { with (obj) { return settingsvisible; } }, "settingsopen=!settingsopen": function (obj) { with (obj) { return settingsopen=!settingsopen; } }, "settingsopen ? 'selected' : 'unselected'": function (obj) { with (obj) { return settingsopen ? 'selected' : 'unselected'; } }, "hover(string('settings'))": function (obj) { with (obj) { return hover(string('settings')); } }, "unhover()": function (obj) { with (obj) { return unhover(); } }, "csscommon": function (obj) { with (obj) { return csscommon; } }, "hover(string(camerahealthy ? 'camerahealthy' : 'cameraunhealthy'))": function (obj) { with (obj) { return hover(string(camerahealthy ? 'camerahealthy' : 'cameraunhealthy')); } }, "camerahealthy ? 'good' : 'bad'": function (obj) { with (obj) { return camerahealthy ? 'good' : 'bad'; } }, "controlbarlabel": function (obj) { with (obj) { return controlbarlabel; } }, "recordvisible": function (obj) { with (obj) { return recordvisible; } }, "record()": function (obj) { with (obj) { return record(); } }, "hover(string('record-tooltip'))": function (obj) { with (obj) { return hover(string('record-tooltip')); } }, "string('record')": function (obj) { with (obj) { return string('record'); } }, "rerecordvisible": function (obj) { with (obj) { return rerecordvisible; } }, "rerecord()": function (obj) { with (obj) { return rerecord(); } }, "hover(string('rerecord-tooltip'))": function (obj) { with (obj) { return hover(string('rerecord-tooltip')); } }, "string('rerecord')": function (obj) { with (obj) { return string('rerecord'); } }, "cancelvisible": function (obj) { with (obj) { return cancelvisible; } }, "cancel()": function (obj) { with (obj) { return cancel(); } }, "hover(string('cancel-tooltip'))": function (obj) { with (obj) { return hover(string('cancel-tooltip')); } }, "string('cancel')": function (obj) { with (obj) { return string('cancel'); } }/**/ })
        .attachStringTable(Assets.strings)
        .addStrings({
            "settings": "Settings",
            "camerahealthy": "Lighting is good",
            "cameraunhealthy": "Lighting is not optimal",
            "record": "Capture",
            "record-tooltip": "Click here to capture.",
            "rerecord": "Redo",
            "rerecord-tooltip": "Click here to redo.",
            "cancel": "Cancel",
            "cancel-tooltip": "Click here to cancel."
        });
});
Scoped.define("module:ImageCapture.Dynamics.Faceoutline", [
    "dynamics:Dynamic"
], function(Class, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "<svg viewBox=\"0 0 301 171\" style=\"width:100%; height:100%\">\n    <g>\n        <path fill=\"none\" stroke=\"white\" stroke-width=\"2\" stroke-miterlimit=\"10\" stroke-dasharray=\"3.0228,3.0228\" d=\"M198.5,79.831c0,40.542-22.752,78.579-47.5,78.579c-24.749,0-47.5-38.036-47.5-78.579c0-40.543,17.028-68.24,47.5-68.24C185.057,11.591,198.5,39.288,198.5,79.831z\"></path>\n    </g>\n</svg>"

            };
        })
        .registerFunctions({ /**//**/ })
        .register("ba-imagecapture-faceoutline");
});
Scoped.define("module:ImageCapture.Dynamics.Loader", [
    "dynamics:Dynamic",
    "module:Assets"
], [
    "dynamics:Partials.ShowPartial"
], function(Class, Assets, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div class=\"{{css}}-loader-container\">\n    <div data-selector=\"recorder-loader-block\" class=\"{{css}}-loader-loader\" title=\"{{tooltip || ''}}\">\n    </div>\n</div>\n<div data-selector=\"recorder-loader-label-container\" class=\"{{css}}-loader-label\" ba-show=\"{{label}}\">\n\t{{label}}\n</div>\n",

                attrs: {
                    "css": "ba-imagecapture",
                    "tooltip": "",
                    "label": "",
                    "message": "",
                    "hovermessage": ""
                }

            };
        })
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "tooltip || ''": function (obj) { with (obj) { return tooltip || ''; } }, "label": function (obj) { with (obj) { return label; } }/**/ })
        .register("ba-imagecapture-loader")
        .attachStringTable(Assets.strings)
        .addStrings({});
});
Scoped.define("module:ImageCapture.Dynamics.Message", [
    "dynamics:Dynamic"
], [
    "dynamics:Partials.ClickPartial"
], function(Class, Templates, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div data-selector=\"recorder-message-container\" class=\"{{css}}-message-container\" ba-click=\"{{click()}}\">\n    <div data-selector=\"recorder-message-block\" class='{{css}}-message-message'>\n        <p>\n            {{message || \"\"}}\n        </p>\n        <ul ba-if=\"{{links && links.length > 0}}\" ba-repeat=\"{{link :: links}}\">\n            <li>\n                <a href=\"javascript:;\" ba-click=\"{{linkClick(link)}}\">\n                    {{link.title}}\n                </a>\n            </li>\n        </ul>\n    </div>\n</div>\n",

                attrs: {
                    "css": "ba-imagecapture",
                    "message": '',
                    "links": null
                },

                functions: {

                    click: function() {
                        this.trigger("click");
                    },

                    linkClick: function(link) {
                        this.trigger("link", link);
                    }

                }

            };
        })
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "click()": function (obj) { with (obj) { return click(); } }, "message || \"\"": function (obj) { with (obj) { return message || ""; } }, "links && links.length > 0": function (obj) { with (obj) { return links && links.length > 0; } }, "links": function (obj) { with (obj) { return links; } }, "linkClick(link)": function (obj) { with (obj) { return linkClick(link); } }, "link.title": function (obj) { with (obj) { return link.title; } }/**/ })
        .register("ba-imagecapture-message");
});
Scoped.define("module:ImageCapture.Dynamics.Topmessage", [
    "dynamics:Dynamic"
], function(Class, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div class=\"{{css}}-topmessage-container\">\n    <div class='{{css}}-topmessage-background'>\n    </div>\n    <div data-selector=\"recorder-topmessage-block\" class='{{css}}-topmessage-message'>\n        {{topmessage}}\n    </div>\n</div>\n",

                attrs: {
                    "css": "ba-imagecapture",
                    "topmessage": ''
                }

            };
        })
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "topmessage": function (obj) { with (obj) { return topmessage; } }/**/ })
        .register("ba-imagecapture-topmessage");
});
Scoped.define("module:AudioPlayer.Dynamics.Controlbar", [
    "dynamics:Dynamic",
    "base:TimeFormat",
    "browser:Dom",
    "module:Assets",
    "browser:Info"
], [
    "dynamics:Partials.StylesPartial",
    "dynamics:Partials.ShowPartial",
    "dynamics:Partials.IfPartial",
    "dynamics:Partials.ClickPartial"
], function(Class, TimeFormat, Dom, Assets, Info, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div class=\"{{css}}-dashboard\">\n\t<div tabindex=\"2\" data-selector=\"progress-bar-inner\" class=\"{{css}}-progressbar {{disableseeking ? cssplayer + '-disabled' : ''}}\"\n\t\t ba-hotkey:right=\"{{seek(position + skipseconds)}}\"\n\t\t ba-hotkey:left=\"{{seek(position - skipseconds)}}\"\n         ba-hotkey:alt+right=\"{{seek(position + skipseconds * 3)}}\"\n         ba-hotkey:alt+left=\"{{seek(position - skipseconds * 3)}}\"\n\t\t onmouseout=\"this.blur()\"\n\t     onmousedown=\"{{startUpdatePosition(domEvent)}}\"\n\t     onmouseup=\"{{stopUpdatePosition(domEvent)}}\"\n\t     onmouseleave=\"{{stopUpdatePosition(domEvent)}}\"\n\t     onmousemove=\"{{progressUpdatePosition(domEvent)}}\">\n\t\t<div class=\"{{css}}-progressbar-cache\" ba-styles=\"{{{width: Math.round(duration ? cached / duration * 100 : 0) + '%'}}}\"></div>\n\t\t<div class=\"{{css}}-progressbar-position\" ba-styles=\"{{{width: Math.round(duration ? position / duration * 100 : 0) + '%'}}}\" title=\"{{string('audio-progress')}}\">\n\t\t\t<div class=\"{{css}}-progressbar-button\"></div>\n\t\t</div>\n\t</div>\n\n\t<div class=\"{{css}}-backbar\"></div>\n\n\t<div class=\"{{css}}-controlbar\">\n\n        <div tabindex=\"0\" data-selector=\"submit-audio-button\"\n\t\t\t ba-hotkey:space^enter=\"{{submit()}}\" onmouseout=\"this.blur()\"\n\t\t\t class=\"{{css}}-leftbutton-container\"\n\t\t\t ba-if=\"{{submittable}}\" ba-click=\"{{submit()}}\">\n            <div class=\"{{css}}-button-inner\">\n                {{string('submit-audio')}}\n            </div>\n        </div>\n\n        <div tabindex=\"0\" data-selector=\"button-icon-ccw\"\n\t\t\t ba-hotkey:space^enter=\"{{rerecord()}}\" onmouseout=\"this.blur()\"\n\t\t\t class=\"{{css}}-leftbutton-container\" ba-if=\"{{rerecordable}}\"\n\t\t\t ba-click=\"{{rerecord()}}\" title=\"{{string('rerecord-audio')}}\"\n\t\t>\n            <div class=\"{{css}}-button-inner\">\n                <i class=\"{{csscommon}}-icon-ccw\"></i>\n            </div>\n        </div>\n\n        <div tabindex=\"0\" data-selector=\"button-icon-play\"\n\t\t\t onmouseout=\"this.blur()\"\n\t\t\t class=\"{{css}}-leftbutton-container\" title=\"{{string('play-audio')}}\"\n\t\t\t onkeydown=\"{{tab_index_move(domEvent, null, 'button-icon-pause')}}\" ba-if=\"{{!playing}}\" ba-click=\"{{play()}}\"\n\t\t>\n            <div class=\"{{css}}-button-inner\">\n                <i class=\"{{csscommon}}-icon-play\"></i>\n            </div>\n        </div>\n\n        <div tabindex=\"0\" data-selector=\"button-icon-pause\"\n\t\t\t onmouseout=\"this.blur()\"\n\t\t\t class=\"{{css}}-leftbutton-container {{disablepause ? cssplayer + '-disabled' : ''}}\"\n\t\t\t onkeydown=\"{{tab_index_move(domEvent, null, 'button-icon-play')}}\" ba-if=\"{{playing}}\" ba-click=\"{{pause()}}\"\n\t\t\t title=\"{{disablepause ? string('pause-audio-disabled') : string('pause-audio')}}\"\n\t\t>\n            <div class=\"{{css}}-button-inner\">\n                <i class=\"{{csscommon}}-icon-pause\"></i>\n            </div>\n        </div>\n\n\t\t<div class=\"{{css}}-time-container\">\n\t\t\t<div class=\"{{css}}-time-value\" title=\"{{string('elapsed-time')}}\">{{formatTime(position)}}</div>\n\t\t\t<div class=\"{{css}}-time-sep\">/</div>\n\t\t\t<div class=\"{{css}}-time-value\" title=\"{{string('total-time')}}\">{{formatTime(duration || position)}}</div>\n\t\t</div>\n\n\t\t<div data-selector=\"audio-title-block\" class=\"{{css}}-title-container\" ba-if=\"{{title}}\">\n\t\t\t<p class=\"{{css}}-title\">\n\t\t\t\t{{title}}\n\t\t\t</p>\n\t\t</div>\n\n\t\t<div class=\"{{css}}-volumebar\">\n\t\t\t<div tabindex=\"5\" data-selector=\"button-volume-bar\"\n\t\t\t\t ba-hotkey:right=\"{{set_volume(volume + 0.1)}}\" ba-hotkey:left=\"{{set_volume(volume - 0.1)}}\"\n\t\t\t\t ba-hotkey:up=\"{{set_volume(1)}}\" ba-hotkey:down=\"{{set_volume(0)}}\"\n\t\t\t\t onmouseout=\"this.blur()\"\n\t\t\t\t class=\"{{css}}-volumebar-inner\"\n\t\t\t     onmousedown=\"{{startUpdateVolume(domEvent)}}\"\n                 onmouseup=\"{{stopUpdateVolume(domEvent)}}\"\n                 onmouseleave=\"{{stopUpdateVolume(domEvent)}}\"\n                 onmousemove=\"{{progressUpdateVolume(domEvent)}}\"\n\t\t\t>\n\t\t\t\t<div class=\"{{css}}-volumebar-position\" ba-styles=\"{{{width: Math.min(100, Math.round(volume * 100)) + '%'}}}\">\n\t\t\t\t    <div class=\"{{css}}-volumebar-button\" title=\"{{string('volume-button')}}\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div tabindex=\"4\" data-selector=\"button-icon-volume\"\n\t\t\t ba-hotkey:space^enter=\"{{toggle_volume()}}\" onmouseout=\"this.blur()\"\n\t\t\t class=\"{{css}}-rightbutton-container\"\n\t\t\t ba-click=\"{{toggle_volume()}}\" title=\"{{string(volume > 0 ? 'volume-mute' : 'volume-unmute')}}\">\n\t\t\t<div class=\"{{css}}-button-inner\">\n\t\t\t\t<i class=\"{{csscommon + '-icon-volume-' + (volume >= 0.5 ? 'up' : (volume > 0 ? 'down' : 'off')) }}\"></i>\n\t\t\t</div>\n\t\t</div>\n\n\t</div>\n</div>\n",

                attrs: {
                    "css": "ba-audioplayer",
                    "csscommon": "ba-commoncss",
                    "cssplayer": "ba-player",
                    "csstheme": "ba-audiooplayer-default-theme",
                    "duration": 0,
                    "position": 0,
                    "cached": 0,
                    "volume": 1.0,
                    "expandedprogress": true,
                    "playing": false,
                    "rerecordable": false,
                    "submittable": false,
                    "title": ""
                },

                functions: {

                    formatTime: function(time) {
                        time = Math.max(time || 0, 1);
                        return TimeFormat.format(TimeFormat.ELAPSED_MINUTES_SECONDS, time * 1000);
                    },

                    startUpdatePosition: function(event) {
                        if (this.get("disableseeking")) return;
                        event[0].preventDefault();
                        this.set("_updatePosition", true);
                        this.call("progressUpdatePosition", event);
                    },

                    progressUpdatePosition: function(event) {
                        var ev = event[0];
                        ev.preventDefault();
                        if (!this.get("_updatePosition"))
                            return;
                        var clientX = ev.clientX;
                        var target = ev.currentTarget;
                        var offset = Dom.elementOffset(target);
                        var dimensions = Dom.elementDimensions(target);
                        this.set("position", this.get("duration") * (clientX - offset.left) / (dimensions.width || 1));

                        var player = this.__parent.player;

                        this.trigger("position", this.get("position"));
                    },

                    stopUpdatePosition: function(event) {
                        event[0].preventDefault();
                        this.set("_updatePosition", false);
                    },

                    startUpdateVolume: function(event) {
                        event[0].preventDefault();
                        this.set("_updateVolume", true);
                        this.call("progressUpdateVolume", event);
                    },

                    progressUpdateVolume: function(event) {
                        var ev = event[0];
                        ev.preventDefault();
                        if (!this.get("_updateVolume"))
                            return;
                        var clientX = ev.clientX;
                        var target = ev.currentTarget;
                        var offset = Dom.elementOffset(target);
                        var dimensions = Dom.elementDimensions(target);
                        this.set("volume", (clientX - offset.left) / (dimensions.width || 1));
                        this.trigger("volume", this.get("volume"));
                    },

                    stopUpdateVolume: function(event) {
                        event[0].preventDefault();
                        this.set("_updateVolume", false);
                    },

                    startVerticallyUpdateVolume: function(event) {
                        event[0].preventDefault();
                        this.set("_updateVolume", true);
                        this.call("progressVerticallyUpdateVolume", event);
                    },

                    progressVerticallyUpdateVolume: function(event) {
                        var ev = event[0];
                        ev.preventDefault();
                        if (!this.get("_updateVolume"))
                            return;
                        var pageY = ev.pageY;
                        var target = ev.currentTarget;
                        var offset = Dom.elementOffset(target);
                        var dimensions = Dom.elementDimensions(target);
                        this.set("volume", 1 - (pageY - offset.top) / dimensions.height);
                        this.trigger("volume", this.get("volume"));
                    },

                    stopVerticallyUpdateVolume: function(event) {
                        event[0].preventDefault();
                        this.set("_updateVolume", false);
                    },


                    play: function() {
                        this.trigger("play");
                    },

                    pause: function() {
                        this.trigger("pause");
                    },

                    toggle_volume: function() {
                        if (this.get("volume") > 0) {
                            this.__oldVolume = this.get("volume");
                            this.set("volume", 0);
                        } else
                            this.set("volume", this.__oldVolume || 1);
                        this.trigger("volume", this.get("volume"));
                    },

                    rerecord: function() {
                        this.trigger("rerecord");
                    },

                    seek: function(position) {
                        this.trigger("seek", position);
                    },

                    set_volume: function(volume) {
                        this.trigger("set_volume", volume);
                    },

                    submit: function() {
                        this.set("submittable", false);
                        this.set("rerecordable", false);
                        this.trigger("submit");
                    },

                    tab_index_move: function(ev, nextSelector, focusingSelector) {
                        this.trigger("tab_index_move", ev[0], nextSelector, focusingSelector);
                    }
                },

                create: function() {
                    this.set("ismobile", Info.isMobile());
                }
            };
        })
        .register("ba-audioplayer-controlbar")
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "disableseeking ? cssplayer + '-disabled' : ''": function (obj) { with (obj) { return disableseeking ? cssplayer + '-disabled' : ''; } }, "seek(position + skipseconds)": function (obj) { with (obj) { return seek(position + skipseconds); } }, "seek(position - skipseconds)": function (obj) { with (obj) { return seek(position - skipseconds); } }, "seek(position + skipseconds * 3)": function (obj) { with (obj) { return seek(position + skipseconds * 3); } }, "seek(position - skipseconds * 3)": function (obj) { with (obj) { return seek(position - skipseconds * 3); } }, "startUpdatePosition(domEvent)": function (obj) { with (obj) { return startUpdatePosition(domEvent); } }, "stopUpdatePosition(domEvent)": function (obj) { with (obj) { return stopUpdatePosition(domEvent); } }, "progressUpdatePosition(domEvent)": function (obj) { with (obj) { return progressUpdatePosition(domEvent); } }, "{width: Math.round(duration ? cached / duration * 100 : 0) + '%'}": function (obj) { with (obj) { return {width: Math.round(duration ? cached / duration * 100 : 0) + '%'}; } }, "{width: Math.round(duration ? position / duration * 100 : 0) + '%'}": function (obj) { with (obj) { return {width: Math.round(duration ? position / duration * 100 : 0) + '%'}; } }, "string('audio-progress')": function (obj) { with (obj) { return string('audio-progress'); } }, "submit()": function (obj) { with (obj) { return submit(); } }, "submittable": function (obj) { with (obj) { return submittable; } }, "string('submit-audio')": function (obj) { with (obj) { return string('submit-audio'); } }, "rerecord()": function (obj) { with (obj) { return rerecord(); } }, "rerecordable": function (obj) { with (obj) { return rerecordable; } }, "string('rerecord-audio')": function (obj) { with (obj) { return string('rerecord-audio'); } }, "csscommon": function (obj) { with (obj) { return csscommon; } }, "string('play-audio')": function (obj) { with (obj) { return string('play-audio'); } }, "tab_index_move(domEvent, null, 'button-icon-pause')": function (obj) { with (obj) { return tab_index_move(domEvent, null, 'button-icon-pause'); } }, "!playing": function (obj) { with (obj) { return !playing; } }, "play()": function (obj) { with (obj) { return play(); } }, "disablepause ? cssplayer + '-disabled' : ''": function (obj) { with (obj) { return disablepause ? cssplayer + '-disabled' : ''; } }, "tab_index_move(domEvent, null, 'button-icon-play')": function (obj) { with (obj) { return tab_index_move(domEvent, null, 'button-icon-play'); } }, "playing": function (obj) { with (obj) { return playing; } }, "pause()": function (obj) { with (obj) { return pause(); } }, "disablepause ? string('pause-audio-disabled') : string('pause-audio')": function (obj) { with (obj) { return disablepause ? string('pause-audio-disabled') : string('pause-audio'); } }, "string('elapsed-time')": function (obj) { with (obj) { return string('elapsed-time'); } }, "formatTime(position)": function (obj) { with (obj) { return formatTime(position); } }, "string('total-time')": function (obj) { with (obj) { return string('total-time'); } }, "formatTime(duration || position)": function (obj) { with (obj) { return formatTime(duration || position); } }, "title": function (obj) { with (obj) { return title; } }, "set_volume(volume + 0.1)": function (obj) { with (obj) { return set_volume(volume + 0.1); } }, "set_volume(volume - 0.1)": function (obj) { with (obj) { return set_volume(volume - 0.1); } }, "set_volume(1)": function (obj) { with (obj) { return set_volume(1); } }, "set_volume(0)": function (obj) { with (obj) { return set_volume(0); } }, "startUpdateVolume(domEvent)": function (obj) { with (obj) { return startUpdateVolume(domEvent); } }, "stopUpdateVolume(domEvent)": function (obj) { with (obj) { return stopUpdateVolume(domEvent); } }, "progressUpdateVolume(domEvent)": function (obj) { with (obj) { return progressUpdateVolume(domEvent); } }, "{width: Math.min(100, Math.round(volume * 100)) + '%'}": function (obj) { with (obj) { return {width: Math.min(100, Math.round(volume * 100)) + '%'}; } }, "string('volume-button')": function (obj) { with (obj) { return string('volume-button'); } }, "toggle_volume()": function (obj) { with (obj) { return toggle_volume(); } }, "string(volume > 0 ? 'volume-mute' : 'volume-unmute')": function (obj) { with (obj) { return string(volume > 0 ? 'volume-mute' : 'volume-unmute'); } }, "csscommon + '-icon-volume-' + (volume >= 0.5 ? 'up' : (volume > 0 ? 'down' : 'off'))": function (obj) { with (obj) { return csscommon + '-icon-volume-' + (volume >= 0.5 ? 'up' : (volume > 0 ? 'down' : 'off')); } }/**/ })
        .attachStringTable(Assets.strings)
        .addStrings({
            "audio-progress": "Progress",
            "rerecord-audio": "Redo?",
            "submit-audio": "Confirm",
            "play-audio": "Play",
            "pause-audio": "Pause",
            "pause-audio-disabled": "Pause not supported",
            "elapsed-time": "Elasped time",
            "total-time": "Total length of",
            "volume-button": "Set volume",
            "volume-mute": "Mute sound",
            "volume-unmute": "Unmute sound"
        });
});
Scoped.define("module:AudioPlayer.Dynamics.Loader", [
    "dynamics:Dynamic",
    "module:Assets"
], function(Class, Assets, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div class=\"{{cssplayer}}-loader-container\">\n    <div data-selector=\"loader-block\" class=\"{{cssplayer}}-loader-loader\" title=\"{{string('tooltip')}}\">\n    </div>\n</div>\n",

                attrs: {
                    "css": "ba-audioplayer"
                }

            };
        })
        .register("ba-audioplayer-loader")
        .registerFunctions({ /**/"cssplayer": function (obj) { with (obj) { return cssplayer; } }, "string('tooltip')": function (obj) { with (obj) { return string('tooltip'); } }/**/ })
        .attachStringTable(Assets.strings)
        .addStrings({
            "tooltip": "Loading..."
        });
});
Scoped.define("module:AudioPlayer.Dynamics.Message", [
    "dynamics:Dynamic"
], [
    "dynamics:Partials.ClickPartial"
], function(Class, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div class=\"{{css}}-message-container\" ba-click=\"{{click()}}\">\n    <div data-selector=\"message-block\" class='{{css}}-message-message'>\n        {{message}}\n    </div>\n</div>\n",

                attrs: {
                    "css": "ba-audioplayer",
                    "message": ''
                },

                functions: {

                    click: function() {
                        this.trigger("click");
                    }

                }

            };
        })
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "click()": function (obj) { with (obj) { return click(); } }, "message": function (obj) { with (obj) { return message; } }/**/ })
        .register("ba-audioplayer-message");
});
Scoped.define("module:AudioPlayer.Dynamics.Player", [
    "dynamics:Dynamic",
    "module:Assets",
    "module:AudioVisualisation",
    "browser:Info",
    "browser:Dom",
    "media:AudioPlayer.AudioPlayerWrapper",
    "base:Types",
    "base:Objs",
    "base:Strings",
    "base:Time",
    "base:Timers",
    "base:States.Host",
    "base:Classes.ClassRegistry",
    "base:Async",
    "module:AudioPlayer.Dynamics.PlayerStates.Initial",
    "module:AudioPlayer.Dynamics.PlayerStates",
    "browser:Events"
], [
    "module:AudioPlayer.Dynamics.Message",
    "module:AudioPlayer.Dynamics.Loader",
    "module:AudioPlayer.Dynamics.Controlbar",
    "dynamics:Partials.EventPartial",
    "dynamics:Partials.OnPartial",
    "dynamics:Partials.TogglePartial",
    "dynamics:Partials.StylesPartial",
    "dynamics:Partials.TemplatePartial",
    "dynamics:Partials.HotkeyPartial"
], function(Class, Assets, AudioVisualisation, Info, Dom, AudioPlayerWrapper, Types, Objs, Strings, Time, Timers, Host, ClassRegistry, Async, InitialState, PlayerStates, DomEvents, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "<div itemscope itemtype=\"http://schema.org/AudioObject\"\n    class=\"{{css}}-container {{cssplayer}}-size-{{csssize}} {{iecss}}-{{ie8 ? 'ie8' : 'noie8'}} {{csstheme}}\n    {{cssplayer}}-normal-view {{cssplayer}}-common-browser {{cssplayer}}-{{themecolor}}-color {{stretch ? css + '-stretch' : ''}}\n    {{cssplayer}}-{{title ? 'has-title' : 'no-title'}} {{visualeffectvisible ? cssplayer + '-visual-effect-applied' : ''}}\"\n\tba-styles=\"{{widthHeightStyles}}\"\n>\n\t<canvas data-selector=\"audio-canvas\" class=\"{{csstheme}}-audio-canvas\"></canvas>\n    <audio tabindex=\"-1\" class=\"{{css}}-audio\" data-audio=\"audio\"></audio>\n    <div class=\"{{css}}-overlay\">\n\t\t<div tabindex=\"-1\" class=\"{{css}}-player-toggle-overlay\" data-selector=\"player-toggle-overlay\"\n\t\t\t ba-hotkey:right=\"{{seek(position + skipseconds)}}\" ba-hotkey:left=\"{{seek(position - skipseconds)}}\"\n\t\t\t ba-hotkey:alt+right=\"{{seek(position + skipseconds * 3)}}\" ba-hotkey:alt+left=\"{{seek(position - skipseconds * 3)}}\"\n\t\t\t ba-hotkey:up=\"{{set_volume(volume + 0.1)}}\" ba-hotkey:down=\"{{set_volume(volume - 0.1)}}\"\n\t\t\t >\n\t\t</div>\n\t    <ba-{{dyncontrolbar}}\n\t\t    ba-css=\"{{csscontrolbar || css}}\"\n\t\t\tba-cssplayer=\"{{cssplayer || css}}\"\n\t\t\tba-csscommon=\"{{csscommon || css}}\"\n\t\t\tba-csstheme=\"{{csstheme || css}}\"\n\t\t\tba-themecolor=\"{{themecolor}}\"\n\t\t    ba-template=\"{{tmplcontrolbar}}\"\n\t\t    ba-show=\"{{controlbar_active}}\"\n\t\t    ba-playing=\"{{playing}}\"\n\t\t\tba-playwhenvisible=\"{{playwhenvisible}}\"\n\t\t    ba-event:rerecord=\"rerecord\"\n\t\t    ba-event:submit=\"submit\"\n\t\t    ba-event:play=\"play\"\n\t\t    ba-event:pause=\"pause\"\n\t\t    ba-event:position=\"seek\"\n\t\t    ba-event:volume=\"set_volume\"\n\t\t\tba-event:tab_index_move=\"tab_index_move\"\n\t\t\tba-event:seek=\"seek\"\n\t\t\tba-event:set_volume=\"set_volume\"\n\t\t\tba-tabindex=\"{{tabindex}}\"\n\t\t    ba-volume=\"{{volume}}\"\n\t\t    ba-duration=\"{{duration}}\"\n\t\t    ba-cached=\"{{buffered}}\"\n\t\t    ba-title=\"{{title}}\"\n\t\t    ba-position=\"{{position}}\"\n\t\t    ba-rerecordable=\"{{rerecordable}}\"\n\t\t    ba-submittable=\"{{submittable}}\"\n            ba-source=\"{{source}}\"\n\t\t\tba-disablepause=\"{{disablepause}}\"\n\t\t\tba-disableseeking=\"{{disableseeking}}\"\n\t\t\tba-skipseconds=\"{{skipseconds}}\"\n\t\t></ba-{{dyncontrolbar}}>\n\n\t\t<ba-{{dynloader}}\n\t\t    ba-css=\"{{cssloader || css}}\"\n\t\t\tba-cssplayer=\"{{cssplayer || css}}\"\n\t\t\tba-csscommon=\"{{csscommon || css}}\"\n\t\t\tba-theme-color=\"{{themecolor}}\"\n\t\t    ba-template=\"{{tmplloader}}\"\n\t\t\tba-playwhenvisible=\"{{playwhenvisible}}\"\n\t\t    ba-show=\"{{loader_active}}\"\n\t\t></ba-{{dynloader}}>\n\n\t\t<ba-{{dynmessage}}\n\t\t    ba-css=\"{{cssmessage || css}}\"\n\t\t\tba-cssplayer=\"{{cssplayer || css}}\"\n\t\t\tba-csscommon=\"{{csscommon || css}}\"\n\t\t\tba-theme-color=\"{{themecolor}}\"\n\t\t    ba-template=\"{{tmplmessage}}\"\n\t\t    ba-show=\"{{message_active}}\"\n\t\t    ba-message=\"{{message}}\"\n\t\t    ba-event:click=\"message_click\"\n\t\t></ba-{{dynmessage}}>\n\n\t\t<meta itemprop=\"caption\" content=\"{{title}}\" />\n\t\t<meta itemprop=\"contentUrl\" content=\"{{source}}\"/>\n    </div>\n</div>\n",

                attrs: {
                    /* CSS */
                    "css": "ba-audioplayer",
                    "csscommon": "ba-commoncss",
                    "cssplayer": "ba-player",
                    "iecss": "ba-audioplayer",
                    "cssloader": "",
                    "cssmessage": "",
                    "csscontrolbar": "",
                    "width": "",
                    "height": "",
                    /* Themes */
                    "theme": "",
                    "csstheme": "",
                    "themecolor": "",
                    /* Dynamics */
                    "dynloader": "audioplayer-loader",
                    "dynmessage": "audioplayer-message",
                    "dyncontrolbar": "audioplayer-controlbar",
                    /* Templates */
                    "tmplloader": "",
                    "tmplmessage": "",
                    "tmplcontrolbar": "",
                    /* Attributes */
                    "source": "",
                    "sources": [],
                    "sourcefilter": {},
                    "playlist": null,
                    "volume": 1.0,
                    "title": "",
                    "initialseek": null,
                    "visibilityfraction": 0.8,
                    "unmuted": false, // Reference to Chrome renewed policy, we have to setup mute for auto plyed players.

                    /* Configuration */
                    "forceflash": false,
                    "noflash": false,
                    "reloadonplay": false,
                    "playonclick": true,
                    /* Options */
                    "rerecordable": false,
                    "submittable": false,
                    "autoplay": false,
                    "preload": false,
                    "loop": false,
                    "ready": true,
                    "stretch": false,
                    "totalduration": null,
                    "playwhenvisible": false,
                    "playedonce": false,
                    "manuallypaused": false,
                    "disablepause": false,
                    "disableseeking": false,
                    "postervisible": false,
                    "visualeffectvisible": false,
                    "visualeffectsupported": false,
                    "visualeffectheight": 120,
                    "skipseconds": 5
                },

                types: {
                    "forceflash": "boolean",
                    "noflash": "boolean",
                    "rerecordable": "boolean",
                    "loop": "boolean",
                    "autoplay": "boolean",
                    "preload": "boolean",
                    "ready": "boolean",
                    "stretch": "boolean",
                    "volume": "float",
                    "initialseek": "float",
                    "themecolor": "string",
                    "totalduration": "float",
                    "playwhenvisible": "boolean",
                    "playedonce": "boolean",
                    "manuallypaused": "boolean",
                    "disablepause": "boolean",
                    "disableseeking": "boolean",
                    "playonclick": "boolean",
                    "skipseconds": "integer",
                    "visualeffectvisible": "boolean",
                    "visualeffectheight": "integer"
                },

                extendables: ["states"],

                computed: {
                    "widthHeightStyles:width,height": function() {
                        var result = {};
                        var width = this.get("width");
                        var height = this.get("height");
                        if (width)
                            result.width = width + ((width + '').match(/^\d+$/g) ? 'px' : '');
                        if (height)
                            result.height = height + ((height + '').match(/^\d+$/g) ? 'px' : '');
                        return result;
                    },
                    "buffering:buffered,position,last_position_change_delta,playing": function() {
                        return this.get("playing") && this.get("buffered") < this.get("position") && this.get("last_position_change_delta") > 1000;
                    }
                },

                events: {
                    "change:visualeffectsupported": function(value) {
                        if (!value) {
                            // If after checking we found that AudioAnalyzer not supported we should remove canvas
                            if (this.audioVisualisation) {
                                this.audioVisualisation.destroy();
                                this.audioVisualisation.canvas.remove();
                            }
                        }
                    }
                },

                remove_on_destroy: true,

                create: function() {
                    if (Info.isMobile() && (this.get("autoplay") || this.get("playwhenvisible"))) {
                        this.set("volume", 0.0);
                        if (!(Info.isiOS() && Info.iOSversion().major >= 10)) {
                            this.set("autoplay", false);
                            this.set("loop", false);
                        }
                    }

                    if (this.get("theme") in Assets.audioplayerthemes) {
                        Objs.iter(Assets.audioplayerthemes[this.get("theme")], function(value, key) {
                            if (!this.isArgumentAttr(key))
                                this.set(key, value);
                        }, this);
                    }

                    if (!this.get("themecolor"))
                        this.set("themecolor", "default");

                    if (this.get("playlist")) {
                        var pl0 = (this.get("playlist"))[0];
                        this.set("source", pl0.source);
                        this.set("sources", pl0.sources);
                    }

                    this.set("ie8", Info.isInternetExplorer() && Info.internetExplorerVersion() < 9);
                    this.set("duration", this.get("totalduration") || 0.0);
                    this.set("position", 0.0);
                    this.set("buffered", 0.0);
                    this.set("message", "");
                    this.set("csssize", "normal");

                    this.set("loader_active", false);
                    this.set("controlbar_active", false);
                    this.set("message_active", false);

                    this.set("playing", false);

                    this.__attachRequested = false;
                    this.__activated = false;
                    this.__error = null;

                    this.activeElement().onkeydown = this._keyDownActivity.bind(this, this.activeElement());

                    this.host = new Host({
                        stateRegistry: new ClassRegistry(this.cls.playerStates())
                    });
                    this.host.dynamic = this;
                    this.host.initialize(InitialState);

                    this._timer = new Timers.Timer({
                        context: this,
                        fire: this._timerFire,
                        delay: 100,
                        start: true
                    });
                },

                state: function() {
                    return this.host.state();
                },

                audioAttached: function() {
                    return !!this.player;
                },

                audioLoaded: function() {
                    return this.audioAttached() && this.player.loaded();
                },

                audioError: function() {
                    return this.__error;
                },

                _error: function(error_type, error_code) {
                    this.__error = {
                        error_type: error_type,
                        error_code: error_code
                    };
                    this.trigger("error:" + error_type, error_code);
                    this.trigger("error", error_type, error_code);
                },

                _clearError: function() {
                    this.__error = null;
                },

                _detachAudio: function() {
                    this.set("playing", false);
                    if (this.player)
                        this.player.weakDestroy();
                    this.player = null;
                    this.__audio = null;
                },

                _attachAudio: function() {
                    if (this.audioAttached())
                        return;
                    if (!this.__activated) {
                        this.__attachRequested = true;
                        return;
                    }
                    this.__attachRequested = false;
                    var audio = this.activeElement().querySelector("[data-audio='audio']");
                    this._clearError();
                    AudioPlayerWrapper.create(Objs.extend(this._getSources(), {
                        element: audio,
                        forceflash: !!this.get("forceflash"),
                        noflash: !!this.get("noflash"),
                        preload: !!this.get("preload"),
                        loop: !!this.get("loop"),
                        reloadonplay: this.get('playlist') ? true : !!this.get("reloadonplay")
                    })).error(function(e) {
                        if (this.destroyed())
                            return;
                        this._error("attach", e);
                    }, this).success(function(instance) {
                        if (this.destroyed())
                            return;

                        this.player = instance;
                        this.__audio = audio;
                        // Draw audio visualisation effect
                        if (this.get("visualeffectvisible") && AudioVisualisation.supported()) {
                            this.audioVisualisation = new AudioVisualisation(audio, {
                                height: this.get('visualeffectheight'),
                                element: this.activeElement()
                            });

                            // To be able set width of the canvas element
                            Async.eventually(function() {
                                try {
                                    this.audioVisualisation.initializeVisualEffect();
                                    this.set("visualeffectsupported", true);
                                } catch (e) {
                                    this.set("visualeffectsupported", false);
                                    console.warn(e);
                                }
                            }, this, 100);
                        }
                        if (this.get("playwhenvisible")) {
                            if (Info.isChromiumBased() && !this.get("unmuted")) {
                                audio.isMuted = true;
                                Dom.userInteraction(function() {
                                    audio.isMuted = false;
                                    this.set("unmuted", true);
                                    this._playWhenVisible(audio);
                                });
                            } else
                                this._playWhenVisible(audio);
                        }
                        this.player.on("playing", function() {
                            this.set("playing", true);
                            this.trigger("playing");
                        }, this);
                        this.player.on("error", function(e) {
                            this._error("audio", e);
                        }, this);
                        if (this.player.error())
                            this.player.trigger("error", this.player.error());
                        this.player.on("paused", function() {
                            this.set("playing", false);
                            this.trigger("paused");
                        }, this);
                        this.player.on("ended", function() {
                            this.set("playing", false);
                            this.set('playedonce', true);
                            this.trigger("ended");
                        }, this);
                        this.trigger("attached", instance);
                        this.player.once("loaded", function() {
                            var volume = Math.min(1.0, this.get("volume"));
                            this.player.setVolume(volume);
                            this.player.setMuted(volume <= 0.0);
                            this.trigger("loaded");
                            this.trigger("ready_to_play");
                            if (this.get("totalduration") || this.player.duration() < Infinity)
                                this.set("duration", this.get("totalduration") || this.player.duration());
                            if (this.get("initialseek"))
                                this.player.setPosition(this.get("initialseek"));
                        }, this);
                        if (this.player.loaded())
                            this.player.trigger("loaded");
                    }, this);
                },

                _getSources: function() {
                    var filter = this.get("sourcefilter");
                    var source = this.get("source");
                    var sources = filter ? Objs.filter(this.get("sources"), function(source) {
                        return Objs.subset_of(filter, source);
                    }, this) : this.get("sources");
                    return {
                        source: source,
                        sources: sources
                    };
                },

                _afterActivate: function(element) {
                    inherited._afterActivate.call(this, element);
                    this.__activated = true;
                    if (this.__attachRequested)
                        this._attachAudio();
                },

                _playWhenVisible: function(audio) {
                    var _self = this;

                    if (Dom.isElementVisible(audio, this.get("visibilityfraction"))) {
                        this.player.play();
                    }

                    this._visiblityScrollEvent = this.auto_destroy(new DomEvents());
                    this._visiblityScrollEvent.on(document, "scroll", function() {
                        if (!_self.get('playedonce') && !_self.get("manuallypaused")) {
                            if (Dom.isElementVisible(audio, _self.get("visibilityfraction"))) {
                                _self.player.play();
                            } else if (_self.get("playing")) {
                                _self.player.pause();
                            }
                        } else if (_self.get("playing") && !Dom.isElementVisible(audio, _self.get("visibilityfraction"))) {
                            _self.player.pause();
                        }
                    });

                },

                reattachAudio: function() {
                    this.set("reloadonplay", true);
                    this._detachAudio();
                    this._attachAudio();
                },

                _keyDownActivity: function(element, ev) {
                    var _keyCode = ev.which || ev.keyCode;
                    // Prevent whitespace browser center scroll and arrow buttons behaviours
                    if (_keyCode === 32 || _keyCode === 37 || _keyCode === 38 || _keyCode === 39 || _keyCode === 40) ev.preventDefault();


                    if (_keyCode === 9 && ev.shiftKey) {
                        this._findNextTabStop(element, ev, function(target, index) {
                            target.focus();
                        }, -1);
                    } else if (_keyCode === 9) {
                        this._findNextTabStop(element, ev, function(target, index) {
                            target.focus();
                        });
                    }
                },

                _findNextTabStop: function(parentElement, ev, callback, direction) {
                    var _currentIndex, _direction, _tabIndexes, _tabIndexesArray, _maxIndex, _minIndex, _looked, _tabIndex, _delta, _element, _audioPlayersCount;
                    _maxIndex = _minIndex = 0;
                    _direction = direction || 1;
                    _element = ev.target;
                    _currentIndex = _element.tabIndex;
                    _tabIndexes = parentElement.querySelectorAll('[tabindex]');
                    _tabIndexesArray = Array.prototype.slice.call(_tabIndexes, 0);
                    _tabIndexes = _tabIndexesArray
                        .filter(function(element) {
                            if ((element.clientWidth > 0 || element.clientHeight > 0) && (element.tabIndex !== -1)) {
                                if (_maxIndex <= element.tabIndex) _maxIndex = element.tabIndex;
                                if (_minIndex >= element.tabIndex) _minIndex = element.tabIndex;
                                return true;
                            } else return false;
                        });

                    if ((_direction === 1 && _currentIndex === _maxIndex) || (direction === -1 && _currentIndex === _minIndex) || _maxIndex === 0) {
                        _audioPlayersCount = document.querySelectorAll('ba-audioplayer').length;
                        if (_audioPlayersCount > 1) {
                            if (this.get("playing")) this.player.pause();
                            parentElement.tabIndex = -1;
                            parentElement.blur();
                        }
                        return;
                    }

                    for (var i = 0; i < _tabIndexes.length; i++) {
                        if (!_tabIndexes[i])
                            continue;
                        _tabIndex = _tabIndexes[i].tabIndex;
                        _delta = _tabIndex - _currentIndex;
                        if (_tabIndex < _minIndex || _tabIndex > _maxIndex || Math.sign(_delta) !== _direction)
                            continue;

                        if (!_looked || Math.abs(_delta) < Math.abs(_looked.tabIndex - _currentIndex))
                            _looked = _tabIndexes[i];
                    }

                    if (_looked) {
                        ev.preventDefault();
                        callback(_looked, _looked.tabIndex);
                    }
                },

                object_functions: ["play", "rerecord", "pause", "stop", "seek", "set_volume"],

                functions: {

                    message_click: function() {
                        this.trigger("message:click");
                    },

                    play: function() {
                        this.host.state().play();
                        // Draw visual effect
                        if (this.get('visualeffectsupported'))
                            this.audioVisualisation.renderFrame();
                    },

                    rerecord: function() {
                        if (!this.get("rerecordable"))
                            return;
                        this.trigger("rerecord");
                    },

                    submit: function() {
                        if (!this.get("submittable"))
                            return;
                        this.trigger("submit");
                        this.set("submittable", false);
                        this.set("rerecordable", false);
                    },

                    pause: function() {
                        if (this.get('disablepause')) return;

                        if (this.get("playing")) {
                            this.player.pause();
                        }

                        if (this.get("visualeffectsupported") && this.audioVisualisation) {
                            if (this.audioVisualisation.frameID)
                                this.audioVisualisation.cancelFrame(this.audioVisualisation.frameID);
                            else
                                this.set("visualeffectsupported", false);
                        }

                        if (this.get("playwhenvisible"))
                            this.set("manuallypaused", true);
                    },

                    stop: function() {
                        if (!this.audioLoaded())
                            return;
                        if (this.get("playing"))
                            this.player.pause();
                        this.player.setPosition(0);
                        this.trigger("stopped");
                    },

                    seek: function(position) {
                        if (this.get('disableseeking')) return;
                        if (this.audioLoaded()) {
                            if (position > this.player.duration())
                                this.player.setPosition(this.player.duration() - this.get("skipseconds"));
                            else {
                                this.player.setPosition(position);
                                this.trigger("seek", position);
                            }
                        }
                    },

                    set_volume: function(volume) {
                        volume = Math.min(1.0, volume);
                        volume = volume <= 0 ? 0 : volume; // Don't allow negative value

                        this.set("volume", volume);
                        if (this.audioLoaded()) {
                            this.player.setVolume(volume);
                            this.player.setMuted(volume <= 0);
                        }
                    },

                    tab_index_move: function(ev, nextSelector, focusingSelector) {
                        var _targetElement, _activeElement, _selector, _keyCode;
                        _keyCode = ev.which || ev.keyCode;
                        _activeElement = this.activeElement();
                        if (_keyCode === 13 || _keyCode === 32) {
                            if (focusingSelector) {
                                _selector = "[data-selector='" + focusingSelector + "']";
                                _targetElement = _activeElement.querySelector(_selector);
                                if (_targetElement)
                                    Async.eventually(function() {
                                        this.trigger("keyboardusecase", _activeElement);
                                        _targetElement.focus({
                                            preventScroll: false
                                        });
                                    }, this, 100);
                            } else {
                                _selector = '[data-audio="audio"]';
                                _targetElement = _activeElement.querySelector(_selector);
                                Async.eventually(function() {
                                    this.trigger("keyboardusecase", _activeElement);
                                    _targetElement.focus({
                                        preventScroll: true
                                    });
                                }, this, 100);
                            }
                        } else if (_keyCode === 9 && nextSelector) {
                            _selector = "[data-selector='" + nextSelector + "']";
                            _targetElement = _activeElement.querySelector(_selector);
                            if (_targetElement)
                                Async.eventually(function() {
                                    this.trigger("keyboardusecase", _activeElement);
                                    _targetElement.focus({
                                        preventScroll: false
                                    });
                                }, this, 100);

                        }
                    }
                },

                destroy: function() {
                    this._timer.destroy();
                    this.host.destroy();
                    this._detachAudio();
                    inherited.destroy.call(this);
                },

                _timerFire: function() {
                    if (this.destroyed())
                        return;
                    try {
                        if (this.audioLoaded()) {
                            var new_position = this.player.position();
                            if (new_position != this.get("position") || this.get("last_position_change"))
                                this.set("last_position_change", Time.now());
                            this.set("last_position_change_delta", Time.now() - this.get("last_position_change"));
                            this.set("position", new_position);
                            this.set("buffered", this.player.buffered());
                            var pld = this.player.duration();
                            if (0.0 < pld && pld < Infinity)
                                this.set("duration", this.player.duration());
                            else
                                this.set("duration", this.get("totalduration") || new_position);
                        }
                    } catch (e) {}
                    try {
                        this._updateCSSSize();
                    } catch (e) {}
                },

                _updateCSSSize: function() {
                    var width = Dom.elementDimensions(this.activeElement()).width;
                    this.set("csssize", width > 400 ? "normal" : (width > 300 ? "medium" : "small"));
                },

                cloneAttrs: function() {
                    return Objs.map(this.attrs, function(value, key) {
                        return this.get(key);
                    }, this);
                }

            };
        }, {

            playerStates: function() {
                return [PlayerStates];
            }

        }).register("ba-audioplayer")
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "cssplayer": function (obj) { with (obj) { return cssplayer; } }, "csssize": function (obj) { with (obj) { return csssize; } }, "iecss": function (obj) { with (obj) { return iecss; } }, "ie8 ? 'ie8' : 'noie8'": function (obj) { with (obj) { return ie8 ? 'ie8' : 'noie8'; } }, "csstheme": function (obj) { with (obj) { return csstheme; } }, "themecolor": function (obj) { with (obj) { return themecolor; } }, "stretch ? css + '-stretch' : ''": function (obj) { with (obj) { return stretch ? css + '-stretch' : ''; } }, "title ? 'has-title' : 'no-title'": function (obj) { with (obj) { return title ? 'has-title' : 'no-title'; } }, "visualeffectvisible ? cssplayer + '-visual-effect-applied' : ''": function (obj) { with (obj) { return visualeffectvisible ? cssplayer + '-visual-effect-applied' : ''; } }, "widthHeightStyles": function (obj) { with (obj) { return widthHeightStyles; } }, "seek(position + skipseconds)": function (obj) { with (obj) { return seek(position + skipseconds); } }, "seek(position - skipseconds)": function (obj) { with (obj) { return seek(position - skipseconds); } }, "seek(position + skipseconds * 3)": function (obj) { with (obj) { return seek(position + skipseconds * 3); } }, "seek(position - skipseconds * 3)": function (obj) { with (obj) { return seek(position - skipseconds * 3); } }, "set_volume(volume + 0.1)": function (obj) { with (obj) { return set_volume(volume + 0.1); } }, "set_volume(volume - 0.1)": function (obj) { with (obj) { return set_volume(volume - 0.1); } }, "dyncontrolbar": function (obj) { with (obj) { return dyncontrolbar; } }, "csscontrolbar || css": function (obj) { with (obj) { return csscontrolbar || css; } }, "cssplayer || css": function (obj) { with (obj) { return cssplayer || css; } }, "csscommon || css": function (obj) { with (obj) { return csscommon || css; } }, "csstheme || css": function (obj) { with (obj) { return csstheme || css; } }, "tmplcontrolbar": function (obj) { with (obj) { return tmplcontrolbar; } }, "controlbar_active": function (obj) { with (obj) { return controlbar_active; } }, "playing": function (obj) { with (obj) { return playing; } }, "playwhenvisible": function (obj) { with (obj) { return playwhenvisible; } }, "tabindex": function (obj) { with (obj) { return tabindex; } }, "volume": function (obj) { with (obj) { return volume; } }, "duration": function (obj) { with (obj) { return duration; } }, "buffered": function (obj) { with (obj) { return buffered; } }, "title": function (obj) { with (obj) { return title; } }, "position": function (obj) { with (obj) { return position; } }, "rerecordable": function (obj) { with (obj) { return rerecordable; } }, "submittable": function (obj) { with (obj) { return submittable; } }, "source": function (obj) { with (obj) { return source; } }, "disablepause": function (obj) { with (obj) { return disablepause; } }, "disableseeking": function (obj) { with (obj) { return disableseeking; } }, "skipseconds": function (obj) { with (obj) { return skipseconds; } }, "dynloader": function (obj) { with (obj) { return dynloader; } }, "cssloader || css": function (obj) { with (obj) { return cssloader || css; } }, "tmplloader": function (obj) { with (obj) { return tmplloader; } }, "loader_active": function (obj) { with (obj) { return loader_active; } }, "dynmessage": function (obj) { with (obj) { return dynmessage; } }, "cssmessage || css": function (obj) { with (obj) { return cssmessage || css; } }, "tmplmessage": function (obj) { with (obj) { return tmplmessage; } }, "message_active": function (obj) { with (obj) { return message_active; } }, "message": function (obj) { with (obj) { return message; } }/**/ })
        .attachStringTable(Assets.strings)
        .addStrings({
            "audio-error": "An error occurred, please try again later. Click to retry."
        });
});
Scoped.define("module:AudioPlayer.Dynamics.PlayerStates.State", [
    "base:States.State",
    "base:Events.ListenMixin",
    "base:Objs"
], function(State, ListenMixin, Objs, scoped) {
    return State.extend({
        scoped: scoped
    }, [ListenMixin, {

        dynamics: [],

        _start: function() {
            this.dyn = this.host.dynamic;
            Objs.iter(Objs.extend({
                "loader": false,
                "message": false,
                "controlbar": false
            }, Objs.objectify(this.dynamics)), function(value, key) {
                this.dyn.set(key + "_active", value);
            }, this);
            this._started();
        },

        _started: function() {},

        play: function() {
            this.dyn.set("autoplay", true);
        }

    }]);
});


Scoped.define("module:AudioPlayer.Dynamics.PlayerStates.FatalError", [
    "module:AudioPlayer.Dynamics.PlayerStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["message"],
        _locals: ["message"],

        _started: function() {
            this.dyn.set("message", this._message || this.dyn.string("audio-error"));
        }

    });
});


Scoped.define("module:AudioPlayer.Dynamics.PlayerStates.Initial", [
    "module:AudioPlayer.Dynamics.PlayerStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader"],

        _started: function() {
            if (this.dyn.get("ready"))
                this.next("LoadPlayer");
            else {
                this.listenOn(this.dyn, "change:ready", function() {
                    this.next("LoadPlayer");
                });
            }
        }
    });
});


Scoped.define("module:AudioPlayer.Dynamics.PlayerStates.LoadPlayer", [
    "module:AudioPlayer.Dynamics.PlayerStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader"],

        _started: function() {
            this.listenOn(this.dyn, "error:attach", function() {
                this.next("LoadError");
            }, this);
            this.listenOn(this.dyn, "attached", function() {
                this.next("LoadAudio");
            }, this);
            this.dyn.reattachAudio();
        }

    });
});



Scoped.define("module:AudioPlayer.Dynamics.PlayerStates.LoadError", [
    "module:AudioPlayer.Dynamics.PlayerStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["message"],

        _started: function() {
            this.dyn.set("message", this.dyn.string("audio-error"));
            this.listenOn(this.dyn, "message:click", function() {
                this.next("LoadPlayer");
            }, this);
        }

    });
});





Scoped.define("module:AudioPlayer.Dynamics.PlayerStates.LoadAudio", [
    "module:AudioPlayer.Dynamics.PlayerStates.State",
    "browser:Info",
    "browser:Dom",
    "base:Timers.Timer"
], function(State, Info, Dom, Timer, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader"],

        _started: function() {
            this.listenOn(this.dyn, "error:audio", function() {
                this.next("ErrorAudio");
            }, this);
            this.listenOn(this.dyn, "playing", function() {
                if (this.destroyed() || this.dyn.destroyed())
                    return;
                if (this.dyn.get("autoseek"))
                    this.dyn.execute("seek", this.dyn.get("autoseek"));
                this.next("PlayAudio");
            }, this);
            if (!this.dyn.get("autoplay"))
                this.next("PlayAudio");
            else {
                // Mute audio to reference Chrome policy changes after October 2018
                if (Info.isChromiumBased) {
                    var audio = this.dyn.__audio;
                    audio.isMuted = true;
                    Dom.userInteraction(function() {
                        audio.isMuted = false;
                        this._runTimer();
                    }, this);
                } else {
                    this._runTimer();
                }
            }
        },

        _runTimer: function() {
            var counter = 10;
            this.auto_destroy(new Timer({
                context: this,
                fire: function() {
                    if (!this.destroyed() && !this.dyn.destroyed() && this.dyn.player)
                        this.dyn.player.play();
                    counter--;
                    if (counter === 0)
                        this.next("PlayAudio");
                },
                delay: 200,
                immediate: true
            }));
        }

    });
});



Scoped.define("module:AudioPlayer.Dynamics.PlayerStates.ErrorAudio", [
    "module:AudioPlayer.Dynamics.PlayerStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["message"],

        _started: function() {
            this.dyn.set("message", this.dyn.string("audio-error"));
            this.listenOn(this.dyn, "message:click", function() {
                this.next("LoadAudio");
            }, this);
        }

    });
});




Scoped.define("module:AudioPlayer.Dynamics.PlayerStates.PlayAudio", [
    "module:AudioPlayer.Dynamics.PlayerStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["controlbar"],

        _started: function() {
            this.dyn.set("autoplay", false);
            this.listenOn(this.dyn, "ended", function() {
                this.dyn.set("autoseek", null);
                this.next("NextAudio");
            }, this);
            this.listenOn(this.dyn, "change:buffering", function() {
                this.dyn.set("loader_active", this.dyn.get("buffering"));
            }, this);
            this.listenOn(this.dyn, "error:audio", function() {
                this.next("ErrorAudio");
            }, this);
        },

        play: function() {
            if (!this.dyn.get("playing"))
                this.dyn.player.play();
        }

    });
});


Scoped.define("module:AudioPlayer.Dynamics.PlayerStates.NextAudio", [
    "module:AudioPlayer.Dynamics.PlayerStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        _started: function() {
            if (this.dyn.get("playlist")) {
                var list = this.dyn.get("playlist");
                var head = list.shift();
                if (this.dyn.get("loop"))
                    list.push(head);
                this.dyn.set("playlist", list);
                if (list.length > 0) {
                    var pl0 = list[0];
                    this.dyn.set("source", pl0.source);
                    this.dyn.set("sources", pl0.sources);
                    this.dyn.trigger("playlist-next", pl0);
                    this.dyn.reattachAudio();
                    this.dyn.set("autoplay", true);
                    this.next("LoadPlayer");
                    return;
                }
            }
            this.next("LoadPlayer");
        }

    });
});
Scoped.define("module:AudioRecorder.Dynamics.Chooser", [
    "dynamics:Dynamic",
    "module:Assets",
    "browser:Info"
], [
    "dynamics:Partials.ClickPartial",
    "dynamics:Partials.IfPartial"
], function(Class, Assets, Info, scoped) {

    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "<div class=\"{{css}}-chooser-container\">\n\t<div class=\"{{css}}-chooser-button-container\">\n\t\t<div ba-repeat=\"{{action :: actions}}\">\n\t\t\t<div ba-hotkey:space^enter=\"{{click_action(action)}}\" onmouseout=\"this.blur()\"\n\t\t\t\t tabindex=\"0\" class=\"{{css}}-chooser-button-{{action.index}}\"\n\t\t\t     ba-click=\"{{click_action(action)}}\"\n\t\t\t>\n\t\t\t\t<input ba-if=\"{{action.select && action.capture}}\"\n\t\t\t\t\t   type=\"file\"\n\t\t\t\t\t   class=\"{{css}}-chooser-file\"\n\t\t\t\t\t   onchange=\"{{select_file_action(action, domEvent)}}\"\n\t\t\t\t\t   accept=\"{{action.accept}}\"\n\t\t\t\t\t   capture />\n\t\t\t\t<input ba-if=\"{{action.select && !action.capture}}\"\n\t\t\t\t\t   type=\"file\"\n\t\t\t\t\t   class=\"{{css}}-chooser-file\"\n\t\t\t\t\t   onchange=\"{{select_file_action(action, domEvent)}}\"\n\t\t\t\t\t   accept=\"{{action.accept}}\"\n\t\t\t\t\t   />\n\t\t\t\t<i class=\"{{csscommon}}-icon-{{action.icon}}\"\n\t\t\t\t   ba-if=\"{{action.icon}}\"></i>\n\t\t\t\t<span>\n\t\t\t\t\t{{action.label}}\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n",

                attrs: {
                    "css": "ba-audiorecorder",
                    "cssrecorder": "ba-recorder",
                    "allowrecord": true,
                    "allowupload": true,

                    "primaryrecord": true,
                    "recordviafilecapture": false,

                    "allowcustomupload": true,
                    "allowedextensions": null

                },

                types: {
                    "allowedextensions": "array",
                    "recordviafilecapture": "boolean"
                },

                collections: ["actions"],

                create: function() {
                    var custom_accept_string = "";
                    if (this.get("allowedextensions") && this.get("allowedextensions").length > 0) {
                        var browser_support = Info.isEdge() || Info.isChrome() || Info.isOpera() || (Info.isFirefox() && Info.firefoxVersion() >= 42) || (Info.isInternetExplorer() && Info.internetExplorerVersion() >= 10);
                        if (browser_support)
                            custom_accept_string = "." + this.get("allowedextensions").join(",.");
                    } else if (!this.get("allowcustomupload")) {
                        custom_accept_string = "audio/*,audio/mp3";
                    }

                    var order = [];
                    if (this.get("primaryrecord")) {
                        if (this.get("allowrecord"))
                            order.push("record");
                        if (this.get("allowupload"))
                            order.push("upload");
                    } else {
                        if (this.get("allowupload"))
                            order.push("upload");
                        if (this.get("allowrecord"))
                            order.push("record");
                    }
                    var actions = this.get("actions");
                    order.forEach(function(act, index) {
                        switch (act) {
                            case "record":
                                actions.add({
                                    type: "record",
                                    index: index,
                                    icon: 'volume-up',
                                    label: this.string("record-audio"),
                                    select: Info.isMobile() && !(Info.isAndroid() && Info.isCordova()) && this.get("recordviafilecapture"),
                                    capture: true,
                                    accept: "audio/*,audio/mp3;capture=camcorder"
                                });
                                break;
                            case "upload":
                                actions.add({
                                    type: "upload",
                                    index: index,
                                    icon: "upload",
                                    label: this.string("upload-audio"),
                                    select: !(Info.isiOS() && Info.isCordova()),
                                    accept: Info.isMobile() && !(Info.isAndroid() && Info.isCordova()) ? "audio/*,audio/mp3" : custom_accept_string
                                });
                                break;
                        }
                    }, this);
                },

                functions: {

                    click_action: function(action) {
                        if (action.get("select"))
                            return;
                        if (Info.isMobile() && Info.isCordova()) {
                            var self = this;
                            if (Info.isAndroid()) {
                                navigator.device.capture.captureAudio(function(mediaFiles) {
                                    self.trigger("upload", mediaFiles[0]);
                                }, function(error) {}, {
                                    limit: 1,
                                    duration: this.get("timelimit")
                                });
                            } else if (Info.isiOS()) {
                                navigator.camera.getPicture(function(url) {
                                    self.trigger("upload", {
                                        localURL: url,
                                        fullPath: url
                                    });
                                }, function(error) {}, {
                                    destinationType: Camera.DestinationType.FILE_URI,
                                    sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                                    mediaType: Camera.MediaType.AUDIO
                                });
                            }
                        } else
                            this.trigger("record");
                    },

                    select_file_action: function(action, domEvent) {
                        if (!action.get("select"))
                            return;
                        this.trigger("upload", domEvent[0].target);
                    }

                }

            };
        })
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "actions": function (obj) { with (obj) { return actions; } }, "click_action(action)": function (obj) { with (obj) { return click_action(action); } }, "action.index": function (obj) { with (obj) { return action.index; } }, "action.select && action.capture": function (obj) { with (obj) { return action.select && action.capture; } }, "select_file_action(action, domEvent)": function (obj) { with (obj) { return select_file_action(action, domEvent); } }, "action.accept": function (obj) { with (obj) { return action.accept; } }, "action.select && !action.capture": function (obj) { with (obj) { return action.select && !action.capture; } }, "csscommon": function (obj) { with (obj) { return csscommon; } }, "action.icon": function (obj) { with (obj) { return action.icon; } }, "action.label": function (obj) { with (obj) { return action.label; } }/**/ })
        .register("ba-audiorecorder-chooser")
        .attachStringTable(Assets.strings)
        .addStrings({
            "record-audio": "Record Audio",
            "upload-audio": "Upload Audio"
        });
});
Scoped.define("module:AudioRecorder.Dynamics.Controlbar", [
    "dynamics:Dynamic",
    "module:Assets",
    "base:Timers.Timer"
], [
    "dynamics:Partials.ShowPartial",
    "dynamics:Partials.RepeatPartial"
], function(Class, Assets, Timer, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "<div class=\"{{css}}-dashboard\">\n\t<div class=\"{{css}}-backbar\"></div>\n\t<div data-selector=\"recorder-settings\" class=\"{{css}}-settings\" ba-show=\"{{settingsvisible && settingsopen}}\">\n\t\t<div class=\"{{css}}-settings-backbar\"></div>\n\t\t<div data-selector=\"settings-list-front\" class=\"{{css}}-settings-front\">\n\t\t\t<ul data-selector=\"microphone-settings\" ba-repeat=\"{{microphone :: microphones}}\">\n\t\t\t\t<li tabindex=\"0\"\n\t\t\t\t\tba-hotkey:space^enter=\"{{selectMicrophone(microphone.id)}}\" onmouseout=\"this.blur()\"\n\t\t\t\t\tonclick=\"{{selectMicrophone(microphone.id)}}\"\n\t\t\t\t>\n\t\t\t\t\t<input type='radio' name='microphone' value=\"{{selectedmicrophone == microphone.id}}\" />\n\t\t\t\t\t<span></span>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t{{microphone.label}}\n\t\t\t\t\t</label>\n\t\t\t\t </li>\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n\t<div data-selector=\"controlbar\" class=\"{{css}}-controlbar\">\n\n        <div class=\"{{css}}-leftbutton-container\" ba-show=\"{{settingsvisible}}\">\n            <div tabindex=\"0\"\n\t\t\t\t ba-hotkey:space^enter=\"{{settingsopen=!settingsopen}}\" onmouseout=\"this.blur()\"\n\t\t\t\t data-selector=\"record-button-icon-cog\" class=\"{{css}}-button-inner {{css}}-button-{{settingsopen ? 'selected' : 'unselected'}}\"\n                 onclick=\"{{settingsopen=!settingsopen}}\"\n                 onmouseenter=\"{{hover(string('settings'))}}\"\n                 onmouseleave=\"{{unhover()}}\"\n\t\t\t>\n                <i class=\"{{csscommon}}-icon-cog\"></i>\n            </div>\n        </div>\n\n        <div class=\"{{css}}-lefticon-container\" ba-show=\"{{settingsvisible}}\">\n            <div data-selector=\"record-button-icon-mic\" class=\"{{csscommon}}-icon-inner\"\n                 onmouseenter=\"{{hover(string(microphonehealthy ? 'microphonehealthy' : 'microphoneunhealthy'))}}\"\n                 onmouseleave=\"{{unhover()}}\"\n\t\t\t>\n                <i class=\"{{csscommon}}-icon-mic {{csscommon}}-icon-state-{{microphonehealthy ? 'good' : 'bad' }}\"></i>\n            </div>\n        </div>\n\n        <div class=\"{{css}}-lefticon-container\" ba-show=\"{{stopvisible && recordingindication}}\">\n            <div data-selector=\"recording-indicator\" class=\"{{css}}-recording-indication\">\n            </div>\n        </div>\n\n        <div class=\"{{css}}-label-container\" ba-show=\"{{controlbarlabel}}\">\n        \t<div data-selector=\"record-label-block\" class=\"{{css}}-label-label\">\n        \t\t{{controlbarlabel}}\n        \t</div>\n        </div>\n\n        <div class=\"{{css}}-rightbutton-container\" ba-show=\"{{recordvisible}}\">\n        \t<div tabindex=\"0\"\n\t\t\t\t ba-hotkey:space^enter=\"{{record()}}\" onmouseout=\"this.blur()\"\n\t\t\t\t data-selector=\"record-primary-button\" class=\"{{css}}-button-primary\"\n                 onclick=\"{{record()}}\"\n                 onmouseenter=\"{{hover(string('record-tooltip'))}}\"\n                 onmouseleave=\"{{unhover()}}\"\n\t\t\t>\n        \t\t{{string('record')}}\n        \t</div>\n        </div>\n\n        <div class=\"{{css}}-rightbutton-container\" ba-show=\"{{rerecordvisible}}\">\n        \t<div tabindex=\"0\"\n\t\t\t\t ba-hotkey:space^enter=\"{{rerecord()}}\" onmouseout=\"this.blur()\"\n\t\t\t\t data-selector=\"rerecord-primary-button\" class=\"{{css}}-button-primary\"\n                 onclick=\"{{rerecord()}}\"\n                 onmouseenter=\"{{hover(string('rerecord-tooltip'))}}\"\n                 onmouseleave=\"{{unhover()}}\"\n\t\t\t>\n        \t\t{{string('rerecord')}}\n        \t</div>\n        </div>\n\n\t\t<div class=\"{{css}}-rightbutton-container\" ba-show=\"{{cancelvisible}}\">\n\t\t\t<div tabindex=\"0\"\n\t\t\t\t ba-hotkey:space^enter=\"{{cancel()}}\" onmouseout=\"this.blur()\"\n\t\t\t\t data-selector=\"cancel-primary-button\" class=\"{{css}}-button-primary\"\n\t\t\t\t onclick=\"{{cancel()}}\"\n\t\t\t\t onmouseenter=\"{{hover(string('cancel-tooltip'))}}\"\n\t\t\t\t onmouseleave=\"{{unhover()}}\"\n\t\t\t>\n\t\t\t\t{{string('cancel')}}\n\t\t\t</div>\n\t\t</div>\n\n        <div class=\"{{css}}-rightbutton-container\" ba-show=\"{{stopvisible}}\">\n        \t<div tabindex=\"0\"\n\t\t\t\t ba-hotkey:space^enter=\"{{stop()}}\" onmouseout=\"this.blur()\"\n\t\t\t\t data-selector=\"stop-primary-button\" class=\"{{css}}-button-primary {{mintimeindicator ? css + '-disabled': ''}}\"\n\t\t\t\t title=\"{{mintimeindicator ? string('stop-available-after').replace('%d', timeminlimit) : string('stop-tooltip')}}\"\n                 onclick=\"{{stop()}}\"\n                 onmouseenter=\"{{hover( mintimeindicator ? string('stop-available-after').replace('%d', timeminlimit) : string('stop-tooltip'))}}\"\n                 onmouseleave=\"{{unhover()}}\"\n\t\t\t>\n        \t\t{{string('stop')}}\n        \t</div>\n        </div>\n\n\t</div>\n</div>\n",

                attrs: {
                    "css": "ba-audiorecorder",
                    "csscommon": "ba-commoncss",
                    "cssrecorder": "ba-recorder",
                    "hovermessage": "",
                    "recordingindication": true
                },

                create: function() {
                    this.auto_destroy(new Timer({
                        context: this,
                        fire: function() {
                            this.set("recordingindication", !this.get("recordingindication"));
                        },
                        delay: 500
                    }));
                },

                functions: {
                    selectMicrophone: function(microphoneId) {
                        this.trigger("select-microphone", microphoneId);
                    },
                    hover: function(text) {
                        this.set("hovermessage", text);
                    },
                    unhover: function() {
                        this.set("hovermessage", "");
                    },
                    record: function() {
                        this.trigger("invoke-record");
                    },
                    rerecord: function() {
                        this.trigger("invoke-rerecord");
                    },
                    stop: function() {
                        this.trigger("invoke-stop");
                    },
                    cancel: function() {
                        this.trigger("invoke-cancel");
                    }
                }

            };
        })
        .register("ba-audiorecorder-controlbar")
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "settingsvisible && settingsopen": function (obj) { with (obj) { return settingsvisible && settingsopen; } }, "microphones": function (obj) { with (obj) { return microphones; } }, "selectMicrophone(microphone.id)": function (obj) { with (obj) { return selectMicrophone(microphone.id); } }, "selectedmicrophone == microphone.id": function (obj) { with (obj) { return selectedmicrophone == microphone.id; } }, "microphone.label": function (obj) { with (obj) { return microphone.label; } }, "settingsvisible": function (obj) { with (obj) { return settingsvisible; } }, "settingsopen=!settingsopen": function (obj) { with (obj) { return settingsopen=!settingsopen; } }, "settingsopen ? 'selected' : 'unselected'": function (obj) { with (obj) { return settingsopen ? 'selected' : 'unselected'; } }, "hover(string('settings'))": function (obj) { with (obj) { return hover(string('settings')); } }, "unhover()": function (obj) { with (obj) { return unhover(); } }, "csscommon": function (obj) { with (obj) { return csscommon; } }, "hover(string(microphonehealthy ? 'microphonehealthy' : 'microphoneunhealthy'))": function (obj) { with (obj) { return hover(string(microphonehealthy ? 'microphonehealthy' : 'microphoneunhealthy')); } }, "microphonehealthy ? 'good' : 'bad'": function (obj) { with (obj) { return microphonehealthy ? 'good' : 'bad'; } }, "stopvisible && recordingindication": function (obj) { with (obj) { return stopvisible && recordingindication; } }, "controlbarlabel": function (obj) { with (obj) { return controlbarlabel; } }, "recordvisible": function (obj) { with (obj) { return recordvisible; } }, "record()": function (obj) { with (obj) { return record(); } }, "hover(string('record-tooltip'))": function (obj) { with (obj) { return hover(string('record-tooltip')); } }, "string('record')": function (obj) { with (obj) { return string('record'); } }, "rerecordvisible": function (obj) { with (obj) { return rerecordvisible; } }, "rerecord()": function (obj) { with (obj) { return rerecord(); } }, "hover(string('rerecord-tooltip'))": function (obj) { with (obj) { return hover(string('rerecord-tooltip')); } }, "string('rerecord')": function (obj) { with (obj) { return string('rerecord'); } }, "cancelvisible": function (obj) { with (obj) { return cancelvisible; } }, "cancel()": function (obj) { with (obj) { return cancel(); } }, "hover(string('cancel-tooltip'))": function (obj) { with (obj) { return hover(string('cancel-tooltip')); } }, "string('cancel')": function (obj) { with (obj) { return string('cancel'); } }, "stopvisible": function (obj) { with (obj) { return stopvisible; } }, "stop()": function (obj) { with (obj) { return stop(); } }, "mintimeindicator ? css + '-disabled': ''": function (obj) { with (obj) { return mintimeindicator ? css + '-disabled': ''; } }, "mintimeindicator ? string('stop-available-after').replace('%d', timeminlimit) : string('stop-tooltip')": function (obj) { with (obj) { return mintimeindicator ? string('stop-available-after').replace('%d', timeminlimit) : string('stop-tooltip'); } }, "hover( mintimeindicator ? string('stop-available-after').replace('%d', timeminlimit) : string('stop-tooltip'))": function (obj) { with (obj) { return hover( mintimeindicator ? string('stop-available-after').replace('%d', timeminlimit) : string('stop-tooltip')); } }, "string('stop')": function (obj) { with (obj) { return string('stop'); } }/**/ })
        .attachStringTable(Assets.strings)
        .addStrings({
            "settings": "Settings",
            "microphonehealthy": "Sound is good",
            "microphoneunhealthy": "Cannot pick up any sound",
            "record": "Record",
            "record-tooltip": "Click here to record.",
            "rerecord": "Redo",
            "rerecord-tooltip": "Click here to redo.",
            "stop": "Stop",
            "stop-tooltip": "Click here to stop.",
            "stop-available-after": "Minimum recording time is %d seconds",
            "cancel": "Cancel",
            "cancel-tooltip": "Click here to cancel."
        });
});
Scoped.define("module:AudioRecorder.Dynamics.Loader", [
    "dynamics:Dynamic",
    "module:Assets"
], [
    "dynamics:Partials.ShowPartial"
], function(Class, Assets, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div class=\"{{cssrecorder}}-loader-container\">\n    <div data-selector=\"recorder-loader-block\" class=\"{{cssrecorder}}-loader-loader\" title=\"{{tooltip || ''}}\">\n    </div>\n</div>\n<div data-selector=\"recorder-loader-label-container\" class=\"{{cssrecorder}}-loader-label\" ba-show=\"{{label}}\">\n\t{{label}}\n</div>\n",

                attrs: {
                    "css": "ba-audiorecorder",
                    "tooltip": "",
                    "label": "",
                    "message": "",
                    "hovermessage": ""
                }

            };
        })
        .registerFunctions({ /**/"cssrecorder": function (obj) { with (obj) { return cssrecorder; } }, "tooltip || ''": function (obj) { with (obj) { return tooltip || ''; } }, "label": function (obj) { with (obj) { return label; } }/**/ })
        .register("ba-audiorecorder-loader")
        .attachStringTable(Assets.strings)
        .addStrings({});
});
Scoped.define("module:AudioRecorder.Dynamics.Message", [
    "dynamics:Dynamic"
], [
    "dynamics:Partials.ClickPartial"
], function(Class, Templates, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div data-selector=\"recorder-message-container\" class=\"{{css}}-message-container\" ba-click=\"{{click()}}\">\n    <div data-selector=\"recorder-message-block\" class='{{css}}-message-message'>\n        <p>\n            {{message || \"\"}}\n        </p>\n        <ul ba-if=\"{{links && links.length > 0}}\" ba-repeat=\"{{link :: links}}\">\n            <li>\n                <a href=\"javascript:;\" ba-click=\"{{linkClick(link)}}\">\n                    {{link.title}}\n                </a>\n            </li>\n        </ul>\n    </div>\n</div>\n",

                attrs: {
                    "css": "ba-audiorecorder",
                    "message": '',
                    "links": null
                },

                functions: {

                    click: function() {
                        this.trigger("click");
                    },

                    linkClick: function(link) {
                        this.trigger("link", link);
                    }

                }

            };
        })
        .registerFunctions({ /**/"css": function (obj) { with (obj) { return css; } }, "click()": function (obj) { with (obj) { return click(); } }, "message || \"\"": function (obj) { with (obj) { return message || ""; } }, "links && links.length > 0": function (obj) { with (obj) { return links && links.length > 0; } }, "links": function (obj) { with (obj) { return links; } }, "linkClick(link)": function (obj) { with (obj) { return linkClick(link); } }, "link.title": function (obj) { with (obj) { return link.title; } }/**/ })
        .register("ba-audiorecorder-message");
});
Scoped.define("module:AudioRecorder.Dynamics.Recorder", [
    "dynamics:Dynamic",
    "module:Assets",
    "module:AudioVisualisation",
    "browser:Info",
    "browser:Dom",
    "browser:Upload.MultiUploader",
    "browser:Upload.FileUploader",
    "media:AudioRecorder.AudioRecorderWrapper",
    "media:WebRTC.Support",
    "base:Types",
    "base:Objs",
    "base:Strings",
    "base:Time",
    "base:Timers",
    "base:States.Host",
    "base:Classes.ClassRegistry",
    "base:Collections.Collection",
    "base:Promise",
    "module:AudioRecorder.Dynamics.RecorderStates.Initial",
    "module:AudioRecorder.Dynamics.RecorderStates"
], [
    "module:AudioRecorder.Dynamics.Loader",
    "module:AudioRecorder.Dynamics.Controlbar",
    "module:AudioRecorder.Dynamics.Message",
    "module:AudioRecorder.Dynamics.Chooser",
    "dynamics:Partials.ShowPartial",
    "dynamics:Partials.IfPartial",
    "dynamics:Partials.EventPartial",
    "dynamics:Partials.OnPartial",
    "dynamics:Partials.DataPartial",
    "dynamics:Partials.AttrsPartial",
    "dynamics:Partials.StylesPartial",
    "dynamics:Partials.TemplatePartial",
    "dynamics:Partials.HotkeyPartial"
], function(Class, Assets, AudioVisualisation, Info, Dom, MultiUploader, FileUploader, AudioRecorderWrapper, WebRTCSupport, Types, Objs, Strings, Time, Timers, Host, ClassRegistry, Collection, Promise, InitialState, RecorderStates, scoped) {
    return Class.extend({
            scoped: scoped
        }, function(inherited) {
            return {

                template: "\n<div data-selector=\"audio-recorder-container\" ba-show=\"{{!player_active}}\"\n     class=\"{{css}}-container {{csstheme}} {{css}}-size-{{csssize}} {{iecss}}-{{ie8 ? 'ie8' : 'noie8'}}\n     \t{{cssrecorder}}-{{ firefox ? 'firefox' : 'common'}}-browser {{cssaudio}}\n    \t{{cssrecorder}}-{{themecolor}}-color\"\n     ba-styles=\"{{widthHeightStyles}}\"\n>\n\n\t<canvas data-selector=\"visualisation-canvas\" class=\"{{css}}-visualisation-canvas\"></canvas>\n    <audio tabindex=\"-1\" data-selector=\"recorder-status\" class=\"{{css}}-audio {{css}}-{{hasrecorder ? 'hasrecorder' : 'norecorder'}}\" data-audio=\"audio\" playsinline></audio>\n    <div data-selector=\"audio-recorder-overlay\" class='{{cssrecorder}}-overlay' ba-show=\"{{!hideoverlay}}\" data-overlay=\"overlay\">\n\t\t<ba-{{dynloader}}\n\t\t    ba-css=\"{{cssloader || css}}\"\n\t\t\tba-themecolor=\"{{themecolor}}\"\n\t\t\tba-cssrecorder=\"{{cssrecorder || css}}\"\n\t\t\tba-cssrecorder=\"{{cssrecorder || css}}\"\n\t\t    ba-template=\"{{tmplloader}}\"\n\t\t    ba-show=\"{{loader_active}}\"\n\t\t    ba-tooltip=\"{{loadertooltip}}\"\n\t\t\tba-hovermessage=\"{{=hovermessage}}\"\n\t\t    ba-label=\"{{loaderlabel}}\"\n\t\t></ba-{{dynloader}}>\n\n\t\t<ba-{{dynmessage}}\n\t\t    ba-css=\"{{cssmessage || css}}\"\n\t\t\tba-themecolor=\"{{themecolor}}\"\n\t\t\tba-cssrecorder=\"{{cssrecorder || css}}\"\n\t\t    ba-template=\"{{tmplmessage}}\"\n\t\t    ba-show=\"{{message_active}}\"\n\t\t    ba-message=\"{{message}}\"\n\t\t\tba-links=\"{{message_links}}\"\n\t\t    ba-event:click=\"message_click\"\n\t\t\tba-event:link=\"message_link_click\"\n\t\t></ba-{{dynmessage}}>\n\n\t\t<ba-{{dynchooser}}\n\t\t\tba-recordviafilecapture=\"{{recordviafilecapture}}\"\n\t\t    ba-css=\"{{csschooser || css}}\"\n\t\t\tba-themecolor=\"{{themecolor}}\"\n\t\t\tba-cssrecorder=\"{{cssrecorder || css}}\"\n\t\t    ba-template=\"{{tmplchooser}}\"\n\t\t    ba-if=\"{{chooser_active && !is_initial_state}}\"\n\t\t    ba-allowrecord=\"{{allowrecord}}\"\n\t\t    ba-allowupload=\"{{allowupload}}\"\n\t\t    ba-allowcustomupload=\"{{allowcustomupload}}\"\n\t\t    ba-allowedextensions=\"{{allowedextensions}}\"\n\t\t    ba-primaryrecord=\"{{primaryrecord}}\"\n\t\t    ba-timelimit=\"{{timelimit}}\"\n\t\t    ba-event:record=\"record_audio\"\n\t\t    ba-event:upload=\"upload_audio\"\n\t\t></ba-{{dynchooser}}>\n\n\t\t<ba-{{dyncontrolbar}}\n\t\t    ba-css=\"{{csscontrolbar || css}}\"\n\t\t\tba-csstheme=\"{{csstheme || css}}\"\n\t\t\tba-themecolor=\"{{themecolor}}\"\n\t\t\tba-cssrecorder=\"{{cssrecorder || css}}\"\n\t\t    ba-template=\"{{tmplcontrolbar}}\"\n\t\t    ba-show=\"{{controlbar_active}}\"\n\t\t    ba-microphones=\"{{microphones}}\"\n\t\t    ba-selectedmicrophone=\"{{selectedmicrophone || 0}}\"\n\t\t    ba-microphonehealthy=\"{{microphonehealthy}}\"\n\t\t    ba-hovermessage=\"{{=hovermessage}}\"\n\t\t    ba-settingsvisible=\"{{settingsvisible}}\"\n\t\t    ba-recordvisible=\"{{recordvisible}}\"\n\t\t\tba-cancelvisible=\"{{allowcancel && cancancel}}\"\n\t\t    ba-rerecordvisible=\"{{rerecordvisible}}\"\n\t\t    ba-stopvisible=\"{{stopvisible}}\"\n\t\t    ba-controlbarlabel=\"{{controlbarlabel}}\"\n\t\t\tba-mintimeindicator=\"{{mintimeindicator}}\"\n\t\t\tba-timeminlimit=\"{{timeminlimit}}\"\n\t\t    ba-event:select-microphone=\"select_microphone\"\n\t\t    ba-event:invoke-record=\"record\"\n\t\t    ba-event:invoke-rerecord=\"rerecord\"\n\t\t    ba-event:invoke-stop=\"stop\"\n\t\t></ba-{{dyncontrolbar}}>\n    </div>\n</div>\n\n<div data-selector=\"recorder-player\" ba-if=\"{{player_active}}\" ba-styles=\"{{widthHeightStyles}}\">\n\t<span ba-show=\"{{ie8}}\">&nbsp;</span>\n\t<ba-{{dynaudioplayer}}\n\t    ba-theme=\"{{theme || 'default'}}\"\n        ba-themecolor=\"{{themecolor}}\"\n        ba-source=\"{{playbacksource}}\"\n        ba-hideoninactivity=\"{{false}}\"\n        ba-forceflash=\"{{forceflash}}\"\n        ba-noflash=\"{{noflash}}\"\n        ba-stretch=\"{{stretch}}\"\n        ba-attrs=\"{{playerattrs}}\"\n        ba-data:id=\"player\"\n        ba-width=\"{{width}}\"\n        ba-height=\"{{height}}\"\n        ba-totalduration=\"{{duration / 1000}}\"\n        ba-rerecordable=\"{{rerecordable && (recordings === null || recordings > 0)}}\"\n        ba-submittable=\"{{manualsubmit && verified}}\"\n        ba-reloadonplay=\"{{true}}\"\n        ba-autoplay=\"{{autoplay}}\"\n\t\tba-visualeffectvisible=\"{{visualeffectvisible}}\"\n\t\tba-event:loaded=\"ready_to_play\"\n        ba-event:rerecord=\"rerecord\"\n        ba-event:playing=\"playing\"\n        ba-event:paused=\"paused\"\n        ba-event:ended=\"ended\"\n        ba-event:submit=\"manual_submit\"\n\t>\n\t</ba-{{dynaudioplayer}}>\n</div>\n",

                attrs: {
                    /* CSS */
                    "css": "ba-videorecorder", // inherit from video recorder
                    "cssaudio": "ba-audiorecorder",
                    "cssrecorder": "ba-recorder",
                    "csscommon": "ba-commoncss",
                    "iecss": "ba-audiorecorder",
                    "cssimagegallery": "",
                    "cssloader": "",
                    "csscontrolbar": "",
                    "cssmessage": "",
                    "csstopmessage": "",
                    "csschooser": "",
                    "width": "",
                    "height": "",
                    "gallerysnapshots": 3,

                    /* Themes */
                    "theme": "",
                    "csstheme": "",

                    /* Dynamics */
                    "dynloader": "audiorecorder-loader",
                    "dyncontrolbar": "audiorecorder-controlbar",
                    "dynmessage": "audiorecorder-message",
                    "dynchooser": "audiorecorder-chooser",
                    "dynaudioplayer": "audioplayer",

                    /* Templates */
                    "tmplloader": "",
                    "tmplcontrolbar": "",
                    "tmplmessage": "",
                    "tmplchooser": "",

                    /* Attributes */
                    "autorecord": false,
                    "autoplay": false,
                    "allowrecord": true,
                    "allowupload": true,
                    "allowcustomupload": true,
                    "primaryrecord": true,
                    "countdown": 3,
                    "audiobitrate": null,
                    "playbacksource": "",
                    "recordermode": true,
                    "skipinitial": false,
                    "skipinitialonrerecord": false,
                    "timelimit": null,
                    "timeminlimit": null,
                    "rtmpmicrophonecodec": "speex",
                    "webrtcstreaming": false,
                    "webrtconmobile": false,
                    "webrtcstreamingifnecessary": false,
                    "microphone-volume": 1.0,
                    "early-rerecord": false,
                    "manualsubmit": false,
                    "allowedextensions": null,
                    "filesizelimit": null,
                    "display-timer": true,
                    "visualeffectvisible": true,
                    "visualeffectsupported": false,

                    /* Configuration */
                    "forceflash": false,
                    "simulate": false,
                    "noflash": false,
                    "flashincognitosupport": false,
                    "enforce-duration": null,
                    "localplayback": false,
                    "uploadoptions": {},
                    "playerattrs": {},
                    "shortMessage": true,

                    /* Options */
                    "rerecordable": true,
                    "allowcancel": false,
                    "recordings": null,
                    "ready": true,
                    "stretch": false,
                    "audio-test-mandatory": false

                },

                scopes: {
                    player: ">[id='player']"
                },

                computed: {
                    "widthHeightStyles:width,height": function() {
                        var result = {};
                        var width = this.get("width");
                        var height = this.get("height");
                        if (width)
                            result.width = width + ((width + '').match(/^\d+$/g) ? 'px' : '');
                        if (height)
                            result.height = height + ((height + '').match(/^\d+$/g) ? 'px' : '');
                        return result;
                    }
                },

                types: {
                    "forceflash": "boolean",
                    "noflash": "boolean",
                    "rerecordable": "boolean",
                    "ready": "boolean",
                    "stretch": "boolean",
                    "autorecord": "boolean",
                    "autoplay": "boolean",
                    "allowrecord": "boolean",
                    "allowupload": "boolean",
                    "allowcustomupload": "boolean",
                    "primaryrecord": "boolean",
                    "flashincognitosupport": "boolean",
                    "recordermode": "boolean",
                    "skipinitialonrerecord": "boolean",
                    "localplayback": "boolean",
                    "skipinitial": "boolean",
                    "enforce-duration": "bool",
                    "webrtcstreaming": "boolean",
                    "webrtconmobile": "boolean",
                    "webrtcstreamingifnecessary": "boolean",
                    "microphone-volume": "float",
                    "audiobitrate": "int",
                    "early-rerecord": "boolean",
                    "manualsubmit": "boolean",
                    "simulate": "boolean",
                    "allowedextensions": "array",
                    "allowcancel": "boolean",
                    "display-timer": "boolean",
                    "audio-test-mandatory": "boolean"
                },

                extendables: ["states"],

                remove_on_destroy: true,

                events: {
                    "change:microphonehealthy": function(value) {
                        this.trigger("microphonehealth", value);
                    },
                    "change:webrtconmobile": function() {
                        this.set("recordviafilecapture", Info.isMobile() && (!this.get("webrtconmobile") || !AudioRecorderWrapper.anySupport(this._audioRecorderWrapperOptions())));
                    },
                    "change:recordviafilecapture": function() {
                        if (this.get("recordviafilecapture")) {
                            this.set("skipinitial", false);
                            this.set("skipinitialonrerecord", false);
                            this.set("autorecord", false);
                        }
                    },
                    "change:visualeffectsupported": function(value) {
                        if (!value) {
                            // If after checking we found that AudioAnalyzer not supported we should remove canvas
                            if (this.audioVisualisation) {
                                if (this.audioVisualisation.canvas)
                                    this.audioVisualisation.canvas.remove();
                                this.audioVisualisation.destroy();
                            }
                        }
                    }
                },

                create: function() {
                    // Initialize AudioContext
                    WebRTCSupport.globals();
                    if (this.get("theme") in Assets.recorderthemes) {
                        Objs.iter(Assets.recorderthemes[this.get("theme")], function(value, key) {
                            if (!this.isArgumentAttr(key))
                                this.set(key, value);
                        }, this);
                    }
                    this.set("ie8", Info.isInternetExplorer() && Info.internetExplorerVersion() < 9);
                    this.set("hideoverlay", false);

                    this.set("recordviafilecapture", Info.isMobile() && (!this.get("webrtconmobile") || !AudioRecorderWrapper.anySupport(this._audioRecorderWrapperOptions())));

                    if (this.get("recordviafilecapture")) {
                        this.set("skipinitial", false);
                        this.set("skipinitialonrerecord", false);
                        this.set("autorecord", false);
                    }

                    this.__attachRequested = false;
                    this.__activated = false;
                    this._bound = false;
                    this.__recording = false;
                    this.__error = null;
                    this.__currentStretch = null;

                    this.on("change:stretch", function() {
                        this._updateStretch();
                    }, this);
                    this.host = new Host({
                        stateRegistry: new ClassRegistry(this.cls.recorderStates())
                    });
                    this.host.dynamic = this;
                    this.host.initialize(InitialState);

                    this._timer = new Timers.Timer({
                        context: this,
                        fire: this._timerFire,
                        delay: 250,
                        start: true
                    });
                },

                state: function() {
                    return this.host.state();
                },

                recorderAttached: function() {
                    return !!this.recorder;
                },

                audioError: function() {
                    return this.__error;
                },

                _error: function(error_type, error_code) {
                    this.__error = {
                        error_type: error_type,
                        error_code: error_code
                    };
                    this.trigger("error:" + error_type, error_code);
                    this.trigger("error", error_type, error_code);
                },

                _clearError: function() {
                    this.__error = null;
                },

                _detachRecorder: function() {
                    if (this.recorder)
                        this.recorder.weakDestroy();
                    this.recorder = null;
                    this.set("hasrecorder", false);
                },

                _audioRecorderWrapperOptions: function() {
                    return {
                        simulate: this.get("simulate"),
                        forceflash: this.get("forceflash"),
                        noflash: this.get("noflash"),
                        audioBitrate: this.get("audiobitrate"),
                        flashFullSecurityDialog: !this.get("flashincognitosupport"),
                        rtmpStreamType: this.get("rtmpstreamtype"),
                        rtmpMicrophoneCodec: this.get("rtmpmicrophonecodec"),
                        webrtcStreaming: !!this.get("webrtcstreaming"),
                        webrtcStreamingIfNecessary: !!this.get("webrtcstreamingifnecessary"),
                        // webrtcOnMobile: !!this.get("webrtconmobile"),
                        localPlaybackRequested: this.get("localplayback")
                    };
                },

                _attachRecorder: function() {
                    if (this.recorderAttached())
                        return;
                    if (!this.__activated) {
                        this.__attachRequested = true;
                        return;
                    }
                    this.set("hasrecorder", true);
                    this.__attachRequested = false;
                    var audio = this.activeElement().querySelector("[data-audio='audio']");
                    this._clearError();
                    this.recorder = AudioRecorderWrapper.create(Objs.extend({
                        element: audio
                    }, this._audioRecorderWrapperOptions()));
                    // Draw visualisation effect for the audio player
                    // if (this.get("visualeffectvisible") && AudioVisualisation.supported()) {
                    //     this.audioVisualisation = new AudioVisualisation(audio, {
                    //         recorder: this.recorder,
                    //         globalAudioContext: WebRTCSupport.globals().audioContext,
                    //         height: this.recorder._recorder._options.recordResolution.height || 120,
                    //         element: this.activeElement()
                    //     });
                    // }
                    if (this.recorder)
                        this.trigger("attached");
                    else
                        this._error("attach");
                },

                _softwareDependencies: function() {
                    if (!this.recorderAttached() || !this.recorder)
                        return Promise.error("No recorder attached.");
                    return this.recorder.softwareDependencies();
                },

                _bindMedia: function() {
                    if (this._bound || !this.recorderAttached() || !this.recorder)
                        return;
                    this.recorder.ready.success(function() {
                        this.recorder.on("require_display", function() {
                            this.set("hideoverlay", true);
                        }, this);
                        this.recorder.bindMedia().error(function(e) {
                            this.trigger("access_forbidden", e);
                            this.set("hideoverlay", false);
                            this.off("require_display", null, this);
                            this._error("bind", e);
                        }, this).success(function() {
                            this.trigger("access_granted");
                            this.recorder.setVolumeGain(this.get("microphone-volume"));
                            this.set("hideoverlay", false);
                            this.off("require_display", null, this);
                            this.recorder.enumerateDevices().success(function(devices) {
                                var selected = this.recorder.currentDevices();
                                this.set("selectedmicrophone", selected.audio);
                                this.set("microphones", new Collection(Objs.values(devices.audio)));
                            }, this);
                            this.recorder.testSoundLevel(true);
                            this.set("devicetesting", true);
                            this._updateStretch();
                            this._bound = true;
                            this.trigger("bound");
                        }, this);
                    }, this);
                },

                isFlash: function() {
                    return this.recorder && this.recorder.isFlash();
                },

                _initializeUploader: function() {
                    if (this._dataUploader)
                        this._dataUploader.weakDestroy();
                    this._dataUploader = new MultiUploader();
                },

                _unbindMedia: function() {
                    if (!this._bound)
                        return;
                    this.recorder.unbindMedia();
                    this._bound = false;
                },

                _uploadAudioFile: function(file) {
                    if (this.get("simulate"))
                        return;
                    var uploader = FileUploader.create(Objs.extend({
                        source: file
                    }, this.get("uploadoptions").audio));
                    uploader.upload();
                    this._dataUploader.addUploader(uploader);
                },

                _prepareRecording: function() {
                    return Promise.create(true);
                },

                _startRecording: function() {
                    if (this.__recording)
                        return Promise.error(true);
                    this.set("devicetesting", false);
                    return this.recorder.startRecord({
                        rtmp: this.get("uploadoptions").rtmp,
                        audio: this.get("uploadoptions").audio,
                        webrtcStreaming: this.get("uploadoptions").webrtcStreaming
                    }).success(function() {
                        this.__recording = true;
                        this.__recording_start_time = Time.now();
                    }, this);
                },

                _stopRecording: function() {
                    if (!this.__recording)
                        return Promise.error(true);
                    // Destroy audio visualisation effect for the recorder
                    // if (this.audioVisualisation)
                    //     this.audioVisualisation.cancelFrame(this.audioVisualisation.frameID);
                    return this.recorder.stopRecord({
                        rtmp: this.get("uploadoptions").rtmp,
                        audio: this.get("uploadoptions").audio,
                        webrtcStreaming: this.get("uploadoptions").webrtcStreaming
                    }).success(function(uploader) {
                        this.__recording = false;
                        uploader.upload();
                        this._dataUploader.addUploader(uploader);
                    }, this);
                },

                isRecording: function() {
                    return this.__recording;
                },

                _verifyRecording: function() {
                    return Promise.create(true);
                },

                _afterActivate: function(element) {
                    inherited._afterActivate.call(this, element);
                    this.__activated = true;
                    if (this.__attachRequested)
                        this._attachRecorder();
                },

                object_functions: ["record", "rerecord", "stop", "play", "pause", "reset"],

                functions: {

                    cancel: function() {
                        if (confirm(this.stringUnicode("cancel-confirm")))
                            this.execute("reset");
                    },

                    record: function() {
                        this.host.state().record();
                    },

                    record_audio: function() {
                        this.host.state().selectRecord();
                    },

                    upload_audio: function(file) {
                        this.host.state().selectUpload(file);
                    },

                    select_microphone: function(microphone_id) {
                        if (this.recorder) {
                            this.recorder.setCurrentDevices({
                                audio: microphone_id
                            });
                            this.recorder.testSoundLevel(true);
                            this.set("selectedmicrophone", microphone_id);
                        }
                        this.set("microphonehealthy", false);
                    },

                    rerecord: function() {
                        if (confirm(this.stringUnicode("rerecord-confirm")))
                            this.host.state().rerecord();
                    },

                    stop: function() {
                        this.host.state().stop();
                    },

                    play: function() {
                        this.host.state().play();
                    },

                    pause: function() {
                        this.host.state().pause();
                    },

                    message_click: function() {
                        this.trigger("message-click");
                    },

                    message_link_click: function(link) {
                        this.trigger("message-link-click", link);
                    },

                    playing: function() {
                        this.trigger("playing");
                    },

                    paused: function() {
                        this.trigger("paused");
                    },

                    ended: function() {
                        this.trigger("ended");
                    },

                    reset: function() {
                        this._stopRecording().callback(function() {
                            this._unbindMedia();
                            this._detachRecorder();
                            this.host.state().next("Initial");
                        }, this);
                    },

                    manual_submit: function() {
                        this.set("rerecordable", false);
                        this.set("manualsubmit", false);
                        this.trigger("manually_submitted");
                    },

                    ready_to_play: function() {
                        this.trigger("ready_to_play");
                    }

                },

                destroy: function() {
                    this._timer.destroy();
                    this.host.destroy();
                    this._detachRecorder();
                    inherited.destroy.call(this);
                },

                soundLevel: function() {
                    return this.recorderAttached() ? this.recorder.soundLevel() : null;
                },

                _timerFire: function() {
                    if (this.destroyed())
                        return;
                    try {
                        if (this.recorderAttached() && this.get("devicetesting")) {
                            if (!this.get("microphonehealthy") && this.soundLevel() >= 1.01) {
                                this.set("microphonehealthy", true);
                                this.recorder.testSoundLevel(false);
                            }
                        }
                    } catch (e) {}

                    this._updateStretch();
                    this._updateCSSSize();
                },

                _updateCSSSize: function() {
                    var width = Dom.elementDimensions(this.activeElement()).width;
                    this.set("csssize", width > 400 ? "normal" : (width > 300 ? "medium" : "small"));
                },

                audioHeight: function() {
                    return this.recorderAttached() ? this.recorder.cameraHeight() : NaN;
                },

                audioWidth: function() {
                    return this.recorderAttached() ? this.recorder.cameraWidth() : NaN;
                },

                aspectRatio: function() {
                    return this.audioWidth() / this.audioHeight();
                },

                parentWidth: function() {
                    return this.get("width") || Dom.elementDimensions(this.activeElement()).width;
                },

                parentHeight: function() {
                    return this.get("height") || Dom.elementDimensions(this.activeElement()).height;
                },

                parentAspectRatio: function() {
                    return this.parentWidth() / this.parentHeight();
                },

                _updateStretch: function() {
                    var newStretch = null;
                    if (this.get("stretch")) {
                        var ar = this.aspectRatio();
                        if (isFinite(ar)) {
                            var par = this.parentAspectRatio();
                            if (isFinite(par)) {
                                if (par > ar)
                                    newStretch = "height";
                                if (par < ar)
                                    newStretch = "width";
                            } else if (par === Infinity)
                                newStretch = "height";
                        }
                    }
                    if (this.__currentStretch !== newStretch) {
                        if (this.__currentStretch)
                            Dom.elementRemoveClass(this.activeElement(), this.get("css") + "-stretch-" + this.__currentStretch);
                        if (newStretch)
                            Dom.elementAddClass(this.activeElement(), this.get("css") + "-stretch-" + newStretch);
                    }
                    this.__currentStretch = newStretch;
                }

            };
        }, {

            recorderStates: function() {
                return [RecorderStates];
            }

        })
        .register("ba-audiorecorder")
        .registerFunctions({ /**/"!player_active": function (obj) { with (obj) { return !player_active; } }, "css": function (obj) { with (obj) { return css; } }, "csstheme": function (obj) { with (obj) { return csstheme; } }, "csssize": function (obj) { with (obj) { return csssize; } }, "iecss": function (obj) { with (obj) { return iecss; } }, "ie8 ? 'ie8' : 'noie8'": function (obj) { with (obj) { return ie8 ? 'ie8' : 'noie8'; } }, "cssrecorder": function (obj) { with (obj) { return cssrecorder; } }, "firefox ? 'firefox' : 'common'": function (obj) { with (obj) { return firefox ? 'firefox' : 'common'; } }, "cssaudio": function (obj) { with (obj) { return cssaudio; } }, "themecolor": function (obj) { with (obj) { return themecolor; } }, "widthHeightStyles": function (obj) { with (obj) { return widthHeightStyles; } }, "hasrecorder ? 'hasrecorder' : 'norecorder'": function (obj) { with (obj) { return hasrecorder ? 'hasrecorder' : 'norecorder'; } }, "!hideoverlay": function (obj) { with (obj) { return !hideoverlay; } }, "dynloader": function (obj) { with (obj) { return dynloader; } }, "cssloader || css": function (obj) { with (obj) { return cssloader || css; } }, "cssrecorder || css": function (obj) { with (obj) { return cssrecorder || css; } }, "tmplloader": function (obj) { with (obj) { return tmplloader; } }, "loader_active": function (obj) { with (obj) { return loader_active; } }, "loadertooltip": function (obj) { with (obj) { return loadertooltip; } }, "hovermessage": function (obj) { with (obj) { return hovermessage; } }, "loaderlabel": function (obj) { with (obj) { return loaderlabel; } }, "dynmessage": function (obj) { with (obj) { return dynmessage; } }, "cssmessage || css": function (obj) { with (obj) { return cssmessage || css; } }, "tmplmessage": function (obj) { with (obj) { return tmplmessage; } }, "message_active": function (obj) { with (obj) { return message_active; } }, "message": function (obj) { with (obj) { return message; } }, "message_links": function (obj) { with (obj) { return message_links; } }, "dynchooser": function (obj) { with (obj) { return dynchooser; } }, "recordviafilecapture": function (obj) { with (obj) { return recordviafilecapture; } }, "csschooser || css": function (obj) { with (obj) { return csschooser || css; } }, "tmplchooser": function (obj) { with (obj) { return tmplchooser; } }, "chooser_active && !is_initial_state": function (obj) { with (obj) { return chooser_active && !is_initial_state; } }, "allowrecord": function (obj) { with (obj) { return allowrecord; } }, "allowupload": function (obj) { with (obj) { return allowupload; } }, "allowcustomupload": function (obj) { with (obj) { return allowcustomupload; } }, "allowedextensions": function (obj) { with (obj) { return allowedextensions; } }, "primaryrecord": function (obj) { with (obj) { return primaryrecord; } }, "timelimit": function (obj) { with (obj) { return timelimit; } }, "dyncontrolbar": function (obj) { with (obj) { return dyncontrolbar; } }, "csscontrolbar || css": function (obj) { with (obj) { return csscontrolbar || css; } }, "csstheme || css": function (obj) { with (obj) { return csstheme || css; } }, "tmplcontrolbar": function (obj) { with (obj) { return tmplcontrolbar; } }, "controlbar_active": function (obj) { with (obj) { return controlbar_active; } }, "microphones": function (obj) { with (obj) { return microphones; } }, "selectedmicrophone || 0": function (obj) { with (obj) { return selectedmicrophone || 0; } }, "microphonehealthy": function (obj) { with (obj) { return microphonehealthy; } }, "settingsvisible": function (obj) { with (obj) { return settingsvisible; } }, "recordvisible": function (obj) { with (obj) { return recordvisible; } }, "allowcancel && cancancel": function (obj) { with (obj) { return allowcancel && cancancel; } }, "rerecordvisible": function (obj) { with (obj) { return rerecordvisible; } }, "stopvisible": function (obj) { with (obj) { return stopvisible; } }, "controlbarlabel": function (obj) { with (obj) { return controlbarlabel; } }, "mintimeindicator": function (obj) { with (obj) { return mintimeindicator; } }, "timeminlimit": function (obj) { with (obj) { return timeminlimit; } }, "player_active": function (obj) { with (obj) { return player_active; } }, "ie8": function (obj) { with (obj) { return ie8; } }, "dynaudioplayer": function (obj) { with (obj) { return dynaudioplayer; } }, "theme || 'default'": function (obj) { with (obj) { return theme || 'default'; } }, "playbacksource": function (obj) { with (obj) { return playbacksource; } }, "false": function (obj) { with (obj) { return false; } }, "forceflash": function (obj) { with (obj) { return forceflash; } }, "noflash": function (obj) { with (obj) { return noflash; } }, "stretch": function (obj) { with (obj) { return stretch; } }, "playerattrs": function (obj) { with (obj) { return playerattrs; } }, "width": function (obj) { with (obj) { return width; } }, "height": function (obj) { with (obj) { return height; } }, "duration / 1000": function (obj) { with (obj) { return duration / 1000; } }, "rerecordable && (recordings === null || recordings > 0)": function (obj) { with (obj) { return rerecordable && (recordings === null || recordings > 0); } }, "manualsubmit && verified": function (obj) { with (obj) { return manualsubmit && verified; } }, "true": function (obj) { with (obj) { return true; } }, "autoplay": function (obj) { with (obj) { return autoplay; } }, "visualeffectvisible": function (obj) { with (obj) { return visualeffectvisible; } }/**/ })
        .attachStringTable(Assets.strings)
        .addStrings({
            "recorder-error": "An error occurred, please try again later. Click to retry.",
            "attach-error": "We could not access the media interface. Depending on the device and browser, you might need to install Flash or access the page via SSL.",
            "software-required": "Please click below to install / activate the following requirements in order to proceed.",
            "software-waiting": "Waiting for the requirements to be installed / activated. You might need to refresh the page after completion.",
            "access-forbidden": "Access to the media was forbidden. Click to retry.",
            "uploading": "Uploading",
            "uploading-failed": "Uploading failed - click here to retry.",
            "upload-error-duration": "Length of the uploaded audio does not meet the requirements - click here to retry.",
            "verifying": "Verifying",
            "verifying-failed": "Verifying failed - click here to retry.",
            "rerecord-confirm": "Do you really want to redo your audio?",
            "cancel-confirm": "Do you really want to cancel your audio upload?",
            "audio_file_too_large": "Your audio file is too large (%s) - click here to try again with a smaller audio file.",
            "unsupported_audio_type": "Please upload: %s - click here to retry."
        });
});
Scoped.define("module:AudioRecorder.Dynamics.RecorderStates.State", [
    "base:States.State",
    "base:Events.ListenMixin",
    "base:Objs"
], function(State, ListenMixin, Objs, scoped) {
    return State.extend({
        scoped: scoped
    }, [ListenMixin, {

        dynamics: [],

        _start: function() {
            this.dyn = this.host.dynamic;
            Objs.iter(Objs.extend({
                "message": false,
                "chooser": false,
                "controlbar": false,
                "loader": false
            }, Objs.objectify(this.dynamics)), function(value, key) {
                this.dyn.set(key + "_active", value);
            }, this);
            this.dyn.set("message_links", null);
            this.dyn._accessing_microphone = false;
            this._started();
        },

        _started: function() {},

        record: function() {
            this.dyn.set("autorecord", true);
        },

        stop: function() {
            this.dyn.scopes.player.execute('stop');
        },

        play: function() {
            this.dyn.scopes.player.execute('play');
        },

        pause: function() {
            this.dyn.scopes.player.execute('pause');
        },

        rerecord: function() {},

        selectRecord: function() {},

        selectUpload: function(file) {}

    }]);
});



Scoped.define("module:AudioRecorder.Dynamics.RecorderStates.FatalError", [
    "module:AudioRecorder.Dynamics.RecorderStates.State",
    "browser:Info",
    "base:Timers.Timer"
], function(State, Info, Timer, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["message"],
        _locals: ["message", "retry"],

        _started: function() {
            this.dyn.set("message", this._message || this.dyn.string("recorder-error"));
            this.dyn.set("shortMessage", this.dyn.get("message").length < 30);
            this.listenOn(this.dyn, "message-click", function() {
                if (this._retry)
                    this.next(this._retry);
            });
        }

    });
});


Scoped.define("module:AudioRecorder.Dynamics.RecorderStates.Initial", [
    "module:AudioRecorder.Dynamics.RecorderStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        _started: function() {
            this.dyn.set("is_initial_state", true);
            this.dyn.set("verified", false);
            this.dyn.set("playbacksource", null);
            this.dyn.set("player_active", false);
            this.dyn._audioFileName = null;
            this.dyn._audioFile = null;
            this.dyn._audioFilePlaybackable = false;
            this.dyn._initializeUploader();
            if (!this.dyn.get("recordermode")) {
                if (!this.dyn.get("audio")) {
                    console.warn("recordermode:false requires an existing audio to be present and provided.");
                    this.dyn.set("recordermode", true);
                } else
                    this.next("Player");
            } else if (this.dyn.get("autorecord") || this.dyn.get("skipinitial"))
                this.eventualNext("RequiredSoftwareCheck");
            else
                this.next("Chooser");
        },

        _end: function() {
            this.dyn.set("is_initial_state", false);
        }

    });
});


Scoped.define("module:AudioRecorder.Dynamics.RecorderStates.Player", [
    "module:AudioRecorder.Dynamics.RecorderStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        rerecord: function() {
            this.dyn.trigger("rerecord");
            this.dyn.set("recordermode", true);
            this.next("Initial");
        },

        _started: function() {
            this.dyn.set("player_active", true);
        },

        _end: function() {
            this.dyn.set("player_active", false);
        }

    });
});


Scoped.define("module:AudioRecorder.Dynamics.RecorderStates.Chooser", [
    "module:AudioRecorder.Dynamics.RecorderStates.State",
    "base:Strings",
    "browser:Info",
    "media:Player.Support"
], function(State, Strings, Info, PlayerSupport, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["chooser"],

        record: function() {
            this.dyn.set("autorecord", true);
            this.selectRecord();
        },

        selectRecord: function() {
            this.dyn.set("record_media", "microphone");
            this.next("RequiredSoftwareCheck");
        },

        selectUpload: function(file) {
            if (!(Info.isMobile() && Info.isAndroid() && Info.isCordova())) {
                if (this.dyn.get("allowedextensions")) {
                    var filename = (file.files[0].name || "").toLowerCase();
                    var found = false;
                    this.dyn.get("allowedextensions").forEach(function(extension) {
                        if (Strings.ends_with(filename, "." + extension.toLowerCase()))
                            found = true;
                    }, this);
                    if (!found) {
                        this.next("FatalError", {
                            message: this.dyn.string("unsupported_audio_type").replace("%s", this.dyn.get("allowedextensions").join(" / ")),
                            retry: "Chooser"
                        });
                        return;
                    }
                }
                if (this.dyn.get("filesizelimit") && file.files && file.files.length > 0 && file.files[0].size && file.files[0].size > this.dyn.get("filesizelimit")) {
                    var fact = "KB";
                    var size = Math.round(file.files[0].size / 1000);
                    var limit = Math.round(this.dyn.get("filesizelimit") / 1000);
                    if (size > 999) {
                        fact = "MB";
                        size = Math.round(size / 1000);
                        limit = Math.round(limit / 1000);
                    }
                    this.next("FatalError", {
                        message: this.dyn.string("audio_file_too_large").replace("%s", size + fact + " / " + limit + fact),
                        retry: "Chooser"
                    });
                    return;
                }
            }
            try {
                PlayerSupport.audioFileInfo(file.files[0]).success(function(data) {
                    if (data.duration && this.dyn.get("enforce-duration")) {
                        if ((this.dyn.get("timeminlimit") && data.duration < this.dyn.get("timeminlimit")) || (this.dyn.get("timelimit") && data.duration > this.dyn.get("timelimit"))) {
                            this.next("FatalError", {
                                message: this.dyn.string("upload-error-duration"),
                                retry: "Chooser"
                            });
                            return;
                        }
                    }
                    this.dyn._audioFilePlaybackable = true;
                    this._uploadFile(file);
                }, this).error(function() {
                    this._uploadFile(file);
                }, this);
            } catch (e) {
                this._uploadFile(file);
            }
        },

        _uploadFile: function(file) {
            this.dyn.set("creation-type", Info.isMobile() ? "mobile" : "upload");
            try {
                this.dyn._audioFileName = file.files[0].name;
                this.dyn._audioFile = file.files[0];
            } catch (e) {}
            this.dyn._prepareRecording().success(function() {
                this.dyn.trigger("upload_selected", file);
                this.dyn._uploadAudioFile(file);
                this._setValueToEmpty(file);
                this.next("Uploading");
            }, this).error(function(s) {
                this._setValueToEmpty(file);
                this.next("FatalError", {
                    message: s,
                    retry: "Chooser"
                });
            }, this);
        },

        /**
         * Try to fix twice file upload behaviour, (on change event won't be executed twice with the same file)
         * Don't set null to value, will not solve an issue
         * @param {HTMLInputElement} file
         */
        _setValueToEmpty: function(file) {
            try {
                file.value = '';
            } catch (e) {}
        }

    });
});


Scoped.define("module:AudioRecorder.Dynamics.RecorderStates.RequiredSoftwareCheck", [
    "module:AudioRecorder.Dynamics.RecorderStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader"],

        _started: function() {
            this.dyn.set("settingsvisible", false);
            this.dyn.set("recordvisible", false);
            this.dyn.set("rerecordvisible", false);
            this.dyn.set("stopvisible", false);
            this.dyn.set("skipvisible", false);
            this.dyn.set("controlbarlabel", "");
            this.dyn.set("loaderlabel", "");
            this.listenOn(this.dyn, "error", function(s) {
                this.next("FatalError", {
                    message: this.dyn.string("attach-error"),
                    retry: "Initial"
                });
            }, this);
            this.dyn._attachRecorder();
            if (this.dyn) {
                this.dyn.on("message-link-click", function(link) {
                    link.execute();
                    this.next("RequiredSoftwareWait");
                }, this);
                this.dyn._softwareDependencies().error(function(dependencies) {
                    this.dyn.set("message_links", dependencies);
                    this.dyn.set("loader_active", false);
                    this.dyn.set("message_active", true);
                    this.dyn.set("message", this.dyn.string("software-required"));
                }, this).success(function() {
                    this.next("MicrophoneAccess");
                }, this);
            }
        }

    });
});


Scoped.define("module:AudioRecorder.Dynamics.RecorderStates.RequiredSoftwareWait", [
    "module:AudioRecorder.Dynamics.RecorderStates.State",
    "base:Promise",
    "browser:Dom"
], function(State, Promise, Dom, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["message"],

        _started: function() {
            this.dyn.set("settingsvisible", false);
            this.dyn.set("recordvisible", false);
            this.dyn.set("rerecordvisible", false);
            this.dyn.set("stopvisible", false);
            this.dyn.set("controlbarlabel", "");
            this.dyn.set("loaderlabel", "");
            this.dyn.set("message", this.dyn.string("software-waiting"));
            Promise.resilience(function() {
                if (Dom.isTabHidden())
                    return Promise.error("Not ready");
                return this.dyn._softwareDependencies();
            }, this, 120, [], 1000).success(function() {
                this.next("MicrophoneAccess");
            }, this).error(function() {
                this.next("RequiredSoftwareCheck");
            }, this);
            this.dyn.on("message-click", function() {
                this.next("RequiredSoftwareCheck");
            }, this);
        }

    });
});



Scoped.define("module:AudioRecorder.Dynamics.RecorderStates.MicrophoneAccess", [
    "module:AudioRecorder.Dynamics.RecorderStates.State",
    "base:Timers.Timer"
], function(State, Timer, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader"],

        _started: function() {
            this.dyn.set("settingsvisible", true);
            this.dyn.set("recordvisible", true);
            this.dyn.set("rerecordvisible", false);
            this.dyn.set("stopvisible", false);
            this.dyn.set("controlbarlabel", "");
            this.dyn.set("loaderlabel", "");
            this.listenOn(this.dyn, "bound", function() {
                this.dyn.set("creation-type", this.dyn.isFlash() ? "flash" : "webrtc");
                this.next("MicrophoneHasAccess");
            }, this);
            this.listenOn(this.dyn, "error", function(s) {
                this.next("FatalError", {
                    message: this.dyn.string("attach-error"),
                    retry: "Initial"
                });
            }, this);
            this.listenOn(this.dyn, "access_forbidden", function() {
                this.next("FatalError", {
                    message: this.dyn.string("access-forbidden"),
                    retry: "Initial"
                });
            }, this);
            this.dyn._bindMedia();
        }

    });
});


Scoped.define("module:AudioRecorder.Dynamics.RecorderStates.MicrophoneHasAccess", [
    "module:AudioRecorder.Dynamics.RecorderStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["controlbar"],

        _started: function() {
            this.dyn.trigger("ready_to_record");
            this._preparePromise = null;
            if (this.dyn.get("countdown") > 0 && this.dyn.recorder && this.dyn.recorder.recordDelay(this.dyn.get("uploadoptions")) > this.dyn.get("countdown") * 1000)
                this._preparePromise = this.dyn._prepareRecording();
            this.dyn.set("hovermessage", "");
            this.dyn.set("settingsvisible", true);
            this.dyn.set("recordvisible", true);
            this.dyn.set("rerecordvisible", false);
            this.dyn.set("stopvisible", false);
            this.dyn.set("controlbarlabel", "");
            if (this.dyn.get("autorecord"))
                this.next("RecordPrepare", {
                    preparePromise: this._preparePromise
                });
        },

        record: function() {
            if (this.dyn.get("autorecord"))
                return;
            if (this.dyn.get("audio-test-mandatory") && !this.dyn.get("microphonehealthy") && !this._preparePromise)
                return;
            this.next("RecordPrepare", {
                preparePromise: this._preparePromise
            });
        }

    });
});


Scoped.define("module:AudioRecorder.Dynamics.RecorderStates.RecordPrepare", [
    "module:AudioRecorder.Dynamics.RecorderStates.State",
    "base:Timers.Timer",
    "base:Time"
], function(State, Timer, Time, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader"],
        _locals: ["preparePromise"],

        _started: function() {
            this.dyn.set("message", "");
            this.dyn.set("loaderlabel", "");
            var startedRecording = false;
            this.dyn._accessing_microphone = true;
            this._preparePromise = this._preparePromise || this.dyn._prepareRecording();
            var countdown = this.dyn.get("countdown") ? this.dyn.get("countdown") * 1000 : 0;
            var delay = this.dyn.recorder.recordDelay(this.dyn.get("uploadoptions")) || 0;
            if (countdown) {
                var displayDenominator = 1000;
                var silentTime = 0;
                var startTime = Time.now();
                var endTime = startTime + Math.max(delay, countdown);
                if (delay > countdown) {
                    silentTime = Math.min(500, delay - countdown);
                    displayDenominator = (delay - silentTime) / countdown * 1000;
                } else
                    this.dyn.set("loaderlabel", this.dyn.get("countdown"));
                var timer = new Timer({
                    context: this,
                    delay: 50,
                    fire: function() {
                        var now = Time.now();
                        var time_left = Math.max(0, endTime - now);
                        if (now > silentTime + startTime) {
                            this.dyn.set("loaderlabel", "" + Math.ceil((time_left - silentTime) / displayDenominator));
                            this.dyn.trigger("countdown", Math.round((time_left - silentTime) / displayDenominator * 1000));
                        }
                        if (endTime <= now) {
                            this.dyn.set("loaderlabel", "");
                            timer.stop();
                        }
                        if ((time_left <= delay) && !startedRecording) {
                            startedRecording = true;
                            this._startRecording();
                        }
                    }
                });
                this.auto_destroy(timer);
            } else
                this._startRecording();
        },

        record: function() {
            this._startRecording();
        },

        _startRecording: function() {
            this._preparePromise.success(function() {
                this.dyn._startRecording().success(function() {
                    this.next("Recording");
                }, this).error(function(s) {
                    this.next("FatalError", {
                        message: s,
                        retry: "RequiredSoftwareCheck"
                    });
                }, this);
            }, this).error(function(s) {
                this.next("FatalError", {
                    message: s,
                    retry: "RequiredSoftwareCheck"
                });
            }, this);
        }

    });
});


Scoped.define("module:AudioRecorder.Dynamics.RecorderStates.Recording", [
    "module:AudioRecorder.Dynamics.RecorderStates.State",
    "base:Timers.Timer",
    "base:Time",
    "base:TimeFormat",
    "base:Async"
], function(State, Timer, Time, TimeFormat, Async, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["controlbar"],

        _started: function() {
            this.dyn.set("hovermessage", "");
            this.dyn.set("topmessage", "");
            this.dyn._accessing_microphone = true;
            this.dyn.trigger("recording");
            this.dyn.set("settingsvisible", false);
            this.dyn.set("rerecordvisible", false);
            this.dyn.set("recordvisible", false);
            this.dyn.set("stopvisible", true);

            this._startTime = Time.now();
            this._stopping = false;
            this._timer = this.auto_destroy(new Timer({
                immediate: true,
                delay: 10,
                context: this,
                fire: this._timerFire
            }));
        },

        _timerFire: function() {
            var limit = this.dyn.get("timelimit");
            var current = Time.now();
            var display = Math.max(0, limit ? (this._startTime + limit * 1000 - current) : (current - this._startTime));
            this.dyn.trigger("recording_progress", current - this._startTime);
            this.dyn.set("controlbarlabel", this.dyn.get("display-timer") ? TimeFormat.format(TimeFormat.ELAPSED_MINUTES_SECONDS, display) : "");

            if (this.dyn.get("timeminlimit"))
                this.dyn.set("mintimeindicator", (Time.now() - this._startTime) / 1000 <= this.dyn.get("timeminlimit"));

            if (limit && this._startTime + limit * 1000 <= current) {
                this._timer.stop();
                this.stop();
            }

        },

        stop: function() {
            var minlimit = this.dyn.get("timeminlimit");
            if (minlimit) {
                var delta = (Time.now() - this._startTime) / 1000;
                if (delta < minlimit) {
                    var limit = this.dyn.get("timelimit");
                    if (!limit || limit > delta)
                        return;
                }
            }
            if (this._stopping)
                return;
            this.dyn.set("loader_active", true);
            this.dyn.set("controlbar_active", false);
            this.dyn.set("message_active", true);
            this.dyn.set("message", "");
            this._stopping = true;
            Async.eventually(function() {
                this.dyn._stopRecording().success(function() {
                    this._hasStopped();
                    this.next("Uploading");
                }, this).error(function(s) {
                    this.next("FatalError", {
                        message: s,
                        retry: "RequiredSoftwareCheck"
                    });
                }, this);
            }, this);
        },

        _hasStopped: function() {
            this.dyn.set("duration", Time.now() - this._startTime);
            this.dyn._unbindMedia();
            this.dyn.trigger("recording_stopped");
        }

    });
});



Scoped.define("module:AudioRecorder.Dynamics.RecorderStates.Uploading", [
    "module:AudioRecorder.Dynamics.RecorderStates.State",
    "base:Time",
    "base:Async",
    "base:Objs"
], function(State, Time, Async, Objs, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader", "message"],

        _started: function() {
            this.dyn.set("cancancel", true);
            this.dyn.set("skipinitial", this.dyn.get("skipinitial") || this.dyn.get("skipinitialonrerecord"));
            this.dyn.set("settingsvisible", false);
            this.dyn.set("recordvisible", false);
            this.dyn.set("stopvisible", false);
            this.dyn.set("loadlabel", "");
            this.dyn.set("controlbarlabel", "");
            this.dyn.trigger("uploading");
            this.dyn.set("rerecordvisible", this.dyn.get("early-rerecord"));
            if (this.dyn.get("early-rerecord"))
                this.dyn.set("controlbar_active", true);
            this.dyn.set("hovermessage", "");
            this.dyn.set("message", this.dyn.string("uploading"));
            var uploader = this.dyn._dataUploader;
            this.listenOn(uploader, "success", function() {
                Async.eventually(function() {
                    if (this.destroyed())
                        return;
                    this._finished();
                    this.next("Verifying");
                }, this);
            });
            this.listenOn(uploader, "error", function(e) {
                var bestError = this.dyn.string("uploading-failed");
                try {
                    e.forEach(function(ee) {
                        for (var key in ee)
                            if (this.dyn.string("upload-error-" + key))
                                bestError = this.dyn.string("upload-error-" + key);
                    }, this);
                } catch (err) {}
                this.dyn.set("player_active", false);
                this.next("FatalError", {
                    message: bestError,
                    retry: this.dyn.recorderAttached() ? "Uploading" : "Initial"
                });
            });
            this.listenOn(uploader, "progress", function(uploaded, total) {
                this.dyn.trigger("upload_progress", uploaded, total);
                if (total !== 0 && total > 0 && uploaded >= 0) {
                    var up = Math.min(100, Math.round(uploaded / total * 100));
                    if (!isNaN(up)) {
                        this.dyn.set("message", this.dyn.string("uploading") + ": " + up + "%");
                        this.dyn.set("playertopmessage", this.dyn.get("message"));
                    }
                }
            });
            if (this.dyn.get("localplayback") && ((this.dyn.recorder && this.dyn.recorder.supportsLocalPlayback()) || this.dyn._audioFilePlaybackable)) {
                if (this.dyn.recorder && this.dyn.recorder.supportsLocalPlayback())
                    this.dyn.set("playbacksource", this.dyn.recorder.localPlaybackSource());
                else
                    this.dyn.set("playbacksource", (window.URL || window.webkitURL).createObjectURL(this.dyn._audioFile));
                this.dyn.set("loader_active", false);
                this.dyn.set("message_active", false);
                this.dyn.set("player_active", true);
            }
            this.dyn.set("start-upload-time", Time.now());
            uploader.reset();
            uploader.upload();
        },

        rerecord: function() {
            this.dyn._detachRecorder();
            this.dyn.trigger("rerecord");
            this.dyn.set("recordermode", true);
            this.next("Initial");
        },

        _finished: function() {
            this.dyn.set("cancancel", false);
            this.dyn.trigger("uploaded");
            this.dyn.set("end-upload-time", Time.now());
        }

    });
});


Scoped.define("module:AudioRecorder.Dynamics.RecorderStates.Verifying", [
    "module:AudioRecorder.Dynamics.RecorderStates.State"
], function(State, scoped) {
    return State.extend({
        scoped: scoped
    }, {

        dynamics: ["loader", "message"],

        _started: function() {
            this.dyn.set("loadlabel", "");
            this.dyn.trigger("verifying");
            this.dyn.set("message", this.dyn.string("verifying") + "...");
            this.dyn.set("playertopmessage", this.dyn.get("message"));
            if (this.dyn.get("localplayback") && ((this.dyn.recorder && this.dyn.recorder.supportsLocalPlayback()) || this.dyn._audioFilePlaybackable)) {
                this.dyn.set("loader_active", false);
                this.dyn.set("message_active", false);
            } else {
                this.dyn.set("rerecordvisible", this.dyn.get("early-rerecord"));
                if (this.dyn.get("early-rerecord"))
                    this.dyn.set("controlbar_active", true);
            }
            this.dyn._verifyRecording().success(function() {
                this.dyn.trigger("verified");
                this.dyn._detachRecorder();
                if (this.dyn.get("recordings"))
                    this.dyn.set("recordings", this.dyn.get("recordings") - 1);
                this.dyn.set("message", "");
                this.dyn.set("verified", true);
                this.next("Player");
            }, this).error(function() {
                this.dyn.set("player_active", false);
                this.next("FatalError", {
                    message: this.dyn.string("verifying-failed"),
                    retry: this.dyn.recorderAttached() ? "Verifying" : "Initial"
                });
            }, this);
        },

        rerecord: function() {
            this.dyn._detachRecorder();
            this.dyn.trigger("rerecord");
            this.dyn.set("recordermode", true);
            this.next("Initial");
        }

    });
});
}).call(Scoped);